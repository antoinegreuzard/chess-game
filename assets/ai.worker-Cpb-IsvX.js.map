{"version":3,"file":"ai.worker-Cpb-IsvX.js","sources":["../src/utils/pieceFactory.ts","../src/piece.ts","../src/pieces/king.ts","../src/utils/utils.ts","../src/board.ts","../src/ai/evaluator.ts","../src/ai/endgameTablebase.ts","../src/ai/openingBook.ts","../src/ai.ts","../src/pieces/pawn.ts","../src/ai.worker.ts"],"sourcesContent":["import { PieceColor, PieceType } from '../piece';\n\nexport async function createPiece(type: PieceType, color: PieceColor) {\n  switch (type) {\n    case PieceType.PAWN:\n      const { Pawn } = await import('../pieces/pawn');\n      return new Pawn(color);\n    case PieceType.ROOK:\n      const { Rook } = await import('../pieces/rook');\n      return new Rook(color);\n    case PieceType.KNIGHT:\n      const { Knight } = await import('../pieces/knight');\n      return new Knight(color);\n    case PieceType.BISHOP:\n      const { Bishop } = await import('../pieces/bishop');\n      return new Bishop(color);\n    case PieceType.QUEEN:\n      const { Queen } = await import('../pieces/queen');\n      return new Queen(color);\n    case PieceType.KING:\n      const { King } = await import('../pieces/king');\n      return new King(color);\n    default:\n      throw new Error(`Type de pièce inconnu : ${type}`);\n  }\n}\n","// src/piece.ts\nimport { createPiece } from './utils/pieceFactory';\nimport { King } from './pieces/king';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport interface BoardInterface {\n  getPiece(x: number, y: number): Piece | null;\n\n  updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void;\n\n  isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean;\n\n  promotePawn(x: number, y: number, pieceType: PieceType): Promise<void>;\n\n  isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean;\n\n  isKing(x: number, y: number): boolean;\n\n  isAdjacentToAnotherKing(x: number, y: number, color: PieceColor): boolean;\n\n  getPlayerColor(): PieceColor;\n\n  captureEnPassantIfValid(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void;\n}\n\nexport abstract class Piece {\n  public hasMoved: boolean = false;\n\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean;\n\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    const dx = Math.sign(toX - fromX);\n    const dy = Math.sign(toY - fromY);\n\n    let x = fromX + dx;\n    let y = fromY + dy;\n    while (x !== toX || y !== toY) {\n      if (board.getPiece(x, y) !== null) return false;\n      x += dx;\n      y += dy;\n    }\n    return true;\n  }\n\n  static isKing(piece: Piece): piece is King {\n    return piece.type === PieceType.KING;\n  }\n\n  public canCapture(toX: number, toY: number, board: BoardInterface): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return !targetPiece || targetPiece.color !== this.color;\n  }\n\n  // Sérialisation des données de la pièce\n  public toData(): any {\n    return {\n      color: this.color,\n      type: this.type,\n    };\n  }\n\n  static async fromData(data: any): Promise<Piece> {\n    return await createPiece(data.type, data.color);\n  }\n}\n","import { BoardInterface, Piece, PieceColor, PieceType } from '../piece';\n\nexport class King extends Piece {\n  public hasMoved: boolean = false;\n  public readonly type: PieceType = PieceType.KING;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.KING);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    if (toX < 0 || toX >= 8 || toY < 0 || toY >= 8) {\n      return false;\n    }\n\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n\n    // Mouvement classique du roi\n    if (dx <= 1 && dy <= 1) {\n      return (\n        this.canCapture(toX, toY, board) &&\n        !board.isAdjacentToAnotherKing(toX, toY, this.color)\n      );\n    }\n\n    // Vérifications pour le roque\n    if (!this.hasMoved && dy === 0 && dx === 2) {\n      if (board.isSquareUnderAttack(fromX, fromY, this.color)) {\n        return false;\n      }\n\n      const direction = toX > fromX ? 1 : -1;\n      const rookX = toX > fromX ? 7 : 0;\n      const rook = board.getPiece(rookX, fromY);\n\n      if (rook && rook.type === PieceType.ROOK && !rook.hasMoved) {\n        for (let x = fromX + direction; x !== toX; x += direction) {\n          if (\n            board.getPiece(x, fromY) ||\n            board.isSquareUnderAttack(x, fromY, this.color)\n          ) {\n            return false;\n          }\n        }\n        return (\n          !board.isSquareUnderAttack(toX, fromY, this.color) &&\n          !board.isAdjacentToAnotherKing(toX, toY, this.color)\n        );\n      }\n    }\n\n    return false;\n  }\n\n  // Nouvelle méthode pour vérifier les menaces sans règles spécifiques du roi\n  public static isThreatenedMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    return dx <= 1 && dy <= 1;\n  }\n}\n","// src/utils/utils.ts\n\nimport { PieceColor, PieceType } from '../piece';\n\nexport let capturedWhite: string[] = [];\nexport let capturedBlack: string[] = [];\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById(\n    'gameMessage',\n  ) as HTMLDivElement;\n  if (gameMessageElement) {\n    gameMessageElement.textContent = message;\n    gameMessageElement.style.display = 'block'; // Afficher le message\n  }\n}\n\nexport function getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case PieceType.PAWN:\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case PieceType.ROOK:\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case PieceType.KNIGHT:\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case PieceType.BISHOP:\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case PieceType.QUEEN:\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case PieceType.KING:\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\nexport function updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const pieceSymbol = getPieceSymbol(piece, color);\n\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n  } else {\n    capturedBlack.push(pieceSymbol);\n  }\n\n  updateCapturedPiecesDOM();\n}\n\nexport function updateCapturedPiecesDOM(): void {\n  const capturedWhiteElement = document.getElementById(\n    'capturedWhite',\n  ) as HTMLDivElement;\n  const capturedBlackElement = document.getElementById(\n    'capturedBlack',\n  ) as HTMLDivElement;\n\n  if (capturedWhiteElement) {\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  }\n  if (capturedBlackElement) {\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n","// src/board.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from './piece';\nimport { King } from './pieces/king';\nimport { updateCapturedPieces } from './utils/utils';\nimport { createPiece } from './utils/pieceFactory';\n\ntype BoardSquare = Piece | null;\n\nexport class Board implements BoardInterface {\n  private grid: (Piece | null)[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n  private currentPlayer: PieceColor = PieceColor.WHITE;\n\n  constructor() {\n    this.grid = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n  }\n\n  public async init(): Promise<void> {\n    this.grid = await this.initializeBoard();\n  }\n\n  private async initializeBoard(): Promise<(Piece | null)[][]> {\n    const board: (Piece | null)[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Ajouter les pièces blanches\n    board[0] = [\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.QUEEN, PieceColor.WHITE),\n      await createPiece(PieceType.KING, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n    ];\n    board[1] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.WHITE)),\n    );\n\n    // Ajouter les pièces noires\n    board[7] = [\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.QUEEN, PieceColor.BLACK),\n      await createPiece(PieceType.KING, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n    ];\n    board[6] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.BLACK)),\n    );\n\n    return board;\n  }\n\n  // Méthode générale pour vérifier les limites\n  public isWithinBounds(x: number, y: number): boolean {\n    return x >= 0 && x < 8 && y >= 0 && y < 8;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    let piece = null;\n    if (this.isWithinBounds(x, y)) piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public captureEnPassantIfValid(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void {\n    if (this.isEnPassantMove(fromX, fromY, toX, toY)) {\n      const movingPawn = this.getPiece(fromX, fromY);\n      if (!movingPawn) return;\n\n      // Détermine la position du pion capturé en fonction de la couleur\n      const capturedPawnY =\n        toY + (movingPawn.color === PieceColor.WHITE ? -1 : 1);\n\n      if (this.grid[capturedPawnY][toX]) {\n        this.grid[capturedPawnY][toX] = null;\n      }\n    }\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (\n      !this.isWithinBounds(fromX, fromY) ||\n      !this.isWithinBounds(toX, toY) ||\n      ['__proto__', 'constructor', 'prototype'].includes(fromY.toString()) ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString())\n    ) {\n      return false; // Mouvement invalide en dehors des limites ou clé interdite\n    }\n\n    const piece = this.getPiece(fromX, fromY);\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      const targetPiece = this.getPiece(toX, toY);\n\n      // Empêche de capturer le roi ennemi\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false;\n      }\n\n      // Gestion du roque pour le roi\n      if (piece.type === PieceType.KING && Math.abs(toX - fromX) === 2) {\n        if (this.isCastlingValid(piece, fromX, fromY, toX)) {\n          this.handleCastling(toX, fromY);\n          piece.hasMoved = true; // Met à jour le statut de mouvement du roi\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      // Gestion de la prise en passant\n      if (\n        piece?.type === PieceType.PAWN &&\n        this.isEnPassantMove(fromX, fromY, toX, toY)\n      ) {\n        this.captureEnPassant(fromX, fromY, toX, toY); // Capture le pion en passant\n      }\n\n      // Sauvegarde l'état avant de simuler le mouvement\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Vérifie si le mouvement met le roi du joueur en échec\n      if (this.isKingInCheck(piece.color)) {\n        // Annule le mouvement si le roi est en échec\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = targetPiece;\n        return false;\n      }\n\n      // Mise à jour de `hasMoved` pour les rois et tours\n      if (piece.type === PieceType.KING || piece.type === PieceType.ROOK) {\n        piece.hasMoved = true;\n      }\n\n      // Mise à jour de l'état après un mouvement valide\n      this.updateEnPassantTarget(fromX, fromY, toX, toY, piece);\n\n      // Réinitialise le compteur pour la règle des 50 coups si un pion bouge ou une capture a lieu\n      this.halfMoveCount =\n        piece.type === PieceType.PAWN || targetPiece\n          ? 0\n          : this.halfMoveCount + 1;\n\n      // Vérifie si le mouvement met l'adversaire en échec et mat\n      const opponentColor =\n        piece.color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n      if (this.isCheckmate(opponentColor)) {\n        return true; // Partie terminée\n      }\n\n      return true;\n    }\n\n    return false; // Mouvement invalide\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    const rook = this.getPiece(rookX, fromY);\n\n    // Vérification des conditions de roque : roi et tour n'ont pas bougé, et la tour est présente\n    if (!(rook?.type === PieceType.ROOK) || rook.hasMoved || king.hasMoved)\n      return false;\n\n    // Vérifie que les cases entre le roi et la tour sont libres et non attaquées\n    for (let x = fromX + direction; x !== toX + direction; x += direction) {\n      if (\n        this.getPiece(x, fromY) ||\n        this.isSquareUnderAttack(x, fromY, king.color)\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    // Petit roque (roi vers la droite)\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      const king = this.getPiece(4, kingY);\n      if (\n        rook?.type === PieceType.ROOK &&\n        !rook.hasMoved &&\n        king?.type === PieceType.KING &&\n        !king.hasMoved\n      ) {\n        // Déplace la tour et le roi pour le petit roque\n        this.setPiece(5, kingY, rook); // Déplace la tour\n        this.setPiece(7, kingY, null); // Enlève la tour de sa position initiale\n        this.setPiece(6, kingY, king); // Déplace le roi vers sa nouvelle position\n        this.setPiece(4, kingY, null); // Enlève le roi de sa position initiale\n\n        // Marque le roi et la tour comme ayant bougé\n        king.hasMoved = true;\n        rook.hasMoved = true;\n      }\n    }\n    // Grand roque (roi vers la gauche)\n    else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      const king = this.getPiece(4, kingY);\n      if (\n        rook?.type === PieceType.ROOK &&\n        !rook.hasMoved &&\n        king?.type === PieceType.KING &&\n        !king.hasMoved\n      ) {\n        // Déplace la tour et le roi pour le grand roque\n        this.setPiece(3, kingY, rook); // Déplace la tour\n        this.setPiece(0, kingY, null); // Enlève la tour de sa position initiale\n        this.setPiece(2, kingY, king); // Déplace le roi vers sa nouvelle position\n        this.setPiece(4, kingY, null); // Enlève le roi de sa position initiale\n\n        // Marque le roi et la tour comme ayant bougé\n        king.hasMoved = true;\n        rook.hasMoved = true;\n      }\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    // Vérifie que la pièce est un pion et qu'il avance de deux cases\n    if (\n      piece?.type === PieceType.PAWN &&\n      Math.abs(toY - fromY) === 2 &&\n      fromX === toX\n    ) {\n      // Si le pion avance de deux cases, configure `enPassantTarget`\n      // pour permettre une prise en passant lors du tour suivant\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      // Réinitialise `enPassantTarget` si aucune condition de prise en passant n'est remplie\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): { capturedWhite: PieceType[]; capturedBlack: PieceType[] } | null {\n    const piece = this.getPiece(fromX, fromY);\n\n    if (\n      this.isEnPassantMove(fromX, fromY, toX, toY) &&\n      piece?.type === PieceType.PAWN\n    ) {\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n      const capturedPawnY = toY + direction;\n      const capturedPawn = this.getPiece(toX, capturedPawnY);\n\n      if (capturedPawn && capturedPawn.type === PieceType.PAWN) {\n        // Supprime le pion capturé de la grille\n        this.grid[capturedPawnY][toX] = null;\n\n        // Initialise les données de capture\n        const captureData: {\n          capturedWhite: PieceType[];\n          capturedBlack: PieceType[];\n        } = {\n          capturedWhite: [],\n          capturedBlack: [],\n        };\n\n        // Met à jour les données de capture selon la couleur du pion capturé\n        if (capturedPawn.color === PieceColor.WHITE) {\n          captureData.capturedWhite.push(capturedPawn.type);\n        } else {\n          captureData.capturedBlack.push(capturedPawn.type);\n        }\n\n        // Appelle updateCapturedPieces pour mettre à jour l'interface\n        updateCapturedPieces(capturedPawn.type, capturedPawn.color);\n\n        return captureData;\n      }\n    }\n    return null;\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n\n    // Vérifie que le mouvement cible la bonne case pour la prise en passant\n    const piece = this.getPiece(fromX, fromY);\n    return (\n      piece?.type === PieceType.PAWN &&\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      Math.abs(fromX - toX) === 1 &&\n      Math.abs(fromY - toY) === 1\n    );\n  }\n\n  public async promotePawn(\n    x: number,\n    y: number,\n    pieceType: string,\n  ): Promise<void> {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = await createPiece(PieceType.QUEEN, color);\n        break;\n      case 'rook':\n        this.grid[y][x] = await createPiece(PieceType.ROOK, color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = await createPiece(PieceType.BISHOP, color);\n        break;\n      case 'knight':\n        this.grid[y][x] = await createPiece(PieceType.KNIGHT, color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    // Vérifie si le roi de la couleur donnée est en échec\n    const kingInCheck = this.isKingInCheck(color);\n\n    // Si le roi n'est pas en échec, ce n'est pas un échec et mat\n    if (!kingInCheck) {\n      return false;\n    }\n\n    // Parcourt chaque pièce de la couleur donnée pour trouver un mouvement légal\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          const moves = this.getValidMoves(x, y);\n\n          for (const move of moves) {\n            // Simule le mouvement\n            const originalPiece = this.getPiece(move.x, move.y);\n            this.grid[move.y][move.x] = piece;\n            this.grid[y][x] = null;\n\n            const kingSafe = !this.isKingInCheck(color);\n\n            // Annule le mouvement simulé\n            this.grid[y][x] = piece;\n            this.grid[move.y][move.x] = originalPiece;\n\n            if (kingSafe) {\n              return false; // Un mouvement légal existe pour sortir de l'échec\n            }\n          }\n        }\n      }\n    }\n\n    return true; // Aucun mouvement possible, échec et mat\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    // Pat uniquement si le roi n'est pas en échec et qu'il n'y a aucun coup légal disponible\n    if (this.isKingInCheck(color)) return false;\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                // Simuler le mouvement pour vérifier l'échec potentiel\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const isKingSafe = !this.isKingInCheck(color);\n\n                // Annuler le mouvement simulé\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (isKingSafe) return false; // Mouvement valide trouvé, pas de pat\n              }\n            }\n          }\n        }\n      }\n    }\n    return true; // Aucun coup légal trouvé, pat détecté\n  }\n\n  findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece?.type === PieceType.KING && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isKing(x: number, y: number): boolean {\n    const piece = this.getPiece(x, y);\n    return piece?.type === PieceType.KING;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          // Utilise `isThreatenedMove` pour éviter la récursion infinie\n          if (piece.type === PieceType.KING) {\n            if (King.isThreatenedMove(fromX, fromY, x, y)) {\n              return true;\n            }\n          } else if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n\n  // Vérifie si un mouvement est valide\n  public isMoveValid(\n    fromRow: number,\n    fromCol: number,\n    toRow: number,\n    toCol: number,\n  ): boolean {\n    const piece = this.getPiece(fromRow, fromCol);\n\n    // Si aucune pièce n'est présente à l'emplacement source, le mouvement est invalide\n    if (!piece) {\n      return false;\n    }\n\n    // Si la destination est en dehors de l'échiquier, mouvement invalide\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) {\n      return false;\n    }\n\n    // Vérifie si la pièce peut se déplacer à cette destination en utilisant la logique de mouvement de la pièce\n    if (!piece.isValidMove(fromRow, fromCol, toRow, toCol, this)) {\n      return false;\n    }\n\n    // Vérifie s'il y a une pièce à la destination et si elle est de la même couleur\n    const destinationPiece = this.getPiece(toRow, toCol);\n    return !(destinationPiece && destinationPiece.color === piece.color);\n  }\n\n  public isCapture(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const piece = this.isWithinBounds(fromX, fromY)\n      ? this.getPiece(fromX, fromY)\n      : null;\n    const targetPiece = this.isWithinBounds(toX, toY)\n      ? this.getPiece(toX, toY)\n      : null;\n\n    // Vérifie qu'il y a une pièce à la position cible et qu'elle est d'une couleur opposée\n    return (\n      piece !== null &&\n      targetPiece !== null &&\n      piece.color !== targetPiece.color\n    );\n  }\n\n  public static async fromData(data: any): Promise<Board> {\n    const board = new Board();\n    await board.init();\n    board.grid = await Promise.all(\n      data.grid.map(async (row: any[]) =>\n        Promise.all(\n          row.map(async (pieceData) =>\n            pieceData ? await Piece.fromData(pieceData) : null,\n          ),\n        ),\n      ),\n    );\n    return board;\n  }\n\n  public toData(): any {\n    return {\n      grid: this.grid.map((row) =>\n        row.map((piece) => (piece ? piece.toData() : null)),\n      ),\n    };\n  }\n\n  public isAdjacentToAnotherKing(\n    x: number,\n    y: number,\n    color: PieceColor,\n  ): boolean {\n    const kingPositions = [\n      { dx: -1, dy: -1 },\n      { dx: -1, dy: 0 },\n      { dx: -1, dy: 1 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: 1, dy: -1 },\n      { dx: 1, dy: 0 },\n      { dx: 1, dy: 1 },\n    ];\n\n    for (const { dx, dy } of kingPositions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      const piece = this.isWithinBounds(nx, ny) ? this.getPiece(nx, ny) : null;\n      if (piece?.type === PieceType.KING && piece.color !== color) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public clone(): Board {\n    const clonedBoard = new Board();\n    clonedBoard.grid = this.grid.map((row) =>\n      row.map((piece) =>\n        piece\n          ? Object.create(\n              Object.getPrototypeOf(piece),\n              Object.getOwnPropertyDescriptors(piece),\n            )\n          : null,\n      ),\n    );\n    clonedBoard.enPassantTarget = this.enPassantTarget\n      ? { ...this.enPassantTarget }\n      : null;\n    clonedBoard.halfMoveCount = this.halfMoveCount;\n    return clonedBoard;\n  }\n\n  public getPieceCount(): number {\n    return this.grid.flat().filter((piece) => piece !== null).length;\n  }\n\n  public isGameOver(): boolean {\n    // Vérifie l'échec et mat pour chaque couleur\n    if (\n      this.isCheckmate(PieceColor.WHITE) ||\n      this.isCheckmate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le pat pour chaque couleur\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le matériel insuffisant pour chaque couleur\n    if (this.isInsufficientMaterial()) {\n      return true;\n    }\n\n    // Vérifie si la règle des 50 coups est atteinte\n    return this.isFiftyMoveRule();\n  }\n\n  public getWinner(): PieceColor | null {\n    // Vérifie si les Noirs sont en échec et mat, dans ce cas les Blancs gagnent\n    if (this.isCheckmate(PieceColor.BLACK)) {\n      return PieceColor.WHITE;\n    }\n\n    // Vérifie si les Blancs sont en échec et mat, dans ce cas les Noirs gagnent\n    if (this.isCheckmate(PieceColor.WHITE)) {\n      return PieceColor.BLACK;\n    }\n\n    // Vérifie les conditions de partie nulle : pat, matériel insuffisant ou règle des 50 coups\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK) ||\n      this.isInsufficientMaterial() ||\n      this.isFiftyMoveRule()\n    ) {\n      return null; // Partie nulle, aucun gagnant\n    }\n\n    // Le jeu est en cours, retourne `null` pour indiquer qu'aucun gagnant n'est déterminé\n    return null;\n  }\n\n  public getPieces(): Piece[] {\n    return this.grid.flat().filter((piece): piece is Piece => piece !== null);\n  }\n\n  public setPlayerColor(color: PieceColor): void {\n    this.currentPlayer = color;\n  }\n\n  public getPlayerColor(): PieceColor {\n    return this.currentPlayer;\n  }\n}\n","// src/evaluator.ts\nimport { Board } from '../board';\nimport { PieceColor, PieceType } from '../piece';\n\n// Valeurs des pièces (évaluation de base)\nexport const pieceValues: { [key in PieceType]: number } = {\n  [PieceType.PAWN]: 1,\n  [PieceType.KNIGHT]: 3,\n  [PieceType.BISHOP]: 3.25,\n  [PieceType.ROOK]: 5,\n  [PieceType.QUEEN]: 9,\n  [PieceType.KING]: 0,\n};\n\n// Tables de positions pour améliorer l'évaluation\nconst pieceSquareTables: { [key in PieceType]: number[][] } = {\n  [PieceType.PAWN]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1],\n    [0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05],\n    [0, 0, 0, 0.2, 0.2, 0, 0, 0],\n    [0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05],\n    [0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  [PieceType.KNIGHT]: [\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n    [-0.4, -0.2, 0, 0, 0, 0, -0.2, -0.4],\n    [-0.3, 0, 0.1, 0.15, 0.15, 0.1, 0, -0.3],\n    [-0.3, 0.05, 0.15, 0.2, 0.2, 0.15, 0.05, -0.3],\n    [-0.3, 0, 0.15, 0.2, 0.2, 0.15, 0, -0.3],\n    [-0.3, 0.05, 0.1, 0.15, 0.15, 0.1, 0.05, -0.3],\n    [-0.4, -0.2, 0, 0.05, 0.05, 0, -0.2, -0.4],\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n  ],\n  [PieceType.BISHOP]: [\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, -0.1],\n    [-0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, -0.1],\n    [-0.1, 0, 0.1, 0.1, 0.1, 0.1, 0, -0.1],\n    [-0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -0.1],\n    [-0.1, 0.05, 0, 0, 0, 0, 0.05, -0.1],\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.ROOK]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [0, 0, 0, 0.05, 0.05, 0, 0, 0],\n  ],\n  [PieceType.QUEEN]: [\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.05, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [0, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [-0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.1, 0, 0.05, 0, 0, 0, 0, -0.1],\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.KING]: [\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2],\n    [-0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1],\n    [0.2, 0.2, 0, 0, 0, 0, 0.2, 0.2],\n    [0.2, 0.3, 0, 0, 0, 0, 0.3, 0.2],\n  ],\n};\n\n// Bonus pour le contrôle du centre du plateau (cases centrales plus précieuses)\nexport const centerControlBonus: { [key: string]: number } = {\n  '3,3': 0.5,\n  '3,4': 0.5,\n  '4,3': 0.5,\n  '4,4': 0.5, // Cases centrales\n  '2,3': 0.25,\n  '2,4': 0.25,\n  '3,2': 0.25,\n  '4,2': 0.25,\n  '4,5': 0.25,\n  '3,5': 0.25,\n  '5,3': 0.25,\n  '5,4': 0.25, // Cases autour\n};\n\nexport function evaluateKingSafety(board: Board, color: PieceColor): number {\n  const kingPosition = board.findKing(color);\n  return kingPosition &&\n    board.isSquareUnderAttack(kingPosition.x, kingPosition.y, color)\n    ? -0.5\n    : 0;\n}\n\nfunction getPieceSquareValue(\n  type: PieceType,\n  x: number,\n  y: number,\n  flipBoard: boolean,\n  board: Board,\n  color: PieceColor,\n): number {\n  const table = pieceSquareTables[type];\n  if (!table) return 0;\n\n  // Empêcher les pions isolés de recevoir un bonus de position\n  if (type === PieceType.PAWN) {\n    const isIsolated = checkIsolatedPawns(board, x, y, color) > 0;\n    return isIsolated ? 0 : flipBoard ? table[7 - y][7 - x] : table[y][x];\n  }\n\n  // Retourne la valeur de position pour les autres pièces\n  return flipBoard ? table[7 - y][7 - x] : table[y][x];\n}\n\n// Fonction d'évaluation principale\nexport function evaluateBoard(\n  board: Board,\n  color: PieceColor,\n  flipBoard: boolean = false,\n): number {\n  let score = 0;\n\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      const positionKey = `${x},${y}`;\n      if (!piece) continue;\n\n      // Applique la valeur de base et la table de position\n      let pieceScore = pieceValues[piece.type];\n      pieceScore += getPieceSquareValue(\n        piece.type,\n        x,\n        y,\n        flipBoard,\n        board,\n        piece.color,\n      );\n\n      // Ajoute le bonus pour le contrôle du centre\n      if (\n        piece.type === PieceType.PAWN &&\n        checkIsolatedPawns(board, x, y, piece.color) === 0\n      ) {\n        if (centerControlBonus[positionKey]) {\n          pieceScore += centerControlBonus[positionKey];\n        }\n      }\n\n      // Évalue les pions pour la structure et les chaînes protégées\n      if (piece.type === PieceType.PAWN) {\n        pieceScore += evaluatePawnStructure(board, x, y, piece.color);\n        pieceScore += evaluatePawnChains(board, x, y, piece.color); // Bonus pour chaînes de pions\n      }\n\n      // Pénalise les rois exposés\n      if (\n        piece.type === PieceType.KING &&\n        isKingExposed(board, x, y, piece.color)\n      ) {\n        pieceScore -= 0.5;\n      }\n\n      score += piece.color === color ? pieceScore : -pieceScore;\n    }\n  }\n\n  return parseFloat(score.toFixed(2));\n}\n\n// Fonction pour évaluer les chaînes de pions\nfunction evaluatePawnChains(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const direction = color === PieceColor.WHITE ? -1 : 1;\n  let score = 0;\n\n  // Vérifie les pions sur les diagonales avant (chaînes protégées)\n  const leftDiagonal = board.getPiece(x - 1, y + direction);\n  const rightDiagonal = board.getPiece(x + 1, y + direction);\n\n  if (\n    (leftDiagonal &&\n      leftDiagonal.color === color &&\n      leftDiagonal.type === PieceType.PAWN) ||\n    (rightDiagonal &&\n      rightDiagonal.color === color &&\n      rightDiagonal.type === PieceType.PAWN)\n  ) {\n    score += 0.5; // Bonus pour les pions protégés dans une chaîne\n  }\n\n  return score;\n}\n\nfunction evaluatePawnStructure(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  let score = 0;\n\n  const isPassed = isPassedPawn(board, x, y, color);\n  const doubledPenalty = checkDoubledPawns(board, x, y, color) * 0.25;\n  const isolatedPenalty = checkIsolatedPawns(board, x, y, color) * 4.0;\n\n  if (isPassed) {\n    score += 4.5; // Bonus pour pion passé\n  }\n\n  score -= doubledPenalty + isolatedPenalty;\n\n  return score;\n}\n\nfunction checkDoubledPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  for (let i = 0; i < 8; i++) {\n    if (\n      i !== y &&\n      board.getPiece(x, i)?.type === PieceType.PAWN &&\n      board.getPiece(x, i)?.color === color\n    ) {\n      return 0.5;\n    }\n  }\n  return 0;\n}\n\nfunction checkIsolatedPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const leftColumn = x - 1 >= 0 ? board.getPiece(x - 1, y) : null;\n  const rightColumn = x + 1 < 8 ? board.getPiece(x + 1, y) : null;\n\n  const hasAdjacentSameColorPawns =\n    (leftColumn &&\n      leftColumn.type === PieceType.PAWN &&\n      leftColumn.color === color) ||\n    (rightColumn &&\n      rightColumn.type === PieceType.PAWN &&\n      rightColumn.color === color);\n\n  return hasAdjacentSameColorPawns ? 0 : 1.5; // Retourne une pénalité si le pion est isolé\n}\n\n// Gère les cases hors limites pour éviter des expositions de roi mal calculées\nfunction isKingExposed(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): boolean {\n  const piece = board.getPiece(x, y);\n  if (piece && piece.type === PieceType.KING) {\n    const surroundingSquares = [\n      { dx: -1, dy: 0 },\n      { dx: 1, dy: 0 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: -1, dy: -1 },\n      { dx: 1, dy: 1 },\n      { dx: -1, dy: 1 },\n      { dx: 1, dy: -1 },\n    ];\n\n    return surroundingSquares.some(({ dx, dy }) => {\n      const newX = x + dx;\n      const newY = y + dy;\n\n      if (!board.isWithinBounds(newX, newY)) return false; // Case hors limites\n      const adjPiece = board.getPiece(newX, newY);\n      return (\n        !adjPiece || // Case vide\n        adjPiece.color !== color || // Pièce ennemie\n        adjPiece.type !== PieceType.PAWN // Pas de pion pour protéger\n      );\n    });\n  }\n  return false;\n}\n\nfunction isPassedPawn(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): boolean {\n  const direction = color === PieceColor.WHITE ? 1 : -1;\n\n  // Vérifie s'il y a des pions adverses devant le pion sur la même colonne\n  for (let i = y + direction; i >= 0 && i < 8; i += direction) {\n    const pieceInFront = board.getPiece(x, i);\n    if (\n      pieceInFront &&\n      pieceInFront.type === PieceType.PAWN &&\n      pieceInFront.color !== color\n    ) {\n      return false;\n    }\n  }\n\n  // Vérifie les colonnes adjacentes pour s'assurer qu'il n'y a pas de pions adverses bloquant\n  const adjacentColumns = [x - 1, x + 1];\n  for (const col of adjacentColumns) {\n    if (col >= 0 && col < 8) {\n      for (let i = y + direction; i >= 0 && i < 8; i += direction) {\n        const adjacentPiece = board.getPiece(col, i);\n        if (\n          adjacentPiece &&\n          adjacentPiece.type === PieceType.PAWN &&\n          adjacentPiece.color !== color\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","// src/endgameTablebase.ts\nimport { Board } from '../board';\nimport { PieceColor, PieceType } from '../piece';\n\ntype Move = { fromX: number; fromY: number; toX: number; toY: number };\n\nfunction flipMove(move: Move, flipBoard: boolean): Move {\n  if (!flipBoard) return move;\n\n  return {\n    fromX: 7 - move.fromX,\n    fromY: 7 - move.fromY,\n    toX: 7 - move.toX,\n    toY: 7 - move.toY,\n  };\n}\n\n// Retourne un mouvement optimal pour une fin de partie classique si disponible\nexport function getEndgameMove(\n  board: Board,\n  color: PieceColor,\n  flipBoard: boolean = false,\n): Move | null {\n  const pieces = board.getPieces();\n  let move: Move | null = null;\n\n  // Roi + Tour contre Roi\n  if (\n    pieces.length === 3 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.ROOK, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    move = getKingRookVsKingMove(board, color);\n  }\n\n  // Roi + Fou + Cavalier contre Roi\n  else if (\n    pieces.length === 4 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.BISHOP, color) &&\n    hasPiece(pieces, PieceType.KNIGHT, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    move = getKingBishopKnightVsKingMove(board, color);\n  }\n\n  // Roi + deux Fous contre Roi\n  else if (\n    pieces.length === 4 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.BISHOP, color) &&\n    pieces.filter(\n      (piece) => piece.type === PieceType.BISHOP && piece.color === color,\n    ).length === 2 &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    move = getKingTwoBishopsVsKingMove(board, color);\n  }\n\n  // Roi + Pion contre Roi (pour promotion)\n  else if (\n    pieces.length === 3 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.PAWN, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    move = getKingPawnVsKingMove(board, color);\n  }\n\n  // Ajuste le mouvement pour `flipBoard`\n  return move ? flipMove(move, color === PieceColor.BLACK || flipBoard) : null;\n}\n\n// Fonction utilitaire pour vérifier la présence d'une pièce spécifique\nfunction hasPiece(pieces: any[], type: PieceType, color: PieceColor): boolean {\n  return pieces.some((piece) => piece.type === type && piece.color === color);\n}\n\n// Renvoie l'autre couleur\nfunction getOpponentColor(color: PieceColor): PieceColor {\n  return color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n}\n\n// Génère un mouvement optimal pour Roi + Tour contre Roi\nfunction getKingRookVsKingMove(board: Board, color: PieceColor): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const rookPos = findPiecePosition(board, PieceType.ROOK, color);\n\n  if (!opponentKingPos || !rookPos) return null;\n\n  // Exemple : pousse la tour pour bloquer le roi adverse dans un coin\n  if (opponentKingPos.x < 4) {\n    return {\n      fromX: rookPos.x,\n      fromY: rookPos.y,\n      toX: opponentKingPos.x + 1,\n      toY: opponentKingPos.y,\n    };\n  } else {\n    return {\n      fromX: rookPos.x,\n      fromY: rookPos.y,\n      toX: opponentKingPos.x - 1,\n      toY: opponentKingPos.y,\n    };\n  }\n}\n\n// Génère un mouvement optimal pour Roi + Fou + Cavalier contre Roi\nfunction getKingBishopKnightVsKingMove(\n  board: Board,\n  color: PieceColor,\n): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const knightPos = findPiecePosition(board, PieceType.KNIGHT, color);\n  const bishopPos = findPiecePosition(board, PieceType.BISHOP, color);\n\n  if (!opponentKingPos || !knightPos || !bishopPos) return null;\n\n  // Exemple : pousse le cavalier et le fou pour rapprocher le roi adverse vers un coin\n  if (opponentKingPos.x < 4) {\n    return {\n      fromX: knightPos.x,\n      fromY: knightPos.y,\n      toX: opponentKingPos.x + 1,\n      toY: opponentKingPos.y,\n    };\n  } else {\n    return {\n      fromX: bishopPos.x,\n      fromY: bishopPos.y,\n      toX: opponentKingPos.x - 1,\n      toY: opponentKingPos.y,\n    };\n  }\n}\n\n// Génère un mouvement optimal pour Roi + deux Fous contre Roi\nfunction getKingTwoBishopsVsKingMove(\n  board: Board,\n  color: PieceColor,\n): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const bishops = findAllPiecesPositions(board, PieceType.BISHOP, color);\n\n  if (!opponentKingPos || bishops.length < 2) return null;\n\n  // Les deux fous coordonnent pour forcer le roi adverse vers un coin\n  return {\n    fromX: bishops[0].x,\n    fromY: bishops[0].y,\n    toX: opponentKingPos.x,\n    toY: opponentKingPos.y > 4 ? opponentKingPos.y - 1 : opponentKingPos.y + 1,\n  };\n}\n\n// Génère un mouvement optimal pour Roi + Pion contre Roi (promotion)\nfunction getKingPawnVsKingMove(board: Board, color: PieceColor): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const pawnPos = findPiecePosition(board, PieceType.PAWN, color);\n\n  if (!opponentKingPos || !pawnPos) return null;\n\n  // Pousse le pion vers la promotion (vers la 8ème rangée pour les Blancs, 1ère pour les Noirs)\n  const direction = color === PieceColor.WHITE ? 1 : -1;\n  return {\n    fromX: pawnPos.x,\n    fromY: pawnPos.y,\n    toX: pawnPos.x,\n    toY: pawnPos.y + direction,\n  };\n}\n\n// Fonction utilitaire pour trouver la position d'une pièce spécifique\nfunction findPiecePosition(\n  board: Board,\n  pieceType: PieceType,\n  color: PieceColor,\n): { x: number; y: number } | null {\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece && piece.type === pieceType && piece.color === color) {\n        return { x, y };\n      }\n    }\n  }\n  return null;\n}\n\n// Fonction utilitaire pour trouver toutes les positions d'un type de pièce\nfunction findAllPiecesPositions(\n  board: Board,\n  pieceType: PieceType,\n  color: PieceColor,\n): { x: number; y: number }[] {\n  const positions = [];\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece && piece.type === pieceType && piece.color === color) {\n        positions.push({ x, y });\n      }\n    }\n  }\n  return positions;\n}\n","// src/openingBook.ts\n\nexport const openingBook: {\n  [key: string]: { fromX: number; fromY: number; toX: number; toY: number }[];\n} = {\n  // Ouverture Ruy Lopez\n  'e2e4 e7e5 g1f3 b8c6 f1b5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 5, fromY: 7, toX: 1, toY: 5 }, // f1b5\n  ],\n\n  // Défense Sicilienne\n  'e2e4 c7c5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 3 }, // c7c5\n  ],\n  'e2e4 c7c5 g1f3 d7d6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 3 }, // c7c5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 3, fromY: 1, toX: 3, toY: 2 }, // d7d6\n  ],\n\n  // Gambit de la Reine\n  'd2d4 d7d5 c2c4': [\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n    { fromX: 2, fromY: 6, toX: 2, toY: 4 }, // c2c4\n  ],\n\n  // Défense Caro-Kann\n  'e2e4 c7c6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 2 }, // c7c6\n  ],\n  'e2e4 c7c6 d2d4 d7d5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 2 }, // c7c6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n\n  // Défense Française\n  'e2e4 e7e6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 2 }, // e7e6\n  ],\n  'e2e4 e7e6 d2d4 d7d5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 2 }, // e7e6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n\n  // Partie Italienne\n  'e2e4 e7e5 g1f3 b8c6 f1c4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 5, fromY: 7, toX: 2, toY: 4 }, // f1c4\n  ],\n\n  // Défense Alekhine\n  'e2e4 g8f6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 6, fromY: 0, toX: 5, toY: 2 }, // g8f6\n  ],\n\n  // Défense Pirc\n  'e2e4 d7d6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 3, fromY: 1, toX: 3, toY: 2 }, // d7d6\n  ],\n\n  // Partie Écossaise\n  'e2e4 e7e5 g1f3 b8c6 d2d4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n  ],\n\n  // Gambit du Roi\n  'e2e4 e7e5 f2f4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 5, fromY: 6, toX: 5, toY: 4 }, // f2f4\n  ],\n\n  // Ouverture anglaise\n  c2c4: [\n    { fromX: 2, fromY: 6, toX: 2, toY: 4 }, // c2c4\n  ],\n\n  // Ouverture Réti\n  'g1f3 d7d5': [\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n};\n\nexport function flipMove(\n  move: { fromX: number; fromY: number; toX: number; toY: number },\n  flipBoard: boolean,\n): { fromX: number; fromY: number; toX: number; toY: number } {\n  if (!flipBoard) return move;\n\n  return {\n    fromX: 7 - move.fromX,\n    fromY: 7 - move.fromY,\n    toX: 7 - move.toX,\n    toY: 7 - move.toY,\n  };\n}\n\nexport function getNextOpeningMove(\n  key: string,\n  openingBook: OpeningBook,\n): { fromX: number; fromY: number; toX: number; toY: number } | null {\n  return openingBook[key]?.[0] ?? null;\n}\n\nexport type OpeningBook = {\n  [key: string]: { fromX: number; fromY: number; toX: number; toY: number }[];\n};\n","// src/ai.ts\nimport { Board } from './board';\nimport { Piece, PieceColor, PieceType } from './piece';\nimport {\n  centerControlBonus,\n  evaluateBoard,\n  evaluateKingSafety,\n  pieceValues,\n} from './ai/evaluator';\nimport { getEndgameMove } from './ai/endgameTablebase';\nimport { flipMove, getNextOpeningMove, openingBook } from './ai/openingBook';\n\n// Classe AI utilisant l'algorithme Minimax avec Alpha-Beta Pruning et Transposition Table\nexport class AI {\n  private readonly openingMoves: {\n    [key: string]: { fromX: number; fromY: number; toX: number; toY: number }[];\n  } = openingBook;\n  private readonly transpositionTable: Map<string, number>; // Table de transposition\n  private readonly maxTime: number; // Temps maximum de réflexion en millisecondes\n  private startTime: number; // Temps de début pour gestion du temps\n  private readonly killerMoves: Map<\n    number,\n    {\n      move: { fromX: number; fromY: number; toX: number; toY: number };\n      score: number;\n    }[]\n  >; // Heuristic des coups efficaces\n  private moveHistory: {\n    fromX: number;\n    fromY: number;\n    toX: number;\n    toY: number;\n  }[] = [];\n  private readonly historicalMoveScores: Map<string, number> = new Map(); // Stockage des scores historiques des mouvements\n\n  constructor(\n    private readonly color: PieceColor,\n    maxTime: number = 5000,\n  ) {\n    this.transpositionTable = new Map();\n    this.maxTime = maxTime;\n    this.killerMoves = new Map();\n    this.startTime = 0;\n  }\n\n  // Méthode principale pour faire un mouvement\n  public makeMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    // Vérifie si un mouvement d'ouverture est disponible\n    const openingMove = this.getOpeningMove(board);\n    if (openingMove) {\n      this.moveHistory.push(openingMove); // Ajoute à l'historique des coups\n      return openingMove;\n    }\n\n    // Vérifie si un mouvement d'ouverture basé sur les coups passés est disponible\n    const chosenMove = this.chooseMove(board);\n    if (chosenMove) {\n      this.moveHistory.push(chosenMove);\n      return chosenMove;\n    }\n    const endgameMove = this.useEndgameTablebase(board);\n    if (endgameMove) {\n      this.moveHistory.push(endgameMove); // Ajoute à l'historique des coups\n      return endgameMove;\n    }\n\n    // Utilise MCTS pour les positions complexes ou de fin de partie\n    if (this.shouldUseMCTS(board)) {\n      const mctsMove = this.mcts(board);\n      if (mctsMove) {\n        this.moveHistory.push(mctsMove); // Ajoute à l'historique des coups\n      }\n      return mctsMove;\n    }\n\n    // Utilise Minimax avec Alpha-Beta Pruning si aucun autre mouvement n'est trouvé\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const maxDepth = 10; // Profondeur maximale de recherche pour Minimax\n    this.startTime = Date.now();\n\n    for (let depth = 1; depth <= maxDepth; depth++) {\n      let moves = this.getAllValidMoves(board);\n\n      // Trie les mouvements pour optimiser la recherche\n      moves = this.sortMoves(moves, board, depth);\n\n      for (const move of moves) {\n        const piece = board.getPiece(move.fromX, move.fromY);\n        if (!piece) continue;\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n\n        const isCritical =\n          board.isKingInCheck(this.color) ||\n          this.isCriticalMove(piece, move, board);\n        const adjustedDepth = isCritical ? depth + 1 : depth;\n\n        // Appelle la recherche Minimax avec Alpha-Beta Pruning\n        const boardValue = this.minimax(\n          board,\n          adjustedDepth - 1,\n          -Infinity,\n          Infinity,\n          false,\n        );\n\n        board.setPiece(move.fromX, move.fromY, piece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        if (boardValue > bestValue) {\n          bestValue = boardValue;\n          bestMove = move;\n        }\n\n        // Vérifie le temps de réflexion et arrête si le maximum est atteint\n        if (Date.now() - this.startTime > this.maxTime) {\n          break;\n        }\n      }\n\n      // Vérifie encore une fois le temps de réflexion à la fin de chaque profondeur\n      if (Date.now() - this.startTime > this.maxTime) {\n        break;\n      }\n    }\n\n    // Ajoute le meilleur mouvement trouvé à l'historique des coups si existant\n    if (bestMove) {\n      this.moveHistory.push(bestMove);\n      this.updateHistoricalScore(bestMove);\n    }\n\n    return bestMove;\n  }\n\n  // Fonction pour augmenter le score historique d'un mouvement après son utilisation\n  private updateHistoricalScore(move: {\n    fromX: number;\n    fromY: number;\n    toX: number;\n    toY: number;\n  }) {\n    const moveKey = `${move.fromX},${move.fromY},${move.toX},${move.toY}`;\n    const currentScore = this.historicalMoveScores.get(moveKey) || 0;\n    this.historicalMoveScores.set(moveKey, currentScore + 1);\n  }\n\n  // Fonction Minimax avec Alpha-Beta Pruning et table de transposition\n  private minimax(\n    board: Board,\n    depth: number,\n    alpha: number,\n    beta: number,\n    isMaximizing: boolean,\n  ): number {\n    const boardKey = board.toString();\n\n    // Vérifie le temps limite\n    if (Date.now() - this.startTime > this.maxTime) {\n      return this.evaluatePositionWithKingSafety(board, this.color);\n    }\n\n    // Vérifie si le résultat est déjà dans la table de transposition\n    if (this.transpositionTable.has(boardKey)) {\n      return this.transpositionTable.get(boardKey)!;\n    }\n\n    // Null Move Pruning : Effectue un coup nul pour voir si une menace est évidente\n    if (depth > 1 && !board.isKingInCheck(this.color)) {\n      const nullMoveEval = -this.minimax(\n        board,\n        depth - 2,\n        -beta,\n        -alpha,\n        !isMaximizing,\n      );\n      if (nullMoveEval >= beta) {\n        return beta; // Coupe si le coup nul montre une menace\n      }\n    }\n\n    // Condition de fin de récursion\n    if (\n      depth === 0 ||\n      board.isCheckmate(this.color) ||\n      board.isCheckmate(this.getOpponentColor()) ||\n      Date.now() - this.startTime > this.maxTime\n    ) {\n      const evaluation = this.quiescenceSearch(board, alpha, beta);\n      this.transpositionTable.set(boardKey, evaluation);\n      return evaluation;\n    }\n\n    if (isMaximizing) {\n      let maxEval = -Infinity;\n      let moves = this.getAllValidMoves(board);\n      moves = this.sortMoves(moves, board, depth);\n\n      for (const move of moves) {\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evaluation = this.minimax(board, depth - 1, alpha, beta, false);\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        maxEval = Math.max(maxEval, evaluation);\n        alpha = Math.max(alpha, evaluation);\n\n        if (beta <= alpha) {\n          this.addKillerMove(depth, move);\n          break;\n        }\n      }\n\n      this.transpositionTable.set(boardKey, maxEval);\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      let moves = this.getAllValidMoves(board);\n      moves = this.sortMoves(moves, board, depth);\n\n      for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        // Late Move Reduction : Réduit la profondeur pour les coups tardifs\n        const shouldReduce = i > 3 && depth > 2;\n        const newDepth = shouldReduce ? depth - 1 : depth;\n\n        // Extension : Allonge la profondeur pour les échecs et poussées de pions\n        const isCheck = board.isKingInCheck(this.getOpponentColor());\n        const isPawnPush =\n          fromPiece &&\n          fromPiece.type === PieceType.PAWN &&\n          (move.toY === 0 || move.toY === 7);\n        const extendedDepth = isCheck || isPawnPush ? newDepth + 1 : newDepth;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evaluation = this.minimax(\n          board,\n          extendedDepth - 1,\n          alpha,\n          beta,\n          true,\n        );\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        minEval = Math.min(minEval, evaluation);\n        beta = Math.min(beta, evaluation);\n\n        if (beta <= alpha) {\n          this.addKillerMove(depth, move);\n          break;\n        }\n      }\n\n      this.transpositionTable.set(boardKey, minEval);\n      return minEval;\n    }\n  }\n\n  private chooseMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const key = this.moveHistory\n      .map((move) => `${move.fromX}${move.fromY}${move.toX}${move.toY}`)\n      .join(' ');\n\n    const openingMove = getNextOpeningMove(key, this.openingMoves);\n\n    if (openingMove) {\n      const flippedMove = flipMove(\n        openingMove,\n        this.color === PieceColor.BLACK,\n      );\n\n      // Évaluation de la position pour ajuster le choix de l'ouverture\n      board.movePiece(\n        flippedMove.fromX,\n        flippedMove.fromY,\n        flippedMove.toX,\n        flippedMove.toY,\n      );\n      const evaluation = evaluateBoard(board, this.color);\n      board.setPiece(\n        flippedMove.fromX,\n        flippedMove.fromY,\n        board.getPiece(flippedMove.toX, flippedMove.toY),\n      );\n      board.setPiece(flippedMove.toX, flippedMove.toY, null);\n\n      const threshold = 0.3;\n      if (evaluation >= threshold) {\n        return flippedMove;\n      }\n    }\n\n    return null;\n  }\n\n  // Ajout des killer moves avec meilleure gestion de cache\n  private addKillerMove(\n    depth: number,\n    move: { fromX: number; fromY: number; toX: number; toY: number },\n  ) {\n    // Récupère les killer moves actuels pour la profondeur spécifiée ou initialise un tableau vide\n    const killers = this.killerMoves.get(depth) ?? [];\n\n    // Vérifie si le mouvement est déjà présent et augmente son score, sinon l'ajoute\n    const existingMove = killers.find(\n      (k) => k.move.fromX === move.fromX && k.move.fromY === move.fromY,\n    );\n\n    if (existingMove) {\n      existingMove.score += 1;\n    } else {\n      killers.push({ move, score: 1 });\n    }\n\n    // Trie et limite le tableau des killer moves aux deux meilleurs par profondeur\n    this.killerMoves.set(\n      depth,\n      killers\n        .sort((a, b) => b.score - a.score) // Trie les moves par score décroissant\n        .slice(0, 2), // Garde uniquement les deux meilleurs\n    );\n  }\n\n  // Recherche de quiescence pour améliorer l'évaluation des positions\n  private quiescenceSearch(\n    board: Board,\n    alpha: number,\n    beta: number,\n    depth: number = 0,\n  ): number {\n    const maxQuiescenceDepth = this.getAdaptiveQuiescenceDepth(board);\n\n    if (depth >= maxQuiescenceDepth) {\n      return evaluateBoard(board, this.color);\n    }\n\n    const standPat = evaluateBoard(board, this.color);\n    if (standPat >= beta) return beta;\n    if (alpha < standPat) alpha = standPat;\n\n    const captureMoves = this.getAllValidMoves(board).filter((move) =>\n      board.isCapture(move.fromX, move.fromY, move.toX, move.toY),\n    );\n\n    // Non-capture moves : Inclut quelques mouvements non capturants comme les poussées de pions\n    const nonCaptureMoves = this.getAllValidMoves(board).filter((move) => {\n      const piece = board.getPiece(move.fromX, move.fromY);\n      return (\n        !board.isCapture(move.fromX, move.fromY, move.toX, move.toY) &&\n        piece &&\n        (piece.type === PieceType.PAWN || piece.type === PieceType.KNIGHT)\n      );\n    });\n\n    const moves = [...captureMoves, ...nonCaptureMoves];\n\n    for (const move of moves) {\n      const fromPiece = board.getPiece(move.fromX, move.fromY);\n      const toPiece = board.getPiece(move.toX, move.toY);\n\n      board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n      const kingSafe = !board.isKingInCheck(this.color);\n      let score = standPat;\n\n      if (kingSafe) {\n        score = -this.quiescenceSearch(board, -beta, -alpha, depth + 1);\n      }\n\n      board.setPiece(move.fromX, move.fromY, fromPiece);\n      board.setPiece(move.toX, move.toY, toPiece);\n\n      // Met à jour alpha si un meilleur score est trouvé\n      if (score >= beta) return beta;\n      if (score > alpha) alpha = score;\n    }\n\n    return alpha;\n  }\n\n  private getOpponentColor(): PieceColor {\n    return this.color === PieceColor.WHITE\n      ? PieceColor.BLACK\n      : PieceColor.WHITE;\n  }\n\n  private getAllValidMoves(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number }[] {\n    const validMoves = [];\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n\n        if (piece && piece.color === this.color) {\n          const moves = board.getValidMoves(x, y);\n\n          for (const move of moves) {\n            if (board.isMoveValid(x, y, move.x, move.y)) {\n              const originalPiece = board.getPiece(move.x, move.y);\n              board.setPiece(move.x, move.y, piece);\n              board.setPiece(x, y, null);\n\n              const kingSafe = !board.isKingInCheck(this.color);\n\n              board.setPiece(x, y, piece);\n              board.setPiece(move.x, move.y, originalPiece);\n\n              if (kingSafe) {\n                validMoves.push({\n                  fromX: x,\n                  fromY: y,\n                  toX: move.x,\n                  toY: move.y,\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  private sortMoves(\n    moves: { fromX: number; fromY: number; toX: number; toY: number }[],\n    board: Board,\n    depth: number,\n  ): { fromX: number; fromY: number; toX: number; toY: number }[] {\n    return moves.sort((a, b) => {\n      // 1. Priorité aux mouvements capturant des pièces de valeur plus élevée\n      const pieceA = board.getPiece(a.toX, a.toY);\n      const pieceB = board.getPiece(b.toX, b.toY);\n\n      const valueA = pieceA ? pieceValues[pieceA.type] : 0;\n      const valueB = pieceB ? pieceValues[pieceB.type] : 0;\n\n      if (valueA !== valueB) {\n        return valueB - valueA; // Tri décroissant par valeur de capture\n      }\n\n      // 2. Bonus pour le contrôle des cases centrales\n      const centerControlA = centerControlBonus[`${a.toX},${a.toY}`] || 0;\n      const centerControlB = centerControlBonus[`${b.toX},${b.toY}`] || 0;\n\n      if (centerControlA !== centerControlB) {\n        return centerControlB - centerControlA; // Tri par contrôle du centre\n      }\n\n      // 3. Priorité aux mouvements dans les killer moves pour cette profondeur\n      const killerMovesAtDepth = this.killerMoves.get(depth);\n      if (\n        killerMovesAtDepth &&\n        killerMovesAtDepth.some(\n          (move) =>\n            move.move.fromX === a.fromX &&\n            move.move.fromY === a.fromY &&\n            move.move.toX === a.toX &&\n            move.move.toY === a.toY,\n        )\n      ) {\n        return -1;\n      }\n\n      // 4. Score historique pour le mouvement, favorise les coups réussis dans le passé\n      const scoreA =\n        this.historicalMoveScores.get(\n          `${a.fromX},${a.fromY},${a.toX},${a.toY}`,\n        ) || 0;\n      const scoreB =\n        this.historicalMoveScores.get(\n          `${b.fromX},${b.fromY},${b.toX},${b.toY}`,\n        ) || 0;\n\n      return scoreB - scoreA; // Tri par score historique décroissant\n    });\n  }\n\n  // Algorithme MCTS pour évaluer des positions complexes ou de fin de partie\n  private mcts(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const iterations = 1000; // Nombre de simulations\n    const moveScores: Map<string, number> = new Map();\n\n    // Filtre les mouvements valides pour la simulation\n    const validMoves = this.getAllValidMoves(board).filter(\n      (move) =>\n        move.fromX !== undefined &&\n        move.fromY !== undefined &&\n        move.toX !== undefined &&\n        move.toY !== undefined,\n    );\n\n    if (validMoves.length === 0) return null;\n\n    for (let i = 0; i < iterations; i++) {\n      const move = validMoves[Math.floor(Math.random() * validMoves.length)];\n\n      // Vérifie que toutes les propriétés de move sont bien définies\n      if (\n        !move ||\n        move.fromX === undefined ||\n        move.fromY === undefined ||\n        move.toX === undefined ||\n        move.toY === undefined\n      ) {\n        continue;\n      }\n\n      const simulationResult = this.simulateRandomGame(board, move);\n\n      const moveKey = `${move.fromX},${move.fromY},${move.toX},${move.toY}`;\n      moveScores.set(\n        moveKey,\n        (moveScores.get(moveKey) ?? 0) + simulationResult,\n      );\n\n      // Vérifie le temps de réflexion pour arrêter les itérations si nécessaire\n      if (Date.now() - this.startTime > this.maxTime) {\n        break;\n      }\n    }\n\n    // Trouve le mouvement avec la meilleure note moyenne\n    const bestMoveKey = Array.from(moveScores.entries()).reduce(\n      (best, current) => (current[1] > best[1] ? current : best),\n    )[0];\n\n    const [fromX, fromY, toX, toY] = bestMoveKey.split(',').map(Number);\n    return { fromX, fromY, toX, toY };\n  }\n\n  // Adaptation de la profondeur de quiescence en fonction de la situation\n  private getAdaptiveQuiescenceDepth(board: Board): number {\n    const pieceCount = board.getPieceCount();\n    if (pieceCount <= 6) return 7; // Profondeur plus élevée en fin de partie\n    if (pieceCount <= 12) return 5; // Moyenne en milieu de partie\n    return 3; // Réduit en début de partie\n  }\n\n  private evaluatePositionWithKingSafety(\n    board: Board,\n    color: PieceColor,\n  ): number {\n    let score = evaluateBoard(board, color); // Évaluation générale de la position\n    const kingSafety = evaluateKingSafety(board, color); // Évaluation de la sécurité du roi\n    score += kingSafety; // Ajuste le score en fonction de la sécurité du roi\n    return score;\n  }\n\n  // Simule une partie aléatoire pour obtenir une estimation du résultat\n  private simulateRandomGame(\n    board: Board,\n    move: { fromX: number; fromY: number; toX: number; toY: number },\n  ): number {\n    // Vérifie que toutes les propriétés de move sont définies\n    if (\n      !move ||\n      move.fromX === undefined ||\n      move.fromY === undefined ||\n      move.toX === undefined ||\n      move.toY === undefined\n    ) {\n      console.error('Invalid move:', move);\n      return 0; // Retourne 0 ou une autre valeur par défaut si le mouvement est invalide\n    }\n\n    const tempBoard = board.clone();\n    tempBoard.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n    let currentPlayer = this.color;\n    let moves = this.getAllValidMoves(tempBoard);\n\n    while (!tempBoard.isGameOver() && moves.length > 0) {\n      const randomMove = moves[Math.floor(Math.random() * moves.length)];\n\n      // Vérifie que le mouvement aléatoire est valide\n      if (\n        !randomMove ||\n        randomMove.fromX === undefined ||\n        randomMove.fromY === undefined ||\n        randomMove.toX === undefined ||\n        randomMove.toY === undefined\n      ) {\n        console.error('Invalid random move:', randomMove);\n        break;\n      }\n\n      tempBoard.movePiece(\n        randomMove.fromX,\n        randomMove.fromY,\n        randomMove.toX,\n        randomMove.toY,\n      );\n      currentPlayer =\n        currentPlayer === PieceColor.WHITE\n          ? PieceColor.BLACK\n          : PieceColor.WHITE;\n      moves = this.getAllValidMoves(tempBoard);\n    }\n\n    // Retourne un score basé sur le résultat de la partie simulée\n    return tempBoard.getWinner() === this.color\n      ? 1\n      : tempBoard.getWinner() === null\n        ? 0.5\n        : 0;\n  }\n\n  // Détermine quand utiliser MCTS\n  private shouldUseMCTS(board: Board): boolean {\n    return board.getPieceCount() <= 10; // Par exemple, utilise MCTS pour la fin de partie\n  }\n\n  // Fonction de détection et d'application des tables de fin de partie\n  private useEndgameTablebase(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    if (board.getPieceCount() <= 4) {\n      // Condition pour appliquer les tables de fin de partie\n      return getEndgameMove(board, this.color); // Utilise une table de fin de partie externe\n    }\n    return null;\n  }\n\n  // Fonction pour identifier les mouvements critiques\n  private isCriticalMove(\n    piece: Piece,\n    move: { fromX: number; fromY: number; toX: number; toY: number },\n    board: Board,\n  ): boolean {\n    const targetPiece = board.getPiece(move.toX, move.toY);\n    return <boolean>(\n      (targetPiece &&\n        targetPiece.color !== piece.color &&\n        targetPiece.type !== PieceType.PAWN)\n    );\n  }\n\n  // Méthode pour trouver le mouvement d'ouverture\n\n  private getOpeningMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const boardHash = this.getBoardHash(board);\n\n    if (this.openingMoves[boardHash]) {\n      // Sélectionne le premier coup suggéré par défaut\n      const move = this.openingMoves[boardHash][0];\n      const flippedMove = flipMove(move, this.color === PieceColor.BLACK);\n\n      // Évalue la position après le coup d'ouverture\n      board.movePiece(\n        flippedMove.fromX,\n        flippedMove.fromY,\n        flippedMove.toX,\n        flippedMove.toY,\n      );\n      const evaluation = evaluateBoard(board, this.color);\n      board.setPiece(\n        flippedMove.fromX,\n        flippedMove.fromY,\n        board.getPiece(flippedMove.toX, flippedMove.toY),\n      );\n      board.setPiece(flippedMove.toX, flippedMove.toY, null);\n\n      // Seuil pour sortir du livre d'ouvertures si la position est défavorable\n      const exitThreshold = -0.5;\n      if (evaluation > exitThreshold) {\n        return flippedMove; // Choisit le coup d'ouverture par défaut si l'évaluation est favorable\n      }\n    }\n\n    return null; // Sort du livre si aucune ouverture valide n'est trouvée ou si l'évaluation est inférieure au seuil\n  }\n\n  // Génération d'un identifiant de position simplifié pour le dictionnaire d'ouverture\n  private getBoardHash(board: Board): string {\n    let hash = '';\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n        if (piece) {\n          const pieceCode =\n            piece.color === PieceColor.WHITE\n              ? piece.type\n              : piece.type.toLowerCase();\n          hash += pieceCode + x + y + ' ';\n        }\n      }\n    }\n    return hash.trim();\n  }\n}\n","// src/pieces/pawn.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from '../piece';\n\nexport class Pawn extends Piece {\n  public hasMoved: boolean = false;\n  private _toX: number | null = null;\n  private _toY: number | null = null;\n  private _board: BoardInterface | null = null;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.PAWN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    if (toX < 0 || toX >= 8 || toY < 0 || toY >= 8) {\n      return false;\n    }\n\n    const playerColor = board.getPlayerColor();\n    const direction = this.color === PieceColor.WHITE ? 1 : -1;\n    const startRow = this.color === PieceColor.WHITE ? 1 : 6;\n    const distanceY = (toY - fromY) * direction;\n    const distanceX = Math.abs(toX - fromX);\n\n    const promotionRow = playerColor === PieceColor.WHITE ? 7 : 0;\n\n    if (distanceX === 0 && distanceY === 1 && !board.getPiece(toX, toY)) {\n      // Vérifie la rangée de promotion et déclenche la promotion uniquement à cette rangée\n      if (toY === promotionRow) {\n        return this.handlePromotion(toX, toY, board);\n      }\n      return true;\n    }\n\n    if (distanceX === 1 && distanceY === 1) {\n      if (board.getPiece(toX, toY) && this.canCapture(toX, toY, board)) {\n        if (toY === promotionRow) {\n          return this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n\n      // Capture en passant\n      if (board.isEnPassantMove(fromX, fromY, toX, toY)) {\n        board.captureEnPassantIfValid(fromX, fromY, toX, toY);\n        return true;\n      }\n    }\n\n    if (\n      distanceX === 0 &&\n      distanceY === 2 &&\n      fromY === startRow &&\n      !board.getPiece(toX, toY) &&\n      !board.getPiece(fromX, fromY + direction)\n    ) {\n      board.updateEnPassantTarget(fromX, fromY, toX, toY, this);\n      this.hasMoved = true; // Marque que le pion a bougé\n      return true;\n    }\n\n    return false;\n  }\n\n  handlePromotion(toX: number, toY: number, board: BoardInterface): boolean {\n    this._toX = toX;\n    this._toY = toY;\n    this._board = board;\n    return true;\n  }\n}\n","// ai.worker.ts\nimport { Board } from './board';\nimport { AI } from './ai';\nimport { PieceColor, PieceType } from './piece';\nimport { Pawn } from './pieces/pawn';\n\nlet ai: AI;\n\nself.onmessage = async (event) => {\n  const { boardData, aiColor } = event.data;\n\n  ai = new AI(aiColor);\n\n  const board = await Board.fromData(boardData);\n  const bestMove = ai.makeMove(board);\n\n  // Définit explicitement le type de captureData\n  let captureData: {\n    capturedWhite: PieceType[];\n    capturedBlack: PieceType[];\n  } | null = null;\n\n  // Vérifie si une capture est effectuée\n  if (\n    bestMove &&\n    board.isCapture(bestMove.fromX, bestMove.fromY, bestMove.toX, bestMove.toY)\n  ) {\n    const targetPiece = board.getPiece(bestMove.toX, bestMove.toY);\n    if (targetPiece) {\n      captureData = {\n        capturedWhite: [],\n        capturedBlack: [],\n      };\n      if (targetPiece.color === PieceColor.WHITE) {\n        captureData.capturedWhite.push(targetPiece.type);\n      } else {\n        captureData.capturedBlack.push(targetPiece.type);\n      }\n    }\n  }\n\n  // Vérifie si une promotion est nécessaire pour un pion\n  let promotionRequired = false;\n  if (\n    bestMove &&\n    board.getPiece(bestMove.fromX, bestMove.fromY)?.type === PieceType.PAWN\n  ) {\n    const piece = board.getPiece(bestMove.fromX, bestMove.fromY);\n    if (piece instanceof Pawn) {\n      const promotionRow = aiColor === PieceColor.WHITE ? 7 : 0;\n      // Vérifie si la pièce est un pion\n      if (bestMove.toY === promotionRow) {\n        promotionRequired = piece.handlePromotion(\n          bestMove.toX,\n          bestMove.toY,\n          board,\n        );\n      }\n    }\n  }\n\n  self.postMessage({ bestMove, captureData, promotionRequired });\n};\n"],"names":["createPiece","type","color","PieceType","Pawn","Rook","Knight","Bishop","Queen","King","PieceColor","Piece","fromX","fromY","toX","toY","board","dx","dy","x","y","piece","targetPiece","data","direction","rookX","rook","capturedWhite","capturedBlack","getPieceSymbol","updateCapturedPieces","pieceSymbol","updateCapturedPiecesDOM","capturedWhiteElement","capturedBlackElement","Board","validMoves","movingPawn","capturedPawnY","opponentColor","king","kingX","kingY","capturedPawn","captureData","pieceType","kingPosition","moves","move","originalPiece","kingSafe","isKingSafe","pieces","fromRow","fromCol","toRow","toCol","destinationPiece","row","pieceData","kingPositions","nx","ny","clonedBoard","pieceValues","pieceSquareTables","centerControlBonus","evaluateKingSafety","getPieceSquareValue","flipBoard","table","checkIsolatedPawns","evaluateBoard","score","positionKey","pieceScore","evaluatePawnStructure","evaluatePawnChains","isKingExposed","leftDiagonal","rightDiagonal","isPassed","isPassedPawn","doubledPenalty","checkDoubledPawns","isolatedPenalty","i","leftColumn","rightColumn","newX","newY","adjPiece","pieceInFront","adjacentColumns","col","adjacentPiece","flipMove","getEndgameMove","hasPiece","getOpponentColor","getKingRookVsKingMove","getKingBishopKnightVsKingMove","getKingTwoBishopsVsKingMove","getKingPawnVsKingMove","opponentKingPos","findPiecePosition","rookPos","knightPos","bishopPos","bishops","findAllPiecesPositions","pawnPos","positions","openingBook","getNextOpeningMove","key","AI","maxTime","openingMove","chosenMove","endgameMove","mctsMove","bestMove","bestValue","maxDepth","depth","adjustedDepth","boardValue","moveKey","currentScore","alpha","beta","isMaximizing","boardKey","evaluation","maxEval","fromPiece","toPiece","minEval","newDepth","isCheck","isPawnPush","extendedDepth","flippedMove","killers","existingMove","k","a","b","maxQuiescenceDepth","standPat","captureMoves","nonCaptureMoves","pieceA","pieceB","valueA","valueB","centerControlA","centerControlB","killerMovesAtDepth","scoreA","moveScores","simulationResult","bestMoveKey","best","current","pieceCount","kingSafety","tempBoard","currentPlayer","randomMove","boardHash","hash","pieceCode","playerColor","startRow","distanceY","distanceX","promotionRow","ai","event","boardData","aiColor","promotionRequired"],"mappings":"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"}