async function P(l,e){switch(l){case a.PAWN:const{Pawn:t}=await Promise.resolve().then(function(){return J});return new t(e);case a.ROOK:const{Rook:s}=await import("./rook-DyZKlEQE.js");return new s(e);case a.KNIGHT:const{Knight:i}=await import("./knight-CPA4245v.js");return new i(e);case a.BISHOP:const{Bishop:n}=await import("./bishop-CEEAK5Qj.js");return new n(e);case a.QUEEN:const{Queen:o}=await import("./queen-8FzPcnY4.js");return new o(e);case a.KING:const{King:r}=await import("./king-1t47HpKK.js");return new r(e);default:throw new Error(`Type de pièce inconnu : ${l}`)}}var f=(l=>(l.WHITE="white",l.BLACK="black",l))(f||{}),a=(l=>(l.PAWN="pawn",l.ROOK="rook",l.KNIGHT="knight",l.BISHOP="bishop",l.QUEEN="queen",l.KING="king",l))(a||{});class T{constructor(e,t){this.color=e,this.type=t}hasMoved=!1;isPathClear(e,t,s,i,n){const o=Math.sign(s-e),r=Math.sign(i-t);let c=e+o,u=t+r;for(;c!==s||u!==i;){if(n.getPiece(c,u)!==null)return!1;c+=o,u+=r}return!0}static isKing(e){return e.type==="king"}canCapture(e,t,s){const i=s.getPiece(e,t);return!i||i.color!==this.color}toData(){return{color:this.color,type:this.type}}static async fromData(e){return await P(e.type,e.color)}isThreatenedMove(e,t,s,i){const n=Math.abs(s-e),o=Math.abs(i-t);return n<=1&&o<=1}}let B=[],k=[];function X(l,e){switch(l){case a.PAWN:return e===f.WHITE?"♙":"♟";case a.ROOK:return e===f.WHITE?"♖":"♜";case a.KNIGHT:return e===f.WHITE?"♘":"♞";case a.BISHOP:return e===f.WHITE?"♗":"♝";case a.QUEEN:return e===f.WHITE?"♕":"♛";case a.KING:return e===f.WHITE?"♔":"♚";default:return""}}function Y(l,e){const t=X(l,e);e===f.WHITE?B.push(t):k.push(t),S()}function S(){const l=document.getElementById("capturedWhite"),e=document.getElementById("capturedBlack");l&&(l.textContent=B.join(" ")),e&&(e.textContent=k.join(" "))}class W{grid;enPassantTarget=null;halfMoveCount=0;currentPlayer=f.WHITE;constructor(){this.grid=Array(8).fill(null).map(()=>Array(8).fill(null))}async init(){this.grid=await this.initializeBoard()}async initializeBoard(){const e=Array(8).fill(null).map(()=>Array(8).fill(null));return e[0]=[await P(a.ROOK,f.WHITE),await P(a.KNIGHT,f.WHITE),await P(a.BISHOP,f.WHITE),await P(a.QUEEN,f.WHITE),await P(a.KING,f.WHITE),await P(a.BISHOP,f.WHITE),await P(a.KNIGHT,f.WHITE),await P(a.ROOK,f.WHITE)],e[1]=await Promise.all(Array(8).fill(null).map(()=>P(a.PAWN,f.WHITE))),e[7]=[await P(a.ROOK,f.BLACK),await P(a.KNIGHT,f.BLACK),await P(a.BISHOP,f.BLACK),await P(a.QUEEN,f.BLACK),await P(a.KING,f.BLACK),await P(a.BISHOP,f.BLACK),await P(a.KNIGHT,f.BLACK),await P(a.ROOK,f.BLACK)],e[6]=await Promise.all(Array(8).fill(null).map(()=>P(a.PAWN,f.BLACK))),e}isWithinBounds(e,t){return e>=0&&e<8&&t>=0&&t<8}getPiece(e,t){return this.grid[t][e]}getValidMoves(e,t){let s=null;if(this.isWithinBounds(e,t)&&(s=this.getPiece(e,t)),!s)return[];const i=[];for(let n=0;n<8;n++)for(let o=0;o<8;o++)s.isValidMove(e,t,o,n,this)&&i.push({x:o,y:n});return i}captureEnPassantIfValid(e,t,s,i){if(this.isEnPassantMove(e,t,s,i)){const n=this.getPiece(e,t);if(!n)return;const o=i+(n.color===f.WHITE?-1:1);this.grid[o][s]&&(this.grid[o][s]=null)}}getKingInCheck(){return this.isKingInCheck(f.WHITE)?this.findKing(f.WHITE):this.isKingInCheck(f.BLACK)?this.findKing(f.BLACK):null}movePiece(e,t,s,i,n=!0){if(!this.isWithinBounds(e,t)||!this.isWithinBounds(s,i)||["__proto__","constructor","prototype"].includes(t.toString())||["__proto__","constructor","prototype"].includes(i.toString()))return!1;const o=this.getPiece(e,t);if(o&&o.isValidMove(e,t,s,i,this)){const r=this.getPiece(s,i);if(r&&r.type===a.KING)return!1;if(o.type===a.KING&&Math.abs(s-e)===2)return this.isCastlingValid(o,e,t,s)?(this.handleCastling(s,t),o.hasMoved=!0,!0):!1;if(o?.type===a.PAWN&&this.isEnPassantMove(e,t,s,i)&&this.captureEnPassant(e,t,s,i),this.grid[i][s]=o,this.grid[t][e]=null,n||(o.hasMoved=!0),this.isKingInCheck(o.color))return this.grid[t][e]=o,this.grid[i][s]=r,!1;(o.type===a.KING||o.type===a.ROOK)&&(o.hasMoved=!0),this.updateEnPassantTarget(e,t,s,i,o),this.halfMoveCount=o.type===a.PAWN||r?0:this.halfMoveCount+1;const c=o.color===f.WHITE?f.BLACK:f.WHITE;return this.isCheckmate(c),!0}return!1}isCastlingValid(e,t,s,i){const n=i>t?1:-1,o=i>t?7:0,r=this.getPiece(o,s);if(r?.type!==a.ROOK||r.hasMoved||e.hasMoved)return!1;for(let c=t+n;c!==i+n;c+=n)if(this.getPiece(c,s)||this.isSquareUnderAttack(c,s,e.color))return!1;return!0}handleCastling(e,t){if(e===6){const s=this.getPiece(7,t),i=this.getPiece(4,t);s?.type===a.ROOK&&!s.hasMoved&&i?.type===a.KING&&!i.hasMoved&&(this.setPiece(5,t,s),this.setPiece(7,t,null),this.setPiece(6,t,i),this.setPiece(4,t,null),i.hasMoved=!0,s.hasMoved=!0)}else if(e===2){const s=this.getPiece(0,t),i=this.getPiece(4,t);s?.type===a.ROOK&&!s.hasMoved&&i?.type===a.KING&&!i.hasMoved&&(this.setPiece(3,t,s),this.setPiece(0,t,null),this.setPiece(2,t,i),this.setPiece(4,t,null),i.hasMoved=!0,s.hasMoved=!0)}}updateEnPassantTarget(e,t,s,i,n){n?.type===a.PAWN&&Math.abs(i-t)===2&&e===s?this.enPassantTarget={x:s,y:(t+i)/2}:this.enPassantTarget=null}captureEnPassant(e,t,s,i){const n=this.getPiece(e,t);if(this.isEnPassantMove(e,t,s,i)&&n?.type===a.PAWN){const o=n.color===f.WHITE?-1:1,r=i+o,c=this.getPiece(s,r);if(c&&c.type===a.PAWN){this.grid[r][s]=null;const u={capturedWhite:[],capturedBlack:[]};return c.color===f.WHITE?u.capturedWhite.push(c.type):u.capturedBlack.push(c.type),Y(c.type,c.color),u}}return null}isEnPassantMove(e,t,s,i){return this.enPassantTarget?this.getPiece(e,t)?.type===a.PAWN&&s===this.enPassantTarget.x&&i===this.enPassantTarget.y&&Math.abs(e-s)===1&&Math.abs(t-i)===1:!1}async promotePawn(e,t,s){const i=this.getPiece(e,t)?.color;if(i)switch(s){case"queen":this.grid[t][e]=await P(a.QUEEN,i);break;case"rook":this.grid[t][e]=await P(a.ROOK,i);break;case"bishop":this.grid[t][e]=await P(a.BISHOP,i);break;case"knight":this.grid[t][e]=await P(a.KNIGHT,i);break}}isKingInCheck(e){const t=this.findKing(e);if(!t)return!1;for(let s=0;s<8;s++)for(let i=0;i<8;i++){const n=this.getPiece(i,s);if(n&&n.color!==e&&n.isValidMove(i,s,t.x,t.y,this))return!0}return!1}isCheckmate(e){if(!this.isKingInCheck(e))return!1;for(let s=0;s<8;s++)for(let i=0;i<8;i++){const n=this.getPiece(i,s);if(n&&n.color===e){const o=this.getValidMoves(i,s);for(const r of o){const c=this.getPiece(r.x,r.y);this.grid[r.y][r.x]=n,this.grid[s][i]=null;const u=!this.isKingInCheck(e);if(this.grid[s][i]=n,this.grid[r.y][r.x]=c,u)return!1}}}return!0}isStalemate(e){if(this.isKingInCheck(e))return!1;for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=this.getPiece(s,t);if(i&&i.color===e){for(let n=0;n<8;n++)for(let o=0;o<8;o++)if(i.isValidMove(s,t,o,n,this)){const r=this.getPiece(o,n);this.grid[n][o]=i,this.grid[t][s]=null;const c=!this.isKingInCheck(e);if(this.grid[t][s]=i,this.grid[n][o]=r,c)return!1}}}return!0}findKing(e){for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=this.getPiece(s,t);if(i&&i?.type===a.KING&&i.color===e)return{x:s,y:t}}return null}isKing(e,t){return this.getPiece(e,t)?.type===a.KING}isSquareUnderAttack(e,t,s){for(let i=0;i<8;i++)for(let n=0;n<8;n++){const o=this.getPiece(n,i);if(o&&o.color!==s){if(o.type===a.KING){if(o.isThreatenedMove(n,i,e,t))return!0}else if(o.isValidMove(n,i,e,t,this))return!0}}return!1}isInsufficientMaterial(){const e=this.grid.flat().filter(t=>t!==null);return e.length<=2?!0:e.length===3&&e.some(t=>t?.type===a.BISHOP||t?.type===a.KNIGHT)}isFiftyMoveRule(){return this.halfMoveCount>=50}setPiece(e,t,s){this.grid[t][e]=s}isMoveValid(e,t,s,i){const n=this.getPiece(e,t);if(!n||s<0||s>=8||i<0||i>=8||!n.isValidMove(e,t,s,i,this))return!1;const o=this.getPiece(s,i);return!(o&&o.color===n.color)}isCapture(e,t,s,i){const n=this.isWithinBounds(e,t)?this.getPiece(e,t):null,o=this.isWithinBounds(s,i)?this.getPiece(s,i):null;return n!==null&&o!==null&&n.color!==o.color}static async fromData(e){const t=new W;return await t.init(),t.grid=await Promise.all(e.grid.map(async s=>Promise.all(s.map(async i=>i?await T.fromData(i):null)))),t}toData(){return{grid:this.grid.map(e=>e.map(t=>t?t.toData():null))}}isAdjacentToAnotherKing(e,t,s){const i=[{dx:-1,dy:-1},{dx:-1,dy:0},{dx:-1,dy:1},{dx:0,dy:-1},{dx:0,dy:1},{dx:1,dy:-1},{dx:1,dy:0},{dx:1,dy:1}];for(const{dx:n,dy:o}of i){const r=e+n,c=t+o,u=this.isWithinBounds(r,c)?this.getPiece(r,c):null;if(u?.type===a.KING&&u.color!==s)return!0}return!1}getPieceCount(){return this.grid.flat().filter(e=>e!==null).length}setPlayerColor(e){this.currentPlayer=e}getPlayerColor(){return this.currentPlayer}getCurrentMovesHash(){let e="";for(let t=0;t<8;t++){let s=0;for(let i=0;i<8;i++){const n=this.getPiece(i,t);if(n){s>0&&(e+=s.toString(),s=0);const o=this.getPieceSymbol(n);e+=o}else s++}s>0&&(e+=s.toString()),t<7&&(e+="/")}return e+=` ${this.currentPlayer===f.WHITE?"w":"b"}`,e}getPieceSymbol(e){const t={[a.PAWN]:"p",[a.ROOK]:"r",[a.KNIGHT]:"n",[a.BISHOP]:"b",[a.QUEEN]:"q",[a.KING]:"k"};return e.color===f.WHITE?t[e.type].toUpperCase():t[e.type]}toString(){let e="";for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=this.getPiece(s,t);i?e+=`${i.color[0]}${i.type[0]}`:e+="__"}return e+=this.enPassantTarget?`e${this.enPassantTarget.x}${this.enPassantTarget.y}`:"e--",e+=`h${this.halfMoveCount}`,e+=`p${this.currentPlayer[0]}`,e}}const I={[a.PAWN]:1,[a.KNIGHT]:3,[a.BISHOP]:3.25,[a.ROOK]:5,[a.QUEEN]:9,[a.KING]:0},x={[a.PAWN]:[[0,0,0,0,0,0,0,0],[.5,.5,.5,.5,.5,.5,.5,.5],[.1,.1,.2,.3,.3,.2,.1,.1],[.05,.05,.1,.25,.25,.1,.05,.05],[0,0,0,.2,.2,0,0,0],[.05,-.05,-.1,0,0,-.1,-.05,.05],[.05,.1,.1,-.2,-.2,.1,.1,.05],[0,0,0,0,0,0,0,0]],[a.KNIGHT]:[[-.5,-.4,-.3,-.3,-.3,-.3,-.4,-.5],[-.4,-.2,0,0,0,0,-.2,-.4],[-.3,0,.1,.15,.15,.1,0,-.3],[-.3,.05,.15,.2,.2,.15,.05,-.3],[-.3,0,.15,.2,.2,.15,0,-.3],[-.3,.05,.1,.15,.15,.1,.05,-.3],[-.4,-.2,0,.05,.05,0,-.2,-.4],[-.5,-.4,-.3,-.3,-.3,-.3,-.4,-.5]],[a.BISHOP]:[[-.2,-.1,-.1,-.1,-.1,-.1,-.1,-.2],[-.1,0,0,0,0,0,0,-.1],[-.1,0,.05,.1,.1,.05,0,-.1],[-.1,.05,.05,.1,.1,.05,.05,-.1],[-.1,0,.1,.1,.1,.1,0,-.1],[-.1,.1,.1,.1,.1,.1,.1,-.1],[-.1,.05,0,0,0,0,.05,-.1],[-.2,-.1,-.1,-.1,-.1,-.1,-.1,-.2]],[a.ROOK]:[[0,0,0,0,0,0,0,0],[.05,.1,.1,.1,.1,.1,.1,.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[0,0,0,.05,.05,0,0,0]],[a.QUEEN]:[[-.2,-.1,-.1,-.05,-.05,-.1,-.1,-.2],[-.1,0,0,0,0,0,0,-.1],[-.1,0,.05,.05,.05,.05,0,-.1],[-.05,0,.05,.05,.05,.05,0,-.05],[0,0,.05,.05,.05,.05,0,-.05],[-.1,.05,.05,.05,.05,.05,0,-.1],[-.1,0,.05,0,0,0,0,-.1],[-.2,-.1,-.1,-.05,-.05,-.1,-.1,-.2]],[a.KING]:[[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.2,-.3,-.3,-.4,-.4,-.3,-.3,-.2],[-.1,-.2,-.2,-.2,-.2,-.2,-.2,-.1],[.2,.2,0,0,0,0,.2,.2],[.2,.3,0,0,0,0,.3,.2]]},K={"3,3":.5,"3,4":.5,"4,3":.5,"4,4":.5,"2,3":.25,"2,4":.25,"3,2":.25,"4,2":.25,"4,5":.25,"3,5":.25,"5,3":.25,"5,4":.25};function O(l,e){const t=l.findKing(e);return t&&l.isSquareUnderAttack(t.x,t.y,e)?-.5:0}function G(l,e,t,s,i,n){const o=x[l];return o?l===a.PAWN&&C(i,e,t,n)>0?0:s?o[7-t][7-e]:o[t][e]:0}function w(l,e,t=!1){let s=0;for(let i=0;i<8;i++)for(let n=0;n<8;n++){const o=l.getPiece(n,i),r=`${n},${i}`;if(!o)continue;let c=I[o.type];c+=G(o.type,n,i,t,l,o.color),o.type===a.PAWN&&C(l,n,i,o.color)===0&&K[r]&&(c+=K[r]),o.type===a.PAWN&&(c+=q(l,n,i,o.color),c+=V(l,n,i,o.color),c+=R(l,n,i,o.color)),c+=D(l,n,i,o.color),o.type===a.KING&&(c+=$(l,n,i,o.color)),s+=o.color===e?c:-c}return parseFloat(s.toFixed(2))}function D(l,e,t,s){let i=0;const n=l.findKing(s===f.WHITE?f.BLACK:f.WHITE);if(n){const r=Math.abs(n.x-e),c=Math.abs(n.y-t);(r<=1&&c<=1||r===0&&c<=2)&&(i+=.5)}const o=l.getPiece(e,t);return o&&I[o.type]>3&&(e===3||e===4||t===3||t===4)&&(i+=.25),i}function $(l,e,t,s){let i=0;const n=[{dx:-1,dy:0},{dx:1,dy:0},{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:-1},{dx:1,dy:1},{dx:-1,dy:1},{dx:1,dy:-1}];for(const{dx:o,dy:r}of n){const c=e+o,u=t+r;if(!l.isWithinBounds(c,u))continue;const g=l.getPiece(c,u);if(g&&g.color!==s){const p=Math.abs(c-e)+Math.abs(u-t);(g.type===a.ROOK||g.type===a.QUEEN)&&(i-=.5/p)}}return i}function R(l,e,t,s){let i=0;const n=e>0?l.getPiece(e-1,t):null,o=e<7?l.getPiece(e+1,t):null;return(n&&n.color===s&&n.type===a.PAWN||o&&o.color===s&&o.type===a.PAWN)&&(i+=.3),i}function V(l,e,t,s){const i=s===f.WHITE?-1:1;let n=0;const o=l.getPiece(e-1,t+i),r=l.getPiece(e+1,t+i);return(o&&o.color===s&&o.type===a.PAWN||r&&r.color===s&&r.type===a.PAWN)&&(n+=.5),n}function q(l,e,t,s){let i=0;const n=L(l,e,t,s),o=Q(l,e,t,s)*.25,r=C(l,e,t,s)*4;return n&&(i+=4.5),i-=o+r,i}function Q(l,e,t,s){for(let i=0;i<8;i++)if(i!==t&&l.getPiece(e,i)?.type===a.PAWN&&l.getPiece(e,i)?.color===s)return .5;return 0}function C(l,e,t,s){const i=e-1>=0?l.getPiece(e-1,t):null,n=e+1<8?l.getPiece(e+1,t):null;return i&&i.type===a.PAWN&&i.color===s||n&&n.type===a.PAWN&&n.color===s?0:1.5}function L(l,e,t,s){const i=s===f.WHITE?1:-1;for(let o=t+i;o>=0&&o<8;o+=i){const r=l.getPiece(e,o);if(r&&r.type===a.PAWN&&r.color!==s)return!1}const n=[e-1,e+1];for(const o of n)if(o>=0&&o<8)for(let r=t+i;r>=0&&r<8;r+=i){const c=l.getPiece(o,r);if(c&&c.type===a.PAWN&&c.color!==s)return!1}return!0}class _{static endgames={kqkEndgame:{fromX:7,fromY:1,toX:6,toY:1},krkEndgame:{fromX:7,fromY:0,toX:5,toY:0},kbbkEndgame:{fromX:5,fromY:3,toX:3,toY:1},kbnkEndgame:{fromX:2,fromY:6,toX:4,toY:4},kpEndgame:{fromX:6,fromY:5,toX:6,toY:6},kppkEndgame:{fromX:5,fromY:2,toX:5,toY:3},krkpEndgame:{fromX:6,fromY:0,toX:6,toY:1},kqkrEndgame:{fromX:7,fromY:2,toX:6,toY:2},kbkpEndgame:{fromX:3,fromY:3,toX:4,toY:2},krrkEndgame:{fromX:7,fromY:4,toX:5,toY:4}};static getEndgameMove(e){return this.endgames[e]||null}}class j{static openings={"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w":[{fromX:1,fromY:7,toX:3,toY:7},{fromX:6,fromY:7,toX:5,toY:5}],"rnbqkbnr/pppppppp/8/8/8/8/PPP1PPPP/RNBQKBNR w":[{fromX:2,fromY:7,toX:4,toY:7},{fromX:4,fromY:6,toX:4,toY:4}],"rnbqkbnr/pppppp1p/8/8/8/8/PPPP1PPP/RNBQKBNR w":[{fromX:4,fromY:7,toX:4,toY:5}],"rnbqkbnr/ppp1pppp/8/8/8/8/PPP1PPPP/RNBQKBNR w":[{fromX:5,fromY:6,toX:4,toY:4}],"rnbqkbnr/pppppppp/8/8/8/8/PP1PPPPP/RNBQKBNR w":[{fromX:4,fromY:7,toX:4,toY:5}],"rnbqkbnr/pppppppp/8/8/8/8/PPPP1PPP/RNBQKBNR w":[{fromX:6,fromY:6,toX:6,toY:4}]};static getOpeningMove(e){const t=this.openings[e];return t&&t.length>0?t[Math.floor(Math.random()*t.length)]:null}}class U{gamePatterns=new Map;async loadGamesData(){const t=await(await fetch("/chess-game/games.json")).json();this.loadGames(t)}loadGames(e){e.forEach(t=>{const s=t.Moves,i=t.Result;let n="";s.forEach(o=>{this.gamePatterns.has(n)||this.gamePatterns.set(n,[]);const r=this.gamePatterns.get(n),c=i==="1-0"?1:i==="0-1"?0:.5,u=r.find(g=>g.move===o);u?(u.successRate=(u.successRate*u.games+c)/(u.games+1),u.games+=1):r.push({move:o,successRate:c,games:1}),n+=o+" "})})}getBestMove(e){const t=this.gamePatterns.get(e);return!t||t.length===0?null:(t.sort((s,i)=>i.successRate-s.successRate),t[0].move)}}class z{moveData=new Map;recordMove(e,t){const s=this.moveData.get(e)||[],i=s.find(n=>n.move.fromX===t.fromX&&n.move.fromY===t.fromY&&n.move.toX===t.toX&&n.move.toY===t.toY);i?i.count++:s.push({move:t,count:1}),this.moveData.set(e,s)}getMovesByFrequency(e){return(this.moveData.get(e)||[]).sort((t,s)=>s.count-t.count)}}class F{constructor(e,t=Math.floor(Math.random()*45001)+5e3){this.color=e,this.transpositionTable=new Map,this.maxTime=t,this.killerMoves=new Map,this.startTime=0,this.gamesAnalyzer=new U,this.contextualMoveDatabase=new z}transpositionTable;maxTime;startTime;killerMoves;moveHistory=[];historicalMoveScores=new Map;gamesAnalyzer;gamesLoaded=!1;contextualMoveDatabase;async loadGamesData(){await this.gamesAnalyzer.loadGamesData(),this.gamesLoaded=!0}recordMoveInContextualDatabase(e,t){this.contextualMoveDatabase.recordMove(e,t)}makeMove(e){if(!this.gamesLoaded)throw new Error("Games data not loaded. Call loadGamesData() first.");this.startTime=Date.now(),this.maxTime=Math.floor(Math.random()*45001)+5e3;const t=this.getOpeningMove(e);if(t&&typeof t=="object"&&"fromX"in t&&"fromY"in t&&"toX"in t&&"toY"in t)return this.moveHistory.push(t),this.recordMoveInContextualDatabase(this.getPositionKey(e),t),t;const s=this.useEndgameTablebase(e);if(s&&typeof s=="object"&&"fromX"in s&&"fromY"in s&&"toX"in s&&"toY"in s)return this.moveHistory.push(s),this.recordMoveInContextualDatabase(this.getPositionKey(e),s),s;const i=this.getPositionKey(e),n=this.getAnalyzedMove(i);if(n&&typeof n=="object"&&"fromX"in n&&"fromY"in n&&"toX"in n&&"toY"in n)return this.moveHistory.push(n),this.recordMoveInContextualDatabase(i,n),n;const o=this.getBestMoveUsingMinimax(e);return o&&typeof o=="object"&&"fromX"in o&&"fromY"in o&&"toX"in o&&"toY"in o?(this.moveHistory.push(o),this.recordMoveInContextualDatabase(i,o),o):null}getOpeningMove(e){const t=e.getCurrentMovesHash(),s=j.getOpeningMove(t);return s?this.flipMoveIfBlack(s):null}flipMoveIfBlack(e){return this.color===f.BLACK?{fromX:7-e.fromX,fromY:7-e.fromY,toX:7-e.toX,toY:7-e.toY}:e}minimax(e,t,s,i,n,o=2,r=3,c=.9,u=25){const g=this.determineGamePhase(e),p=`${e.toString()}|${t}|${g}`;if(Date.now()-this.startTime>this.maxTime)return this.evaluatePositionWithKingSafety(e,this.color);if(this.transpositionTable.has(p)){const{value:M,depth:A}=this.transpositionTable.get(p);if(A>=t)return M}if(t===0||e.isCheckmate(this.color)||e.isCheckmate(this.getOpponentColor())){const M=this.quiescenceSearch(e,s,i,g);return this.transpositionTable.set(p,{value:M,depth:t}),M}let h=this.evaluatePositionWithKingSafety(e,this.color),v=h-u,y=h+u,m;for(;;)if(m=this.alphaBetaWithAspirationWindow(e,t,v,y,n,o,r,c),m<=v)v-=u;else if(m>=y)y+=u;else break;return this.transpositionTable.set(p,{value:m,depth:t}),m}alphaBetaWithAspirationWindow(e,t,s,i,n,o,r,c){let u=n?-1/0:1/0,g=this.getAllValidMoves(e);g=this.sortMoves(g,e,t,this.determineGamePhase(e));let p=0;for(const h of g){const v=e.getPiece(h.fromX,h.fromY),y=e.getPiece(h.toX,h.toY);e.movePiece(h.fromX,h.fromY,h.toX,h.toY);let m;if(t>=r&&p<o&&(m=-this.minimax(e,t-r,-i,-s,!n,o,r,c),m<=s)){p++,e.setPiece(h.fromX,h.fromY,v),e.setPiece(h.toX,h.toY,y);continue}if(m=this.minimax(e,t-1,s,i,!n,o,r,c),e.setPiece(h.fromX,h.fromY,v),e.setPiece(h.toX,h.toY,y),n?(m>u&&(u=m,this.updateHistoricalMoveScore(h),this.addKillerMove(t,h)),s=Math.max(s,m)):(m<u&&(u=m,this.updateHistoricalMoveScore(h),this.addKillerMove(t,h)),i=Math.min(i,m)),i<=s)break}return u}determineGamePhase(e){const t=e.getPieceCount();return t>24?"opening":t>12?"midgame":"endgame"}addKillerMove(e,t){const s=this.killerMoves.get(e)??[],i=`${t.fromX},${t.fromY},${t.toX},${t.toY}`;let n=s.find(o=>`${o.move.fromX},${o.move.fromY},${o.move.toX},${o.move.toY}`===i);n?n.score+=10:s.push({move:t,score:10}),this.killerMoves.set(e,s.sort((o,r)=>r.score-o.score).slice(0,2))}updateHistoricalMoveScore(e){const t=`${e.fromX},${e.fromY},${e.toX},${e.toY}`,s=this.historicalMoveScores.get(t)||0;this.historicalMoveScores.set(t,s+1)}quiescenceSearch(e,t,s,i,n=0){const o=this.getAdaptiveQuiescenceDepth(e);if(n>=o)return w(e,this.color);const r=w(e,this.color);if(r>=s)return s;t<r&&(t=r);const c=this.getAllValidMoves(e).filter(u=>e.isCapture(u.fromX,u.fromY,u.toX,u.toY));for(const u of c){const g=e.getPiece(u.fromX,u.fromY),p=e.getPiece(u.toX,u.toY);e.movePiece(u.fromX,u.fromY,u.toX,u.toY);let h=-this.quiescenceSearch(e,-s,-t,i,n+1);if(i==="endgame"&&this.isCriticalMove(g,u,e)&&(h+=20),e.setPiece(u.fromX,u.fromY,g),e.setPiece(u.toX,u.toY,p),h>=s)return s;h>t&&(t=h)}return t}getOpponentColor(){return this.color===f.WHITE?f.BLACK:f.WHITE}getAllValidMoves(e){const t=[];for(let s=0;s<8;s++)for(let i=0;i<8;i++){const n=e.getPiece(i,s);if(n&&n.color===this.color){const o=e.getValidMoves(i,s);for(const r of o)if(e.isMoveValid(i,s,r.x,r.y)){const c=e.getPiece(r.x,r.y);e.setPiece(r.x,r.y,n),e.setPiece(i,s,null);const u=!e.isKingInCheck(this.color);e.setPiece(i,s,n),e.setPiece(r.x,r.y,c),u&&t.push({fromX:i,fromY:s,toX:r.x,toY:r.y})}}}return t}sortMoves(e,t,s,i){const n=this.getPositionKey(t),o=this.contextualMoveDatabase.getMovesByFrequency(n);return e.sort((r,c)=>{const u=t.getPiece(r.toX,r.toY),g=t.getPiece(c.toX,c.toY),p=u?I[u.type]:0,h=g?I[g.type]:0,v=o.findIndex(d=>d.move.fromX===r.fromX&&d.move.fromY===r.fromY&&d.move.toX===r.toX&&d.move.toY===r.toY),y=o.findIndex(d=>d.move.fromX===c.fromX&&d.move.fromY===c.fromY&&d.move.toX===c.toX&&d.move.toY===c.toY);if(v!==-1||y!==-1)return(v!==-1?v:1/0)-(y!==-1?y:1/0);if(i==="opening"){const d=K[`${r.toX},${r.toY}`]||0,N=K[`${c.toX},${c.toY}`]||0;if(d!==N)return N-d}else if(i==="endgame"){if(u&&u.type===a.PAWN&&r.toY===7)return-1;if(g&&g.type===a.PAWN&&c.toY===7)return 1}if(p!==h)return h-p;const m=this.killerMoves.get(s);if(m&&m.some(d=>d.move.fromX===r.fromX&&d.move.fromY===r.fromY&&d.move.toX===r.toX&&d.move.toY===r.toY))return-1;const M=this.historicalMoveScores.get(`${r.fromX},${r.fromY},${r.toX},${r.toY}`)||0;return(this.historicalMoveScores.get(`${c.fromX},${c.fromY},${c.toX},${c.toY}`)||0)-M})}getAdaptiveQuiescenceDepth(e){const t=e.getPieceCount();return t<=6?7:t<=12?5:3}evaluatePositionWithKingSafety(e,t){let s=w(e,t);const i=O(e,t);return s+=i,s}useEndgameTablebase(e){if(e.getPieceCount()<=5){const t=e.getCurrentMovesHash(),s=_.getEndgameMove(t);return s?this.flipMoveIfBlack(s):null}return null}isCriticalMove(e,t,s){const i=s.getPiece(t.toX,t.toY);return i&&i.color!==e.color&&i.type!==a.PAWN}getPositionKey(e){return e.getCurrentMovesHash()}convertMoveToCoords(e){const[t,s,i,n]=e.match(/\d+/g).map(Number);return{fromX:t,fromY:s,toX:i,toY:n}}getAnalyzedMove(e){const t=this.gamesAnalyzer.getBestMove(e);return t?this.convertMoveToCoords(t):null}getBestMoveUsingMinimax(e){let t=null,s=-1/0;const i=10,n=this.determineGamePhase(e);this.startTime=Date.now();for(let o=1;o<=i;o++){let r=this.getAllValidMoves(e);r=this.sortMoves(r,e,o,n);for(const c of r){const u=e.getPiece(c.fromX,c.fromY);if(!u)continue;const g=e.getPiece(c.toX,c.toY);e.movePiece(c.fromX,c.fromY,c.toX,c.toY);const h=e.isKingInCheck(this.color)||this.isCriticalMove(u,c,e)?o+1:o,v=this.minimax(e,h-1,-s,-1/0,!1);if(e.setPiece(c.fromX,c.fromY,u),e.setPiece(c.toX,c.toY,g),-v>s&&(s=-v,t=c),Date.now()-this.startTime>this.maxTime)return t}if(Date.now()-this.startTime>this.maxTime)break}return t}}class H extends T{hasMoved=!1;_toX=null;_toY=null;_board=null;constructor(e){super(e,a.PAWN)}isValidMove(e,t,s,i,n){if(s<0||s>=8||i<0||i>=8)return!1;const o=n.getPlayerColor(),r=this.color===f.WHITE?1:-1,c=this.color===f.WHITE?1:6,u=(i-t)*r,g=Math.abs(s-e),p=o===f.WHITE?7:0;if(g===0&&u===1&&!n.getPiece(s,i))return i===p?this.handlePromotion(s,i,n):!0;if(g===1&&u===1){if(n.getPiece(s,i)&&this.canCapture(s,i,n))return i===p?this.handlePromotion(s,i,n):!0;if(n.isEnPassantMove(e,t,s,i))return n.captureEnPassantIfValid(e,t,s,i),!0}return g===0&&u===2&&t===c&&!n.getPiece(s,i)&&!n.getPiece(e,t+r)?(n.updateEnPassantTarget(e,t,s,i,this),this.hasMoved=!0,!0):!1}handlePromotion(e,t,s){return this._toX=e,this._toY=t,this._board=s,!0}}var J=Object.freeze({__proto__:null,Pawn:H});let E;self.onmessage=async l=>{const{boardData:e,aiColor:t}=l.data;E=new F(t),await E.loadGamesData();const s=await W.fromData(e),i=E.makeMove(s);let n=null;if(i&&s.isCapture(i.fromX,i.fromY,i.toX,i.toY)){const r=s.getPiece(i.toX,i.toY);r&&(n={capturedWhite:[],capturedBlack:[]},r.color===f.WHITE?n.capturedWhite.push(r.type):n.capturedBlack.push(r.type))}let o=!1;if(i&&s.getPiece(i.fromX,i.fromY)?.type===a.PAWN){const r=s.getPiece(i.fromX,i.fromY);if(r instanceof H){const c=t===f.WHITE?7:0;i.toY===c&&(o=r.handlePromotion(i.toX,i.toY,s))}}self.postMessage({bestMove:i,captureData:n,promotionRequired:o})};export{T as P,a,P as c};
//# sourceMappingURL=ai.worker-BLt9JgE8.js.map
