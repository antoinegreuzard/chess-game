{"version":3,"file":"ai.worker-CqXe2Zdt.js","sources":["../src/utils/pieceFactory.ts","../src/piece.ts","../src/utils/utils.ts","../src/board.ts","../src/evaluator.ts","../src/endgameTablebase.ts","../src/openingBook.ts","../src/ai.ts","../src/ai.worker.ts"],"sourcesContent":["import { PieceColor, PieceType } from '../piece';\n\nexport async function createPiece(type: PieceType, color: PieceColor) {\n  switch (type) {\n    case PieceType.PAWN:\n      const { Pawn } = await import('../pieces/pawn');\n      return new Pawn(color);\n    case PieceType.ROOK:\n      const { Rook } = await import('../pieces/rook');\n      return new Rook(color);\n    case PieceType.KNIGHT:\n      const { Knight } = await import('../pieces/knight');\n      return new Knight(color);\n    case PieceType.BISHOP:\n      const { Bishop } = await import('../pieces/bishop');\n      return new Bishop(color);\n    case PieceType.QUEEN:\n      const { Queen } = await import('../pieces/queen');\n      return new Queen(color);\n    case PieceType.KING:\n      const { King } = await import('../pieces/king');\n      return new King(color);\n    default:\n      throw new Error(`Type de pièce inconnu : ${type}`);\n  }\n}\n","// src/piece.ts\nimport { createPiece } from './utils/pieceFactory';\nimport { King } from './pieces/king';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport interface BoardInterface {\n  getPiece(x: number, y: number): Piece | null;\n\n  updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void;\n\n  isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean;\n\n  promotePawn(x: number, y: number, pieceType: string): void;\n\n  isSquareUnderAttack(x: number, y: number, color: string): boolean;\n\n  isKing(x: number, y: number): boolean;\n\n  isAdjacentToAnotherKing(x: number, y: number, color: PieceColor): boolean;\n}\n\nexport abstract class Piece {\n  public hasMoved: boolean = false;\n\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean;\n\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    const dx = Math.sign(toX - fromX);\n    const dy = Math.sign(toY - fromY);\n\n    let x = fromX + dx;\n    let y = fromY + dy;\n    while (x !== toX || y !== toY) {\n      if (board.getPiece(x, y) !== null) return false;\n      x += dx;\n      y += dy;\n    }\n    return true;\n  }\n\n  static isKing(piece: Piece): piece is King {\n    return piece.type === PieceType.KING;\n  }\n\n  public canCapture(toX: number, toY: number, board: BoardInterface): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return !targetPiece || targetPiece.color !== this.color;\n  }\n\n  // Sérialisation des données de la pièce\n  public toData(): any {\n    return {\n      color: this.color,\n      type: this.type,\n    };\n  }\n\n  static async fromData(data: any): Promise<Piece> {\n    return await createPiece(data.type, data.color);\n  }\n\n  // Méthode clone pour créer une nouvelle instance identique\n  public async clone(): Promise<Piece> {\n    return await createPiece(this.type, this.color);\n  }\n}\n","// src/utils/utils.ts\n\nimport { PieceColor, PieceType } from '../piece';\n\nexport let capturedWhite: string[] = [];\nexport let capturedBlack: string[] = [];\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById(\n    'gameMessage',\n  ) as HTMLDivElement;\n  gameMessageElement.textContent = message;\n  gameMessageElement.style.display = 'block'; // Afficher le message\n}\n\nexport function getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case PieceType.PAWN:\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case PieceType.ROOK:\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case PieceType.KNIGHT:\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case PieceType.BISHOP:\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case PieceType.QUEEN:\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case PieceType.KING:\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\nexport function updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const pieceSymbol = getPieceSymbol(piece, color);\n\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n  } else {\n    capturedBlack.push(pieceSymbol);\n  }\n\n  updateCapturedPiecesDOM();\n}\n\nexport function updateCapturedPiecesDOM() {\n  const capturedWhiteElement = document.getElementById(\n    'capturedWhite',\n  ) as HTMLDivElement;\n  const capturedBlackElement = document.getElementById(\n    'capturedBlack',\n  ) as HTMLDivElement;\n\n  if (capturedWhiteElement) {\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  }\n  if (capturedBlackElement) {\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n","// src/board.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from './piece';\nimport { King } from './pieces/king';\nimport { updateCapturedPieces } from './utils/utils';\nimport { createPiece } from './utils/pieceFactory';\n\ntype BoardSquare = Piece | null;\n\nexport class Board implements BoardInterface {\n  private grid: (Piece | null)[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n\n  constructor() {\n    this.grid = [];\n  }\n\n  public async init(): Promise<void> {\n    this.grid = await this.initializeBoard();\n  }\n\n  private async initializeBoard(): Promise<(Piece | null)[][]> {\n    const board: (Piece | null)[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Ajouter les pièces blanches\n    board[0] = [\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.QUEEN, PieceColor.WHITE),\n      await createPiece(PieceType.KING, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n    ];\n    board[1] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.WHITE)),\n    );\n\n    // Ajouter les pièces noires\n    board[7] = [\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.QUEEN, PieceColor.BLACK),\n      await createPiece(PieceType.KING, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n    ];\n    board[6] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.BLACK)),\n    );\n\n    return board;\n  }\n\n  // Méthode générale pour vérifier les limites\n  public isWithinBounds(x: number, y: number): boolean {\n    return x >= 0 && x < 8 && y >= 0 && y < 8;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    let piece = null;\n    if (this.isWithinBounds(x, y)) piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (\n      !this.isWithinBounds(fromX, fromY) ||\n      !this.isWithinBounds(toX, toY) ||\n      ['__proto__', 'constructor', 'prototype'].includes(fromY.toString()) ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString())\n    ) {\n      return false; // Mouvement invalide en dehors des limites ou clé interdite\n    }\n\n    const piece = this.getPiece(fromX, fromY);\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      const targetPiece = this.getPiece(toX, toY);\n\n      // Empêche de capturer le roi ennemi\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false;\n      }\n\n      // Gestion du roque\n      if (Piece.isKing(piece) && Math.abs(toX - fromX) === 2) {\n        if (this.isCastlingValid(piece, fromX, fromY, toX)) {\n          this.handleCastling(toX, fromY);\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      // Gestion de la prise en passant\n      if (\n        piece?.type === PieceType.PAWN &&\n        this.isEnPassantMove(fromX, fromY, toX, toY)\n      ) {\n        this.captureEnPassant(fromX, fromY, toX, toY); // Capture le pion en passant\n      }\n\n      // Sauvegarde l'état avant de simuler le mouvement\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Vérifie si le mouvement met le roi du joueur en échec\n      if (this.isKingInCheck(piece.color)) {\n        // Annule le mouvement si le roi est en échec\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = targetPiece;\n        return false;\n      }\n\n      // Mise à jour de l'état après un mouvement valide\n      if ('hasMoved' in piece) {\n        (piece as any).hasMoved = true;\n      }\n      this.updateEnPassantTarget(fromX, fromY, toX, toY, piece);\n\n      // Réinitialise le compteur pour la règle des 50 coups si un pion bouge ou une capture a lieu\n      this.halfMoveCount =\n        piece.type === PieceType.PAWN || targetPiece\n          ? 0\n          : this.halfMoveCount + 1;\n\n      // Vérifie si le mouvement met l'adversaire en échec et mat\n      const opponentColor =\n        piece.color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n      if (this.isCheckmate(opponentColor)) {\n        return true; // Partie terminée\n      }\n\n      return true;\n    }\n\n    return false; // Mouvement invalide\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    const rook = this.getPiece(rookX, fromY);\n\n    if (!(rook?.type === PieceType.ROOK) || rook.hasMoved || king.hasMoved)\n      return false;\n\n    // Vérifie que les cases entre le roi et la tour sont libres\n    for (let x = fromX + direction; x !== toX; x += direction) {\n      if (\n        this.getPiece(x, fromY) ||\n        this.isSquareUnderAttack(x, fromY, king.color)\n      ) {\n        return false;\n      }\n    }\n\n    return (\n      !this.isSquareUnderAttack(fromX, fromY, king.color) &&\n      !this.isSquareUnderAttack(toX, fromY, king.color)\n    );\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    // Déplacement pour le petit roque (roi se déplace vers la droite)\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      if (rook?.type === PieceType.ROOK) {\n        this.movePiece(7, kingY, 5, kingY);\n      }\n    }\n    // Déplacement pour le grand roque (roi se déplace vers la gauche)\n    else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      if (rook?.type === PieceType.ROOK) {\n        this.movePiece(0, kingY, 3, kingY);\n      }\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    if (\n      piece?.type === PieceType.PAWN &&\n      Math.abs(toY - fromY) === 2 &&\n      fromX === toX\n    ) {\n      // Si le pion avance de deux cases, configure la cible pour la prise en passant\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): { capturedWhite: PieceType[]; capturedBlack: PieceType[] } | null {\n    const piece = this.getPiece(fromX, fromY);\n\n    if (\n      this.isEnPassantMove(fromX, fromY, toX, toY) &&\n      piece?.type === PieceType.PAWN\n    ) {\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n      const capturedPawnY = toY + direction;\n      const capturedPawn = this.getPiece(toX, capturedPawnY);\n\n      if (capturedPawn && capturedPawn.type === PieceType.PAWN) {\n        this.grid[capturedPawnY][toX] = null;\n\n        // Déclare explicitement le type de captureData pour éviter l'erreur\n        const captureData: {\n          capturedWhite: PieceType[];\n          capturedBlack: PieceType[];\n        } = {\n          capturedWhite: [],\n          capturedBlack: [],\n        };\n\n        if (capturedPawn.color === PieceColor.WHITE) {\n          captureData.capturedWhite.push(capturedPawn.type);\n        } else {\n          captureData.capturedBlack.push(capturedPawn.type);\n        }\n\n        // Appelle updateCapturedPieces pour mettre à jour le DOM\n        updateCapturedPieces(capturedPawn.type, capturedPawn.color);\n\n        return captureData;\n      }\n    }\n    return null;\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n\n    // Vérifie que le mouvement cible la bonne case pour la prise en passant\n    const piece = this.getPiece(fromX, fromY);\n    return (\n      piece?.type === PieceType.PAWN &&\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      Math.abs(fromX - toX) === 1 &&\n      Math.abs(fromY - toY) === 1\n    );\n  }\n\n  public async promotePawn(\n    x: number,\n    y: number,\n    pieceType: string,\n  ): Promise<void> {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = await createPiece(PieceType.QUEEN, color);\n        break;\n      case 'rook':\n        this.grid[y][x] = await createPiece(PieceType.ROOK, color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = await createPiece(PieceType.BISHOP, color);\n        break;\n      case 'knight':\n        this.grid[y][x] = await createPiece(PieceType.KNIGHT, color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    if (!this.isKingInCheck(color)) {\n      return false; // Pas de mat si le roi n'est pas en échec\n    }\n\n    // Parcourt chaque pièce de la couleur donnée pour trouver un mouvement légal\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          const moves = this.getValidMoves(x, y);\n\n          for (const move of moves) {\n            // Simule le mouvement\n            const originalPiece = this.getPiece(move.x, move.y);\n            this.grid[move.y][move.x] = piece;\n            this.grid[y][x] = null;\n\n            const kingSafe = !this.isKingInCheck(color);\n\n            // Annule le mouvement simulé\n            this.grid[y][x] = piece;\n            this.grid[move.y][move.x] = originalPiece;\n\n            if (kingSafe) {\n              return false; // Un mouvement légal existe pour sortir de l'échec\n            }\n          }\n        }\n      }\n    }\n\n    return true; // Aucun mouvement possible, échec et mat\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    // Pat uniquement si le roi n'est pas en échec et qu'il n'y a aucun coup légal disponible\n    if (this.isKingInCheck(color)) return false;\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                // Simuler le mouvement pour vérifier l'échec potentiel\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const isKingSafe = !this.isKingInCheck(color);\n\n                // Annuler le mouvement simulé\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (isKingSafe) return false; // Mouvement valide trouvé, pas de pat\n              }\n            }\n          }\n        }\n      }\n    }\n    return true; // Aucun coup légal trouvé, pat détecté\n  }\n\n  private findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece?.type === PieceType.KING && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isKing(x: number, y: number): boolean {\n    const piece = this.getPiece(x, y);\n    return piece?.type === PieceType.KING;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n\n  // Vérifie si un mouvement est valide\n  public isMoveValid(\n    fromRow: number,\n    fromCol: number,\n    toRow: number,\n    toCol: number,\n  ): boolean {\n    const piece = this.getPiece(fromRow, fromCol);\n\n    // Si aucune pièce n'est présente à l'emplacement source, le mouvement est invalide\n    if (!piece) {\n      return false;\n    }\n\n    // Si la destination est en dehors de l'échiquier, mouvement invalide\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) {\n      return false;\n    }\n\n    // Vérifie si la pièce peut se déplacer à cette destination en utilisant la logique de mouvement de la pièce\n    if (!piece.isValidMove(fromRow, fromCol, toRow, toCol, this)) {\n      return false;\n    }\n\n    // Vérifie s'il y a une pièce à la destination et si elle est de la même couleur\n    const destinationPiece = this.getPiece(toRow, toCol);\n    return !(destinationPiece && destinationPiece.color === piece.color);\n  }\n\n  public isCapture(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const piece = this.isWithinBounds(fromX, fromY)\n      ? this.getPiece(fromX, fromY)\n      : null;\n    const targetPiece = this.isWithinBounds(toX, toY)\n      ? this.getPiece(toX, toY)\n      : null;\n\n    // Vérifie qu'il y a une pièce à la position cible et qu'elle est d'une couleur opposée\n    return (\n      piece !== null &&\n      targetPiece !== null &&\n      piece.color !== targetPiece.color\n    );\n  }\n\n  public static async fromData(data: any): Promise<Board> {\n    const board = new Board();\n    await board.init();\n    board.grid = await Promise.all(\n      data.grid.map(async (row: any[]) =>\n        Promise.all(\n          row.map(async (pieceData) =>\n            pieceData ? await Piece.fromData(pieceData) : null,\n          ),\n        ),\n      ),\n    );\n    return board;\n  }\n\n  public toData(): any {\n    return {\n      grid: this.grid.map((row) =>\n        row.map((piece) => (piece ? piece.toData() : null)),\n      ),\n    };\n  }\n\n  public isAdjacentToAnotherKing(\n    x: number,\n    y: number,\n    color: PieceColor,\n  ): boolean {\n    const kingPositions = [\n      { dx: -1, dy: -1 },\n      { dx: -1, dy: 0 },\n      { dx: -1, dy: 1 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: 1, dy: -1 },\n      { dx: 1, dy: 0 },\n      { dx: 1, dy: 1 },\n    ];\n\n    for (const { dx, dy } of kingPositions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      const piece = this.isWithinBounds(nx, ny) ? this.getPiece(nx, ny) : null;\n      if (piece?.type === PieceType.KING && piece.color !== color) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public clone(): Board {\n    const clonedBoard = new Board();\n    clonedBoard.grid = this.grid.map((row) =>\n      row.map((piece) =>\n        piece\n          ? Object.create(\n              Object.getPrototypeOf(piece),\n              Object.getOwnPropertyDescriptors(piece),\n            )\n          : null,\n      ),\n    );\n    clonedBoard.enPassantTarget = this.enPassantTarget\n      ? { ...this.enPassantTarget }\n      : null;\n    clonedBoard.halfMoveCount = this.halfMoveCount;\n    return clonedBoard;\n  }\n\n  public getPieceCount(): number {\n    return this.grid.flat().filter((piece) => piece !== null).length;\n  }\n\n  public isGameOver(): boolean {\n    // Vérifie l'échec et mat pour chaque couleur\n    if (\n      this.isCheckmate(PieceColor.WHITE) ||\n      this.isCheckmate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le pat pour chaque couleur\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le matériel insuffisant pour chaque couleur\n    if (this.isInsufficientMaterial()) {\n      return true;\n    }\n\n    // Vérifie si la règle des 50 coups est atteinte\n    return this.isFiftyMoveRule();\n  }\n\n  public getWinner(): PieceColor | null {\n    // Si c'est un échec et mat pour les Noirs, Blancs gagnent\n    if (this.isCheckmate(PieceColor.BLACK)) {\n      return PieceColor.WHITE;\n    }\n\n    // Si c'est un échec et mat pour les Blancs, Noirs gagnent\n    if (this.isCheckmate(PieceColor.WHITE)) {\n      return PieceColor.BLACK;\n    }\n\n    // Si c'est un pat, une égalité par matériel insuffisant, ou la règle des 50 coups, la partie est nulle\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK) ||\n      this.isInsufficientMaterial() ||\n      this.isFiftyMoveRule()\n    ) {\n      return null;\n    }\n\n    return null; // Retourne null si le jeu n'est pas encore terminé\n  }\n\n  public getPieces(): Piece[] {\n    return this.grid.flat().filter((piece): piece is Piece => piece !== null);\n  }\n}\n","// src/evaluator.ts\nimport { Board } from './board';\nimport { PieceColor, PieceType } from './piece';\n\n// Valeurs des pièces (évaluation de base)\nconst pieceValues: { [key in PieceType]: number } = {\n  [PieceType.PAWN]: 1,\n  [PieceType.KNIGHT]: 3,\n  [PieceType.BISHOP]: 3.25,\n  [PieceType.ROOK]: 5,\n  [PieceType.QUEEN]: 9,\n  [PieceType.KING]: 0,\n};\n\n// Tables de positions pour améliorer l'évaluation\nconst pieceSquareTables: { [key in PieceType]: number[][] } = {\n  [PieceType.PAWN]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1],\n    [0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05],\n    [0, 0, 0, 0.2, 0.2, 0, 0, 0],\n    [0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05],\n    [0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  [PieceType.KNIGHT]: [\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n    [-0.4, -0.2, 0, 0, 0, 0, -0.2, -0.4],\n    [-0.3, 0, 0.1, 0.15, 0.15, 0.1, 0, -0.3],\n    [-0.3, 0.05, 0.15, 0.2, 0.2, 0.15, 0.05, -0.3],\n    [-0.3, 0, 0.15, 0.2, 0.2, 0.15, 0, -0.3],\n    [-0.3, 0.05, 0.1, 0.15, 0.15, 0.1, 0.05, -0.3],\n    [-0.4, -0.2, 0, 0.05, 0.05, 0, -0.2, -0.4],\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n  ],\n  [PieceType.BISHOP]: [\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, -0.1],\n    [-0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, -0.1],\n    [-0.1, 0, 0.1, 0.1, 0.1, 0.1, 0, -0.1],\n    [-0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -0.1],\n    [-0.1, 0.05, 0, 0, 0, 0, 0.05, -0.1],\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.ROOK]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [0, 0, 0, 0.05, 0.05, 0, 0, 0],\n  ],\n  [PieceType.QUEEN]: [\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.05, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [0, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [-0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.1, 0, 0.05, 0, 0, 0, 0, -0.1],\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.KING]: [\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2],\n    [-0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1],\n    [0.2, 0.2, 0, 0, 0, 0, 0.2, 0.2],\n    [0.2, 0.3, 0, 0, 0, 0, 0.3, 0.2],\n  ],\n};\n\n// Bonus pour le contrôle du centre du plateau (cases centrales plus précieuses)\nexport const centerControlBonus: { [key: string]: number } = {\n  '3,3': 0.5,\n  '3,4': 0.5,\n  '4,3': 0.5,\n  '4,4': 0.5, // Cases centrales\n  '2,3': 0.25,\n  '2,4': 0.25,\n  '3,2': 0.25,\n  '4,2': 0.25,\n  '4,5': 0.25,\n  '3,5': 0.25,\n  '5,3': 0.25,\n  '5,4': 0.25, // Cases autour\n};\n\n// Fonction d'évaluation principale\nexport function evaluateBoard(board: Board, color: PieceColor): number {\n  let score = 0;\n\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece) {\n        let pieceScore = pieceValues[piece.type];\n\n        // Appliquer les tables de position selon le type de pièce\n        const pieceTable = pieceSquareTables[piece.type];\n        if (pieceTable) {\n          pieceScore += pieceTable[y][x];\n        }\n\n        // Contrôle du centre du plateau\n        const positionKey = `${x},${y}`;\n        if (centerControlBonus[positionKey]) {\n          pieceScore += centerControlBonus[positionKey];\n        }\n\n        // Structure des pions pour vérifier les pions passés\n        if (piece.type === PieceType.PAWN) {\n          pieceScore += evaluatePawnStructure(board, x, y, piece.color);\n          if (isPassedPawn(board, x, y, piece.color)) {\n            pieceScore += 1.0; // Bonus pour les pions passés\n          }\n        }\n\n        // Vérifier si le roi est exposé\n        if (\n          piece.type === PieceType.KING &&\n          isKingExposed(board, x, y, piece.color)\n        ) {\n          pieceScore -= 0.5; // Réduction pour les rois exposés\n        }\n\n        score += piece.color === color ? pieceScore : -pieceScore;\n      }\n    }\n  }\n\n  return score;\n}\n\n// Évaluer la structure des pions\nfunction evaluatePawnStructure(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  let score = 0;\n\n  // Vérifier les pions doublés et isolés avec une pénalité plus importante\n  score -= checkDoubledPawns(board, x, y, color) * 1.5; // Pénalité augmentée pour les pions doublés\n  score -= checkIsolatedPawns(board, x, y, color) * 1.5; // Pénalité augmentée pour les pions isolés\n\n  return score;\n}\n\nfunction checkDoubledPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  for (let i = 0; i < 8; i++) {\n    if (\n      i !== y &&\n      board.getPiece(x, i)?.type === PieceType.PAWN &&\n      board.getPiece(x, i)?.color === color\n    ) {\n      return 0.5;\n    }\n  }\n  return 0;\n}\n\nfunction checkIsolatedPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const leftColumn = x - 1 >= 0 ? board.getPiece(x - 1, y) : null;\n  const rightColumn = x + 1 < 8 ? board.getPiece(x + 1, y) : null;\n\n  if (\n    (!leftColumn ||\n      leftColumn.type !== PieceType.PAWN ||\n      leftColumn.color !== color) &&\n    (!rightColumn ||\n      rightColumn.type !== PieceType.PAWN ||\n      rightColumn.color !== color)\n  ) {\n    return 1.5; // Augmentation de la pénalité pour les pions isolés\n  }\n\n  return 0;\n}\n\nfunction isKingExposed(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): boolean {\n  const piece = board.getPiece(x, y);\n  if (piece && piece.type === PieceType.KING) {\n    const surroundingSquares = [\n      { dx: -1, dy: 0 },\n      { dx: 1, dy: 0 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: -1, dy: -1 },\n      { dx: 1, dy: 1 },\n      { dx: -1, dy: 1 },\n      { dx: 1, dy: -1 },\n    ];\n\n    return surroundingSquares.some(({ dx, dy }) => {\n      const newX = x + dx;\n      const newY = y + dy;\n\n      if (board.isWithinBounds(newX, newY)) {\n        const adjPiece = board.getPiece(newX, newY);\n        return (\n          !adjPiece || // Case vide\n          adjPiece.color !== color || // Pièce ennemie\n          adjPiece.type !== PieceType.PAWN // Pas de pion pour protéger\n        );\n      }\n      return true; // Case hors limites, expose le roi\n    });\n  }\n  return false;\n}\n\nfunction isPassedPawn(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): boolean {\n  const direction = color === PieceColor.WHITE ? -1 : 1;\n\n  for (let i = y + direction; i >= 0 && i < 8; i += direction) {\n    const pieceInFront = board.getPiece(x, i);\n    if (\n      pieceInFront &&\n      pieceInFront.type === PieceType.PAWN &&\n      pieceInFront.color !== color\n    ) {\n      return false;\n    }\n  }\n\n  // Vérifier s'il y a des pions alliés sur les colonnes adjacentes\n  const adjacentColumns = [x - 1, x + 1];\n  return adjacentColumns.every((col) => {\n    if (col < 0 || col >= 8) return true;\n    for (let i = 0; i < 8; i++) {\n      const adjacentPiece = board.getPiece(col, i);\n      if (\n        adjacentPiece &&\n        adjacentPiece.type === PieceType.PAWN &&\n        adjacentPiece.color === color\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n","// src/endgameTablebase.ts\nimport { Board } from './board';\nimport { PieceColor, PieceType } from './piece';\n\ntype Move = { fromX: number; fromY: number; toX: number; toY: number };\n\n// Retourne un mouvement optimal pour une fin de partie classique si disponible\nexport function getEndgameMove(board: Board, color: PieceColor): Move | null {\n  const pieces = board.getPieces();\n\n  // Roi + Tour contre Roi\n  if (\n    pieces.length === 3 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.ROOK, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    return getKingRookVsKingMove(board, color);\n  }\n\n  // Roi + Fou + Cavalier contre Roi\n  if (\n    pieces.length === 4 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.BISHOP, color) &&\n    hasPiece(pieces, PieceType.KNIGHT, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    return getKingBishopKnightVsKingMove(board, color);\n  }\n\n  // Roi + deux Fous contre Roi\n  if (\n    pieces.length === 4 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.BISHOP, color) &&\n    pieces.filter(\n      (piece) => piece.type === PieceType.BISHOP && piece.color === color,\n    ).length === 2 &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    return getKingTwoBishopsVsKingMove(board, color);\n  }\n\n  // Roi + Pion contre Roi (pour promotion)\n  if (\n    pieces.length === 3 &&\n    hasPiece(pieces, PieceType.KING, color) &&\n    hasPiece(pieces, PieceType.PAWN, color) &&\n    hasPiece(pieces, PieceType.KING, getOpponentColor(color))\n  ) {\n    return getKingPawnVsKingMove(board, color);\n  }\n\n  return null; // Aucun mouvement de fin de partie trouvé\n}\n\n// Fonction utilitaire pour vérifier la présence d'une pièce spécifique\nfunction hasPiece(pieces: any[], type: PieceType, color: PieceColor): boolean {\n  return pieces.some((piece) => piece.type === type && piece.color === color);\n}\n\n// Renvoie l'autre couleur\nfunction getOpponentColor(color: PieceColor): PieceColor {\n  return color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n}\n\n// Génère un mouvement optimal pour Roi + Tour contre Roi\nfunction getKingRookVsKingMove(board: Board, color: PieceColor): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const rookPos = findPiecePosition(board, PieceType.ROOK, color);\n\n  if (!opponentKingPos || !rookPos) return null;\n\n  // Exemple : pousse la tour pour bloquer le roi adverse dans un coin\n  if (opponentKingPos.x < 4) {\n    return {\n      fromX: rookPos.x,\n      fromY: rookPos.y,\n      toX: opponentKingPos.x + 1,\n      toY: opponentKingPos.y,\n    };\n  } else {\n    return {\n      fromX: rookPos.x,\n      fromY: rookPos.y,\n      toX: opponentKingPos.x - 1,\n      toY: opponentKingPos.y,\n    };\n  }\n}\n\n// Génère un mouvement optimal pour Roi + Fou + Cavalier contre Roi\nfunction getKingBishopKnightVsKingMove(\n  board: Board,\n  color: PieceColor,\n): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const knightPos = findPiecePosition(board, PieceType.KNIGHT, color);\n  const bishopPos = findPiecePosition(board, PieceType.BISHOP, color);\n\n  if (!opponentKingPos || !knightPos || !bishopPos) return null;\n\n  // Exemple : pousse le cavalier et le fou pour rapprocher le roi adverse vers un coin\n  if (opponentKingPos.x < 4) {\n    return {\n      fromX: knightPos.x,\n      fromY: knightPos.y,\n      toX: opponentKingPos.x + 1,\n      toY: opponentKingPos.y,\n    };\n  } else {\n    return {\n      fromX: bishopPos.x,\n      fromY: bishopPos.y,\n      toX: opponentKingPos.x - 1,\n      toY: opponentKingPos.y,\n    };\n  }\n}\n\n// Génère un mouvement optimal pour Roi + deux Fous contre Roi\nfunction getKingTwoBishopsVsKingMove(\n  board: Board,\n  color: PieceColor,\n): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const bishops = findAllPiecesPositions(board, PieceType.BISHOP, color);\n\n  if (!opponentKingPos || bishops.length < 2) return null;\n\n  // Les deux fous coordonnent pour forcer le roi adverse vers un coin\n  return {\n    fromX: bishops[0].x,\n    fromY: bishops[0].y,\n    toX: opponentKingPos.x,\n    toY: opponentKingPos.y > 4 ? opponentKingPos.y - 1 : opponentKingPos.y + 1,\n  };\n}\n\n// Génère un mouvement optimal pour Roi + Pion contre Roi (promotion)\nfunction getKingPawnVsKingMove(board: Board, color: PieceColor): Move | null {\n  const opponentKingPos = findPiecePosition(\n    board,\n    PieceType.KING,\n    getOpponentColor(color),\n  );\n  const pawnPos = findPiecePosition(board, PieceType.PAWN, color);\n\n  if (!opponentKingPos || !pawnPos) return null;\n\n  // Pousse le pion vers la promotion (vers la 8ème rangée pour les Blancs, 1ère pour les Noirs)\n  const direction = color === PieceColor.WHITE ? 1 : -1;\n  return {\n    fromX: pawnPos.x,\n    fromY: pawnPos.y,\n    toX: pawnPos.x,\n    toY: pawnPos.y + direction,\n  };\n}\n\n// Fonction utilitaire pour trouver la position d'une pièce spécifique\nfunction findPiecePosition(\n  board: Board,\n  pieceType: PieceType,\n  color: PieceColor,\n): { x: number; y: number } | null {\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece && piece.type === pieceType && piece.color === color) {\n        return { x, y };\n      }\n    }\n  }\n  return null;\n}\n\n// Fonction utilitaire pour trouver toutes les positions d'un type de pièce\nfunction findAllPiecesPositions(\n  board: Board,\n  pieceType: PieceType,\n  color: PieceColor,\n): { x: number; y: number }[] {\n  const positions = [];\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece && piece.type === pieceType && piece.color === color) {\n        positions.push({ x, y });\n      }\n    }\n  }\n  return positions;\n}\n","// src/openingBook.ts\n\nexport const openingBook: {\n  [key: string]: { fromX: number; fromY: number; toX: number; toY: number }[];\n} = {\n  // Ouverture Ruy Lopez\n  'e2e4 e7e5 g1f3 b8c6 f1b5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 5, fromY: 7, toX: 1, toY: 5 }, // f1b5\n  ],\n\n  // Défense Sicilienne\n  'e2e4 c7c5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 3 }, // c7c5\n  ],\n  'e2e4 c7c5 g1f3 d7d6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 3 }, // c7c5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 3, fromY: 1, toX: 3, toY: 2 }, // d7d6\n  ],\n\n  // Gambit de la Reine\n  'd2d4 d7d5 c2c4': [\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n    { fromX: 2, fromY: 6, toX: 2, toY: 4 }, // c2c4\n  ],\n\n  // Défense Caro-Kann\n  'e2e4 c7c6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 2 }, // c7c6\n  ],\n  'e2e4 c7c6 d2d4 d7d5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 2, fromY: 1, toX: 2, toY: 2 }, // c7c6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n\n  // Défense Française\n  'e2e4 e7e6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 2 }, // e7e6\n  ],\n  'e2e4 e7e6 d2d4 d7d5': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 2 }, // e7e6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n\n  // Partie Italienne\n  'e2e4 e7e5 g1f3 b8c6 f1c4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 5, fromY: 7, toX: 2, toY: 4 }, // f1c4\n  ],\n\n  // Défense Alekhine\n  'e2e4 g8f6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 6, fromY: 0, toX: 5, toY: 2 }, // g8f6\n  ],\n\n  // Défense Pirc\n  'e2e4 d7d6': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 3, fromY: 1, toX: 3, toY: 2 }, // d7d6\n  ],\n\n  // Partie Écossaise\n  'e2e4 e7e5 g1f3 b8c6 d2d4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 1, fromY: 0, toX: 2, toY: 2 }, // b8c6\n    { fromX: 3, fromY: 6, toX: 3, toY: 4 }, // d2d4\n  ],\n\n  // Gambit du Roi\n  'e2e4 e7e5 f2f4': [\n    { fromX: 4, fromY: 6, toX: 4, toY: 4 }, // e2e4\n    { fromX: 4, fromY: 1, toX: 4, toY: 3 }, // e7e5\n    { fromX: 5, fromY: 6, toX: 5, toY: 4 }, // f2f4\n  ],\n\n  // Ouverture anglaise\n  c2c4: [\n    { fromX: 2, fromY: 6, toX: 2, toY: 4 }, // c2c4\n  ],\n\n  // Ouverture Réti\n  'g1f3 d7d5': [\n    { fromX: 6, fromY: 7, toX: 5, toY: 5 }, // g1f3\n    { fromX: 3, fromY: 1, toX: 3, toY: 3 }, // d7d5\n  ],\n};\n","// src/ai.ts\nimport { Board } from './board';\nimport { PieceColor, PieceType, Piece } from './piece';\nimport { evaluateBoard, centerControlBonus } from './evaluator';\nimport { getEndgameMove } from './endgameTablebase';\nimport { openingBook } from './openingBook';\n\n// Classe AI utilisant l'algorithme Minimax avec Alpha-Beta Pruning et Transposition Table\nexport class AI {\n  private openingMoves: {\n    [key: string]: { fromX: number; fromY: number; toX: number; toY: number }[];\n  } = openingBook;\n  private transpositionTable: Map<string, number>; // Table de transposition\n  private readonly maxTime: number; // Temps maximum de réflexion en millisecondes\n  private startTime: number; // Temps de début pour gestion du temps\n  private readonly killerMoves: Map<\n    number,\n    {\n      move: { fromX: number; fromY: number; toX: number; toY: number };\n      score: number;\n    }[]\n  >; // Heuristic des coups efficaces\n\n  constructor(\n    private color: PieceColor,\n    maxTime: number = 5000,\n  ) {\n    this.transpositionTable = new Map();\n    this.maxTime = maxTime;\n    this.killerMoves = new Map();\n    this.startTime = 0;\n  }\n\n  // Méthode principale pour faire un mouvement\n  public makeMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const openingMove = this.getOpeningMove(board);\n    if (openingMove) {\n      return openingMove;\n    }\n\n    // Vérifie si on peut utiliser une table de fin de partie\n    const endgameMove = this.useEndgameTablebase(board);\n    if (endgameMove) {\n      return endgameMove;\n    }\n\n    // Détermine si MCTS est pertinent pour la position actuelle\n    if (this.shouldUseMCTS(board)) {\n      return this.mcts(board); // Utilise MCTS pour les positions complexes ou de fin de partie\n    }\n\n    // Si MCTS n'est pas utilisé, continue avec Minimax\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const maxDepth = 10; // Augmentation de la profondeur maximale de recherche\n    this.startTime = Date.now();\n\n    for (let depth = 1; depth <= maxDepth; depth++) {\n      let moves = this.getAllValidMoves(board);\n\n      // Trie les mouvements pour optimiser la recherche\n      moves = this.sortMoves(moves, board, depth);\n\n      for (const move of moves) {\n        const piece = board.getPiece(move.fromX, move.fromY);\n        if (!piece) continue;\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n\n        const isCritical =\n          board.isKingInCheck(this.color) ||\n          this.isCriticalMove(piece, move, board);\n        const adjustedDepth = isCritical ? depth + 1 : depth;\n\n        // Appelle la recherche Minimax avec Alpha-Beta Pruning\n        const boardValue = this.minimax(\n          board,\n          adjustedDepth - 1,\n          -Infinity,\n          Infinity,\n          false,\n        );\n\n        board.setPiece(move.fromX, move.fromY, piece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        if (boardValue > bestValue) {\n          bestValue = boardValue;\n          bestMove = move;\n        }\n\n        // Limite le temps de réflexion\n        if (Date.now() - this.startTime > this.maxTime) {\n          break;\n        }\n      }\n\n      // Limite le temps de réflexion\n      if (Date.now() - this.startTime > this.maxTime) {\n        break;\n      }\n    }\n\n    return bestMove;\n  }\n\n  // Fonction Minimax avec Alpha-Beta Pruning et table de transposition\n  private minimax(\n    board: Board,\n    depth: number,\n    alpha: number,\n    beta: number,\n    isMaximizing: boolean,\n  ): number {\n    const boardKey = board.toString();\n\n    // Vérifie le temps limite\n    if (Date.now() - this.startTime > this.maxTime) {\n      return evaluateBoard(board, this.color);\n    }\n\n    // Vérifie si le résultat est déjà dans la table de transposition\n    if (this.transpositionTable.has(boardKey)) {\n      return this.transpositionTable.get(boardKey)!;\n    }\n\n    // Null Move Pruning : Effectue un coup nul pour voir si une menace est évidente\n    if (depth > 1 && !board.isKingInCheck(this.color)) {\n      const nullMoveEval = -this.minimax(\n        board,\n        depth - 2,\n        -beta,\n        -alpha,\n        !isMaximizing,\n      );\n      if (nullMoveEval >= beta) {\n        return beta; // Coupe si le coup nul montre une menace\n      }\n    }\n\n    // Condition de fin de récursion\n    if (\n      depth === 0 ||\n      board.isCheckmate(this.color) ||\n      board.isCheckmate(this.getOpponentColor()) ||\n      Date.now() - this.startTime > this.maxTime\n    ) {\n      const evaluation = this.quiescenceSearch(board, alpha, beta);\n      this.transpositionTable.set(boardKey, evaluation);\n      return evaluation;\n    }\n\n    if (isMaximizing) {\n      let maxEval = -Infinity;\n      let moves = this.getAllValidMoves(board);\n      moves = this.sortMoves(moves, board, depth);\n\n      for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        // Late Move Reduction : Réduit la profondeur pour les coups tardifs\n        const shouldReduce = i > 3 && depth > 2;\n        const newDepth = shouldReduce ? depth - 1 : depth;\n\n        // Extension : Allonge la profondeur pour les échecs et poussées de pions\n        const isCheck = board.isKingInCheck(this.color);\n        const isPawnPush =\n          fromPiece &&\n          fromPiece.type === PieceType.PAWN &&\n          (move.toY === 0 || move.toY === 7);\n        const extendedDepth = isCheck || isPawnPush ? newDepth + 1 : newDepth;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evaluation = this.minimax(\n          board,\n          extendedDepth - 1,\n          alpha,\n          beta,\n          false,\n        );\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        maxEval = Math.max(maxEval, evaluation);\n        alpha = Math.max(alpha, evaluation);\n\n        if (beta <= alpha) {\n          this.addKillerMove(depth, move);\n          break;\n        }\n      }\n\n      this.transpositionTable.set(boardKey, maxEval);\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      let moves = this.getAllValidMoves(board);\n      moves = this.sortMoves(moves, board, depth);\n\n      for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        // Late Move Reduction : Réduit la profondeur pour les coups tardifs\n        const shouldReduce = i > 3 && depth > 2;\n        const newDepth = shouldReduce ? depth - 1 : depth;\n\n        // Extension : Allonge la profondeur pour les échecs et poussées de pions\n        const isCheck = board.isKingInCheck(this.getOpponentColor());\n        const isPawnPush =\n          fromPiece &&\n          fromPiece.type === PieceType.PAWN &&\n          (move.toY === 0 || move.toY === 7);\n        const extendedDepth = isCheck || isPawnPush ? newDepth + 1 : newDepth;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evaluation = this.minimax(\n          board,\n          extendedDepth - 1,\n          alpha,\n          beta,\n          true,\n        );\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        minEval = Math.min(minEval, evaluation);\n        beta = Math.min(beta, evaluation);\n\n        if (beta <= alpha) {\n          this.addKillerMove(depth, move);\n          break;\n        }\n      }\n\n      this.transpositionTable.set(boardKey, minEval);\n      return minEval;\n    }\n  }\n\n  // Ajout d'un coup prometteur dans les killer moves\n  private addKillerMove(\n    depth: number,\n    move: { fromX: number; fromY: number; toX: number; toY: number },\n  ) {\n    const killers = this.killerMoves.get(depth) || [];\n    const existingMove = killers.find(\n      (k) =>\n        k.move.fromX === move.fromX &&\n        k.move.fromY === move.fromY &&\n        k.move.toX === move.toX &&\n        k.move.toY === move.toY,\n    );\n\n    if (existingMove) {\n      existingMove.score += 1;\n    } else {\n      killers.push({ move, score: 1 });\n    }\n\n    killers.sort((a, b) => b.score - a.score);\n    this.killerMoves.set(depth, killers);\n  }\n\n  // Recherche de quiescence pour améliorer l'évaluation des positions\n  private quiescenceSearch(\n    board: Board,\n    alpha: number,\n    beta: number,\n    depth: number = 0,\n  ): number {\n    const maxQuiescenceDepth = 10;\n\n    if (depth >= maxQuiescenceDepth) {\n      return evaluateBoard(board, this.color);\n    }\n\n    const standPat = evaluateBoard(board, this.color);\n    if (standPat >= beta) return beta;\n    if (alpha < standPat) alpha = standPat;\n\n    const moves = this.getAllValidMoves(board).filter((move) =>\n      board.isCapture(move.fromX, move.fromY, move.toX, move.toY),\n    );\n\n    for (const move of moves) {\n      const fromPiece = board.getPiece(move.fromX, move.fromY);\n      const toPiece = board.getPiece(move.toX, move.toY);\n\n      board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n      const kingSafe = !board.isKingInCheck(this.color);\n\n      if (kingSafe) {\n        const score = -this.quiescenceSearch(board, -beta, -alpha, depth + 1);\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        if (score >= beta) return beta;\n        if (score > alpha) alpha = score;\n      } else {\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n      }\n    }\n\n    return alpha;\n  }\n\n  private getOpponentColor(): PieceColor {\n    return this.color === PieceColor.WHITE\n      ? PieceColor.BLACK\n      : PieceColor.WHITE;\n  }\n\n  private getAllValidMoves(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number }[] {\n    const validMoves = [];\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n\n        if (piece && piece.color === this.color) {\n          const moves = board.getValidMoves(x, y);\n\n          for (const move of moves) {\n            if (board.isMoveValid(x, y, move.x, move.y)) {\n              const originalPiece = board.getPiece(move.x, move.y);\n              board.setPiece(move.x, move.y, piece);\n              board.setPiece(x, y, null);\n\n              const kingSafe = !board.isKingInCheck(this.color);\n\n              board.setPiece(x, y, piece);\n              board.setPiece(move.x, move.y, originalPiece);\n\n              if (kingSafe) {\n                validMoves.push({\n                  fromX: x,\n                  fromY: y,\n                  toX: move.x,\n                  toY: move.y,\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  private sortMoves(\n    moves: { fromX: number; fromY: number; toX: number; toY: number }[],\n    board: Board,\n    depth: number,\n  ): { fromX: number; fromY: number; toX: number; toY: number }[] {\n    return moves.sort((a, b) => {\n      const killerMovesAtDepth = this.killerMoves.get(depth);\n\n      if (\n        killerMovesAtDepth &&\n        killerMovesAtDepth.some(\n          (move: {\n            move: { fromX: number; fromY: number; toX: number; toY: number };\n          }) => move.move.fromX === a.fromX && move.move.fromY === a.fromY,\n        )\n      ) {\n        return -1;\n      }\n\n      const pieceA = board.getPiece(a.toX, a.toY);\n      const pieceB = board.getPiece(b.toX, b.toY);\n\n      if (pieceA && !pieceB) return -1;\n      if (!pieceA && pieceB) return 1;\n\n      const centerControlA = centerControlBonus[`${a.toX},${a.toY}`] || 0;\n      const centerControlB = centerControlBonus[`${b.toX},${b.toY}`] || 0;\n\n      return centerControlB - centerControlA;\n    });\n  }\n\n  // Algorithme MCTS pour évaluer des positions complexes ou de fin de partie\n  private mcts(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const iterations = 1000; // Nombre de simulations\n    const moveScores: Map<string, number> = new Map();\n    const validMoves = this.getAllValidMoves(board);\n\n    for (let i = 0; i < iterations; i++) {\n      const move = validMoves[Math.floor(Math.random() * validMoves.length)];\n\n      // Vérifie que toutes les propriétés de move sont bien définies\n      if (\n        !move ||\n        move.fromX === undefined ||\n        move.fromY === undefined ||\n        move.toX === undefined ||\n        move.toY === undefined\n      ) {\n        continue;\n      }\n\n      const simulationResult = this.simulateRandomGame(board, move);\n\n      const moveKey = `${move.fromX},${move.fromY},${move.toX},${move.toY}`;\n      moveScores.set(\n        moveKey,\n        (moveScores.get(moveKey) || 0) + simulationResult,\n      );\n    }\n\n    // Vérifie si moveScores est vide avant d'utiliser reduce\n    if (moveScores.size === 0) {\n      return null; // Aucun mouvement valide trouvé\n    }\n\n    // Sélectionne le mouvement avec la meilleure note moyenne\n    const bestMoveKey = Array.from(moveScores.entries()).reduce(\n      (best, current) => {\n        return current[1] > best[1] ? current : best;\n      },\n    )[0];\n\n    const [fromX, fromY, toX, toY] = bestMoveKey.split(',').map(Number);\n    return { fromX, fromY, toX, toY };\n  }\n\n  // Simule une partie aléatoire pour obtenir une estimation du résultat\n  private simulateRandomGame(\n    board: Board,\n    move: { fromX: number; fromY: number; toX: number; toY: number },\n  ): number {\n    // Vérifie que toutes les propriétés de move sont définies\n    if (\n      !move ||\n      move.fromX === undefined ||\n      move.fromY === undefined ||\n      move.toX === undefined ||\n      move.toY === undefined\n    ) {\n      console.error('Invalid move:', move);\n      return 0; // Retourne 0 ou une autre valeur par défaut si le mouvement est invalide\n    }\n\n    const tempBoard = board.clone();\n    tempBoard.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n    let currentPlayer = this.color;\n    let moves = this.getAllValidMoves(tempBoard);\n\n    while (!tempBoard.isGameOver() && moves.length > 0) {\n      const randomMove = moves[Math.floor(Math.random() * moves.length)];\n\n      // Vérifie que le mouvement aléatoire est valide\n      if (\n        !randomMove ||\n        randomMove.fromX === undefined ||\n        randomMove.fromY === undefined ||\n        randomMove.toX === undefined ||\n        randomMove.toY === undefined\n      ) {\n        console.error('Invalid random move:', randomMove);\n        break;\n      }\n\n      tempBoard.movePiece(\n        randomMove.fromX,\n        randomMove.fromY,\n        randomMove.toX,\n        randomMove.toY,\n      );\n      currentPlayer =\n        currentPlayer === PieceColor.WHITE\n          ? PieceColor.BLACK\n          : PieceColor.WHITE;\n      moves = this.getAllValidMoves(tempBoard);\n    }\n\n    // Retourne un score basé sur le résultat de la partie simulée\n    return tempBoard.getWinner() === this.color\n      ? 1\n      : tempBoard.getWinner() === null\n        ? 0.5\n        : 0;\n  }\n\n  // Détermine quand utiliser MCTS\n  private shouldUseMCTS(board: Board): boolean {\n    return board.getPieceCount() <= 10; // Par exemple, utilise MCTS pour la fin de partie\n  }\n\n  // Fonction de détection et d'application des tables de fin de partie\n  private useEndgameTablebase(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    if (board.getPieceCount() <= 4) {\n      // Condition pour appliquer les tables de fin de partie\n      return getEndgameMove(board, this.color); // Utilise une table de fin de partie externe\n    }\n    return null;\n  }\n\n  // Fonction pour identifier les mouvements critiques\n  private isCriticalMove(\n    piece: Piece,\n    move: {\n      fromX: number;\n      fromY: number;\n      toX: number;\n      toY: number;\n    },\n    board: Board,\n  ): boolean {\n    // Considère les captures et les coups qui mettent en échec comme critiques\n    const targetPiece = board.getPiece(move.toX, move.toY);\n    return (\n      (targetPiece && targetPiece.color !== piece.color) ||\n      board.isKingInCheck(piece.color)\n    );\n  }\n\n  // Méthode pour trouver le mouvement d'ouverture\n  private getOpeningMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    const boardHash = this.getBoardHash(board);\n\n    if (this.openingMoves[boardHash]) {\n      return this.openingMoves[boardHash][0]; // Récupère le premier mouvement d'ouverture correspondant\n    }\n\n    return null; // Aucun mouvement d'ouverture trouvé\n  }\n\n  // Génération d'un identifiant de position simplifié pour le dictionnaire d'ouverture\n  private getBoardHash(board: Board): string {\n    let hash = '';\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n        if (piece) {\n          const pieceCode =\n            piece.color === PieceColor.WHITE\n              ? piece.type\n              : piece.type.toLowerCase();\n          hash += pieceCode + x + y + ' ';\n        }\n      }\n    }\n    return hash.trim();\n  }\n}\n","// ai.worker.ts\nimport { Board } from './board';\nimport { AI } from './ai';\nimport { PieceColor, PieceType } from './piece';\n\nconst ai = new AI(PieceColor.BLACK);\n\nself.onmessage = async (event) => {\n  const { boardData } = event.data;\n  const board = await Board.fromData(boardData);\n\n  const bestMove = ai.makeMove(board);\n\n  // Définit explicitement le type de captureData\n  let captureData: {\n    capturedWhite: PieceType[];\n    capturedBlack: PieceType[];\n  } | null = null;\n\n  if (\n    bestMove &&\n    board.isCapture(bestMove.fromX, bestMove.fromY, bestMove.toX, bestMove.toY)\n  ) {\n    const targetPiece = board.getPiece(bestMove.toX, bestMove.toY);\n    if (targetPiece) {\n      captureData = {\n        capturedWhite: [],\n        capturedBlack: [],\n      };\n      // Remplissage du tableau de capture selon la couleur de la pièce capturée\n      if (targetPiece.color === PieceColor.WHITE) {\n        captureData.capturedWhite.push(targetPiece.type);\n      } else {\n        captureData.capturedBlack.push(targetPiece.type);\n      }\n    }\n  }\n\n  self.postMessage({ bestMove, captureData });\n};\n"],"names":["PieceColor","PieceType"],"mappings":"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"}