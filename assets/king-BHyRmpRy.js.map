{"version":3,"file":"king-BHyRmpRy.js","sources":["../src/pieces/king.ts"],"sourcesContent":["import { BoardInterface, Piece, PieceColor, PieceType } from '../piece';\n\nexport class King extends Piece {\n  public hasMoved: boolean = false;\n  public readonly type: PieceType = PieceType.KING;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.KING);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n\n    // Mouvement classique du roi\n    if (dx <= 1 && dy <= 1) {\n      return (\n        this.canCapture(toX, toY, board) &&\n        !board.isAdjacentToAnotherKing(toX, toY, this.color)\n      );\n    }\n\n    // Roque : si roi et tour n'ont pas bougé, la voie est libre et non attaquée\n    if (!this.hasMoved && dy === 0 && dx === 2) {\n      const direction = toX > fromX ? 1 : -1;\n      const rookX = toX > fromX ? 7 : 0;\n      const rook = board.getPiece(rookX, fromY);\n\n      if (rook && rook?.type === PieceType.ROOK && !rook.hasMoved) {\n        for (let x = fromX + direction; x !== toX; x += direction) {\n          if (\n            board.getPiece(x, fromY) ||\n            board.isSquareUnderAttack(x, fromY, this.color)\n          ) {\n            return false;\n          }\n        }\n        return (\n          !board.isSquareUnderAttack(toX, fromY, this.color) &&\n          !board.isAdjacentToAnotherKing(toX, toY, this.color)\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"],"names":[],"mappings":";;AAEO,MAAM,aAAa,KAAM,CAAA;AAAA,EACvB,QAAoB,GAAA,KAAA,CAAA;AAAA,EACX,OAAkB,SAAU,CAAA,IAAA,CAAA;AAAA,EAE5C,YAAY,KAAmB,EAAA;AAC7B,IAAM,KAAA,CAAA,KAAA,EAAO,UAAU,IAAI,CAAA,CAAA;AAAA,GAC7B;AAAA,EAEA,WACE,CAAA,KAAA,EACA,KACA,EAAA,GAAA,EACA,KACA,KACS,EAAA;AACT,IAAA,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,CAAA,CAAA;AAC/B,IAAA,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,CAAA,CAAA;AAG/B,IAAI,IAAA,EAAA,IAAM,CAAK,IAAA,EAAA,IAAM,CAAG,EAAA;AACtB,MAAA,OACE,IAAK,CAAA,UAAA,CAAW,GAAK,EAAA,GAAA,EAAK,KAAK,CAAA,IAC/B,CAAC,KAAA,CAAM,uBAAwB,CAAA,GAAA,EAAK,GAAK,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,KAEvD;AAGA,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA,IAAY,EAAO,KAAA,CAAA,IAAK,OAAO,CAAG,EAAA;AAC1C,MAAM,MAAA,SAAA,GAAY,GAAM,GAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,CAAA,CAAA;AACpC,MAAM,MAAA,KAAA,GAAQ,GAAM,GAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,CAAA;AAChC,MAAA,MAAM,IAAO,GAAA,KAAA,CAAM,QAAS,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAExC,MAAA,IAAI,QAAQ,IAAM,EAAA,IAAA,KAAS,UAAU,IAAQ,IAAA,CAAC,KAAK,QAAU,EAAA;AAC3D,QAAA,KAAA,IAAS,IAAI,KAAQ,GAAA,SAAA,EAAW,CAAM,KAAA,GAAA,EAAK,KAAK,SAAW,EAAA;AACzD,UACE,IAAA,KAAA,CAAM,QAAS,CAAA,CAAA,EAAG,KAAK,CAAA,IACvB,KAAM,CAAA,mBAAA,CAAoB,CAAG,EAAA,KAAA,EAAO,IAAK,CAAA,KAAK,CAC9C,EAAA;AACA,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AAAA,SACF;AACA,QAAA,OACE,CAAC,KAAA,CAAM,mBAAoB,CAAA,GAAA,EAAK,OAAO,IAAK,CAAA,KAAK,CACjD,IAAA,CAAC,KAAM,CAAA,uBAAA,CAAwB,GAAK,EAAA,GAAA,EAAK,KAAK,KAAK,CAAA,CAAA;AAAA,OAEvD;AAAA,KACF;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACF;;;;"}