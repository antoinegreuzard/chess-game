{"version":3,"file":"index-CzsmZbtv.js","sources":["../../src/piece.ts","../../src/pieces/rook.ts","../../src/pieces/knight.ts","../../src/pieces/bishop.ts","../../src/pieces/queen.ts","../../src/pieces/king.ts","../../src/pieces/pawn.ts","../../src/utils.ts","../../src/board.ts","../../src/evaluator.ts","../../src/ai.ts","../../src/game.ts","../../src/canvas-renderer.ts","../../src/timer.ts","../../src/index.ts"],"sourcesContent":["// src/piece.ts\nimport { Board } from './board';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport abstract class Piece {\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  // Mise à jour pour inclure le paramètre 'board'\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean;\n\n  // Vérifie si le chemin est dégagé pour certaines pièces\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const dx = Math.sign(toX - fromX); // Direction en X\n    const dy = Math.sign(toY - fromY); // Direction en Y\n\n    // Boucle sur toutes les cases intermédiaires jusqu'à la case cible exclue\n    let x = fromX + dx;\n    let y = fromY + dy;\n\n    while (x !== toX || y !== toY) {\n      // Vérifie s'il y a une pièce sur le chemin\n      if (board.isWithinBounds(x, y) && board.getPiece(x, y)) return false;\n\n      // Avance dans la direction\n      x += dx;\n      y += dy;\n    }\n\n    return true; // Chemin dégagé\n  }\n\n  // Vérifie si une pièce peut capturer une autre\n  canCapture(toX: number, toY: number, board: Board): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return !targetPiece || targetPiece.color !== this.color;\n  }\n}\n","// src/pieces/rook.ts\nimport { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Rook extends Piece {\n  public hasMoved: boolean = false;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.ROOK);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Vérifie si le mouvement est en ligne droite et que le chemin est dégagé\n    const isStraightMove = fromX === toX || fromY === toY;\n    const isPathClear = this.isPathClear(fromX, fromY, toX, toY, board);\n    const canCapture = this.canCapture(toX, toY, board);\n\n    if (isStraightMove && isPathClear) {\n      return canCapture;\n    }\n    return false;\n  }\n}\n","// src/pieces/knight.ts\nimport { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Knight extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.KNIGHT);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Le Cavalier se déplace en L : 2 cases dans une direction puis 1 case perpendiculairement\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    return (\n      ((dx === 2 && dy === 1) || (dx === 1 && dy === 2)) &&\n      this.canCapture(toX, toY, board)\n    );\n  }\n}\n","// src/pieces/bishop.ts\nimport { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Bishop extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.BISHOP);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Le fou se déplace en diagonale\n    if (Math.abs(toX - fromX) === Math.abs(toY - fromY)) {\n      // Vérifie que la trajectoire est dégagée\n      if (this.isPathClear(fromX, fromY, toX, toY, board)) {\n        // Vérifie si la cible est vide ou contient une pièce ennemie\n        return this.canCapture(toX, toY, board);\n      }\n    }\n\n    return false;\n  }\n}\n","// src/pieces/queen.ts\nimport { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Queen extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.QUEEN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // La reine peut se déplacer en ligne droite ou en diagonale\n    if (\n      fromX === toX || // Déplacement en colonne\n      fromY === toY || // Déplacement en ligne\n      Math.abs(toX - fromX) === Math.abs(toY - fromY) // Déplacement en diagonale\n    ) {\n      // Vérifie que la trajectoire est dégagée\n      if (this.isPathClear(fromX, fromY, toX, toY, board)) {\n        // Vérifie si la cible est vide ou contient une pièce ennemie\n        return this.canCapture(toX, toY, board);\n      }\n    }\n\n    return false;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\nimport { Rook } from './rook';\n\nexport class King extends Piece {\n  public hasMoved: boolean = false;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.KING);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n\n    // Vérification pour le mouvement classique du roi\n    if (dx <= 1 && dy <= 1) {\n      const targetPiece = board.getPiece(toX, toY);\n      return (\n        this.canCapture(toX, toY, board) &&\n        (!targetPiece || targetPiece.type !== PieceType.KING)\n      );\n    }\n\n    // Logique pour le roque (grand ou petit)\n    if (!this.hasMoved && dy === 0 && dx === 2) {\n      const direction = toX > fromX ? 1 : -1;\n      const rookX = toX > fromX ? 7 : 0;\n      const rook = board.getPiece(rookX, fromY);\n\n      if (rook && rook instanceof Rook && !rook.hasMoved) {\n        // Vérifie que les cases entre le roi et la tour sont libres\n        for (let x = fromX + direction; x !== rookX; x += direction) {\n          if (board.getPiece(x, fromY)) return false;\n        }\n\n        // Assure que le roi n'est pas en échec avant, pendant ou après le roque\n        if (\n          !board.isKingInCheck(this.color) &&\n          !board.isSquareUnderAttack(fromX + direction, fromY, this.color) &&\n          !board.isSquareUnderAttack(toX, fromY, this.color)\n        ) {\n          return true; // Roque valide\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","// src/pieces/pawn.ts\nimport { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Pawn extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.PAWN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const direction = this.color === PieceColor.WHITE ? 1 : -1;\n    const startRow = this.color === PieceColor.WHITE ? 1 : 6;\n    const distanceY = (toY - fromY) * direction;\n    const distanceX = Math.abs(toX - fromX);\n\n    // 1. Déplacement d'une case vers l'avant (sans capture)\n    if (distanceX === 0 && distanceY === 1) {\n      if (!board.getPiece(toX, toY)) {\n        // Promotion si le pion atteint la dernière rangée\n        if (\n          (this.color === PieceColor.WHITE && toY === 7) ||\n          (this.color === PieceColor.BLACK && toY === 0)\n        ) {\n          this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n    }\n\n    // 2. Déplacement de deux cases vers l'avant depuis la ligne de départ (sans capture)\n    if (distanceX === 0 && distanceY === 2 && fromY === startRow) {\n      if (\n        !board.getPiece(toX, toY) &&\n        !board.getPiece(fromX, fromY + direction)\n      ) {\n        // Mettre à jour la cible de la prise en passant\n        board.updateEnPassantTarget(fromX, fromY, toX, toY, this);\n        return true;\n      }\n    }\n\n    // 3. Capture en diagonale\n    if (distanceX === 1 && distanceY === 1) {\n      // Vérifie qu'il y a une pièce ennemie à capturer\n      if (board.getPiece(toX, toY) && this.canCapture(toX, toY, board)) {\n        // Promotion si le pion atteint la dernière rangée\n        if (\n          (this.color === PieceColor.WHITE && toY === 7) ||\n          (this.color === PieceColor.BLACK && toY === 0)\n        ) {\n          this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n\n      // Prise en passant\n      if (board.isEnPassantMove(fromX, fromY, toX, toY)) {\n        return true;\n      }\n    }\n\n    // Si aucune des conditions n'est remplie, le mouvement est invalide\n    return false;\n  }\n\n  private handlePromotion(toX: number, toY: number, board: Board): void {\n    const promotionDialog = document.getElementById('promotionDialog');\n    if (promotionDialog) {\n      promotionDialog.style.display = 'block';\n\n      // Définis la fonction promote sur l'objet global window\n      window.promote = (pieceType: string) => {\n        promotionDialog.style.display = 'none';\n        board.promotePawn(toX, toY, pieceType);\n      };\n    }\n  }\n}\n","// src/utils.ts\n\nimport { PieceColor, PieceType } from './piece';\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById('gameMessage')!;\n  gameMessageElement.textContent = message;\n  gameMessageElement.style.display = 'block'; // Afficher le message\n}\n\n// Fonction pour obtenir le symbole de la pièce capturée\nfunction getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case 'pawn':\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case 'rook':\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case 'knight':\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case 'bishop':\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case 'queen':\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case 'king':\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\nexport function updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const capturedWhiteElement = document.getElementById('capturedWhite')!;\n  const capturedBlackElement = document.getElementById('capturedBlack')!;\n\n  let capturedWhite: string[] = []; // Liste des pièces capturées par les Blancs\n  let capturedBlack: string[] = []; // Liste des pièces capturées par les Noirs\n\n  const pieceSymbol = getPieceSymbol(piece, color);\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  } else {\n    capturedBlack.push(pieceSymbol);\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n","// src/board.ts\nimport { Piece, PieceColor, PieceType } from './piece';\nimport { Rook } from './pieces/rook';\nimport { Knight } from './pieces/knight';\nimport { Bishop } from './pieces/bishop';\nimport { Queen } from './pieces/queen';\nimport { King } from './pieces/king';\nimport { Pawn } from './pieces/pawn';\nimport { updateCapturedPieces } from './utils';\n\ntype BoardSquare = Piece | null;\n\nexport class Board {\n  private readonly grid: BoardSquare[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n\n  constructor() {\n    this.grid = this.initializeBoard();\n  }\n\n  private initializeBoard(): BoardSquare[][] {\n    const board: BoardSquare[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Ajouter les pièces blanches\n    board[0] = [\n      new Rook(PieceColor.WHITE),\n      new Knight(PieceColor.WHITE),\n      new Bishop(PieceColor.WHITE),\n      new Queen(PieceColor.WHITE),\n      new King(PieceColor.WHITE),\n      new Bishop(PieceColor.WHITE),\n      new Knight(PieceColor.WHITE),\n      new Rook(PieceColor.WHITE),\n    ];\n    board[1] = Array(8)\n      .fill(null)\n      .map(() => new Pawn(PieceColor.WHITE));\n\n    // Ajouter les pièces noires\n    board[7] = [\n      new Rook(PieceColor.BLACK),\n      new Knight(PieceColor.BLACK),\n      new Bishop(PieceColor.BLACK),\n      new Queen(PieceColor.BLACK),\n      new King(PieceColor.BLACK),\n      new Bishop(PieceColor.BLACK),\n      new Knight(PieceColor.BLACK),\n      new Rook(PieceColor.BLACK),\n    ];\n    board[6] = Array(8)\n      .fill(null)\n      .map(() => new Pawn(PieceColor.BLACK));\n\n    return board;\n  }\n\n  // Méthode générale pour vérifier les limites\n  public isWithinBounds(x: number, y: number): boolean {\n    return x >= 0 && x < 8 && y >= 0 && y < 8;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    let piece = null;\n    if (this.isWithinBounds(x, y)) piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (\n      toY < 0 ||\n      toY >= this.grid.length ||\n      fromY < 0 ||\n      fromY >= this.grid.length ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString()) ||\n      ['__proto__', 'constructor', 'prototype'].includes(fromY.toString())\n    ) {\n      return false; // Invalid move if fromY or toY is out of bounds or a special property name\n    }\n\n    let piece = null;\n    if (this.isWithinBounds(fromX, fromY)) piece = this.getPiece(fromX, fromY);\n\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      let targetPiece = null;\n      if (this.isWithinBounds(toX, toY)) targetPiece = this.getPiece(toX, toY);\n\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false; // Mouvement invalide si la cible est un roi\n      }\n\n      if (this.isEnPassantMove(fromX, fromY, toX, toY)) {\n        this.captureEnPassant(fromX, fromY, toX, toY);\n      }\n\n      // Vérifie si c'est un mouvement de roque pour le roi\n      if (piece instanceof King && Math.abs(toX - fromX) === 2) {\n        console.log('King');\n        if (!this.isCastlingValid(piece, fromX, fromY, toX)) {\n          return false; // Roque invalide\n        }\n\n        console.log(true);\n        // Effectue le roque\n        this.handleCastling(toX, fromY);\n      }\n\n      // Sauvegarder l'état actuel pour vérifier l'échec\n      let originalPiece = null;\n      if (this.isWithinBounds(toX, toY))\n        originalPiece = this.getPiece(toX, toY);\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Vérification de l'échec après le mouvement\n      if (this.isKingInCheck(piece.color)) {\n        // Annuler le mouvement\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = originalPiece;\n        return false;\n      }\n\n      // Compte les mouvements pour la règle des 50 coups\n      if (piece.type === PieceType.PAWN || targetPiece) {\n        this.halfMoveCount = 0; // Réinitialise le compteur si un pion bouge ou si une capture a lieu\n      } else {\n        this.halfMoveCount++;\n      }\n\n      // Déplace la pièce\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Met à jour l'état du roi et des tours pour le roque\n      if (piece instanceof King) {\n        piece.hasMoved = true;\n      } else if (piece instanceof Rook) {\n        piece.hasMoved = true;\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    let rook = null;\n    if (this.isWithinBounds(rookX, fromY)) rook = this.getPiece(rookX, fromY);\n\n    if (!(rook instanceof Rook) || rook.hasMoved || king.hasMoved) {\n      return false;\n    }\n\n    // Vérifie que les cases entre le roi et la tour sont libres\n    for (let x = fromX + direction; x !== rookX; x += direction) {\n      if (this.getPiece(x, fromY)) {\n        return false;\n      }\n    }\n\n    // Assure que le roi ne passe pas par une case attaquée\n    for (let x = fromX; x !== toX + direction; x += direction) {\n      if (this.isSquareUnderAttack(x, fromY, king.color)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    // Déplacement pour le petit roque (roi se déplace vers la droite)\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      if (rook instanceof Rook) {\n        this.movePiece(7, kingY, 5, kingY);\n      }\n    }\n    // Déplacement pour le grand roque (roi se déplace vers la gauche)\n    else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      if (rook instanceof Rook) {\n        this.movePiece(0, kingY, 3, kingY);\n      }\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    if (piece instanceof Pawn && Math.abs(toY - fromY) === 2 && fromX === toX) {\n      // Si le pion avance de deux cases, configure la cible pour la prise en passant\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void {\n    const piece = this.getPiece(fromX, fromY);\n\n    // Vérifie que le mouvement est une prise en passant valide\n    if (this.isEnPassantMove(fromX, fromY, toX, toY) && piece instanceof Pawn) {\n      // Détermine la direction pour la capture en passant\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n\n      // Calcul de la position du pion capturé (en passant)\n      const capturedPawnY = toY + direction; // Position Y du pion capturé\n      const capturedPawn = this.getPiece(toX, capturedPawnY);\n\n      // Vérifie si un pion est bien présent à capturer\n      if (capturedPawn && capturedPawn.type === PieceType.PAWN) {\n        this.grid[capturedPawnY][toX] = null;\n        updateCapturedPieces(capturedPawn.type, capturedPawn.color);\n      }\n\n      // Déplace le pion qui effectue la capture\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n    }\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n\n    // Vérifie que le mouvement cible la bonne case pour la prise en passant\n    const piece = this.getPiece(fromX, fromY);\n    return (\n      piece instanceof Pawn &&\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      Math.abs(fromX - toX) === 1 &&\n      Math.abs(fromY - toY) === 1\n    );\n  }\n\n  public promotePawn(x: number, y: number, pieceType: string): void {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = new Queen(color);\n        break;\n      case 'rook':\n        this.grid[y][x] = new Rook(color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = new Bishop(color);\n        break;\n      case 'knight':\n        this.grid[y][x] = new Knight(color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    if (!this.isKingInCheck(color)) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const kingSafe = !this.isKingInCheck(color);\n\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (kingSafe) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    if (this.isKingInCheck(color)) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const kingSafe = !this.isKingInCheck(color);\n\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (kingSafe) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece instanceof King && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n\n  public clearBoard(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        this.grid[y][x] = null;\n      }\n    }\n  }\n\n  // Vérifie si un mouvement est valide\n  public isMoveValid(\n    fromRow: number,\n    fromCol: number,\n    toRow: number,\n    toCol: number,\n  ): boolean {\n    const piece = this.getPiece(fromRow, fromCol);\n\n    // Si aucune pièce n'est présente à l'emplacement source, le mouvement est invalide\n    if (!piece) {\n      return false;\n    }\n\n    // Si la destination est en dehors de l'échiquier, mouvement invalide\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) {\n      return false;\n    }\n\n    // Vérifie si la pièce peut se déplacer à cette destination en utilisant la logique de mouvement de la pièce\n    if (!piece.isValidMove(fromRow, fromCol, toRow, toCol, this)) {\n      return false;\n    }\n\n    // Vérifie s'il y a une pièce à la destination et si elle est de la même couleur\n    const destinationPiece = this.getPiece(toRow, toCol);\n    return !(destinationPiece && destinationPiece.color === piece.color);\n  }\n}\n","// src/evaluator.ts\nimport { Board } from './board';\nimport { PieceColor, PieceType } from './piece';\n\n// Valeurs des pièces (évaluation de base)\nconst pieceValues: { [key in PieceType]: number } = {\n  [PieceType.PAWN]: 1,\n  [PieceType.KNIGHT]: 3,\n  [PieceType.BISHOP]: 3.25,\n  [PieceType.ROOK]: 5,\n  [PieceType.QUEEN]: 9,\n  [PieceType.KING]: 0, // Le roi est infiniment précieux, sa perte signifie la fin de la partie\n};\n\n// Bonus pour le contrôle du centre du plateau (cases centrales plus précieuses)\nexport const centerControlBonus: { [key: string]: number } = {\n  '3,3': 0.5,\n  '3,4': 0.5,\n  '4,3': 0.5,\n  '4,4': 0.5, // Cases centrales\n  '2,3': 0.25,\n  '2,4': 0.25,\n  '3,2': 0.25,\n  '4,2': 0.25,\n  '4,5': 0.25,\n  '3,5': 0.25,\n  '5,3': 0.25,\n  '5,4': 0.25, // Cases autour\n};\n\n// Bonus pour la sécurité du roi (roi en sécurité dans un coin)\nconst kingSafetyBonus: { [key in PieceColor]: { [key: string]: number } } = {\n  [PieceColor.WHITE]: {\n    '0,6': 0.5,\n    '0,7': 0.5, // Roi blanc roqué sur l'aile roi\n    '0,1': 0.5,\n    '0,0': 0.5, // Roi blanc roqué sur l'aile dame\n  },\n  [PieceColor.BLACK]: {\n    '7,6': 0.5,\n    '7,7': 0.5, // Roi noir roqué sur l'aile roi\n    '7,1': 0.5,\n    '7,0': 0.5, // Roi noir roqué sur l'aile dame\n  },\n};\n\n// Fonction d'évaluation principale\nexport function evaluateBoard(board: Board, color: PieceColor): number {\n  let score = 0;\n\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (piece) {\n        // Calcul de la valeur de la pièce\n        let pieceScore = pieceValues[piece.type];\n\n        // Contrôle du centre\n        const positionKey = `${x},${y}`;\n        if (centerControlBonus[positionKey]) {\n          pieceScore += centerControlBonus[positionKey];\n        }\n\n        // Bonus pour la sécurité du roi\n        if (\n          piece.type === PieceType.KING &&\n          kingSafetyBonus[piece.color][positionKey]\n        ) {\n          pieceScore += kingSafetyBonus[piece.color][positionKey];\n        }\n\n        // Ajoute la valeur de la pièce au score total, en tenant compte de la couleur\n        score += piece.color === color ? pieceScore : -pieceScore;\n      }\n    }\n  }\n\n  return score;\n}\n","// src/ai.ts\nimport { Board } from './board';\nimport { evaluateBoard, centerControlBonus } from './evaluator';\nimport { PieceColor } from './piece';\n\n// Classe AI utilisant l'algorithme Minimax avec Alpha-Beta Pruning et Transposition Table\nexport class AI {\n  private transpositionTable: Map<string, number>; // Table de transposition\n\n  constructor(private color: PieceColor) {\n    this.transpositionTable = new Map();\n  }\n\n  // Méthode principale pour faire un mouvement\n  public makeMove(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number } | null {\n    let bestMove = null;\n    let bestValue = -Infinity;\n\n    const maxDepth = 3; // Profondeur maximale de recherche\n    let moves = this.getAllValidMoves(board);\n\n    // Trie les mouvements pour optimiser la recherche\n    moves = this.sortMoves(moves, board);\n\n    for (const move of moves) {\n      // Effectue le mouvement sur le plateau temporairement\n      const piece = board.getPiece(move.fromX, move.fromY);\n      const originalPiece = board.getPiece(move.toX, move.toY);\n      board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n\n      // Appelle la recherche Minimax avec Alpha-Beta Pruning\n      const boardValue = this.minimax(\n        board,\n        maxDepth - 1,\n        -Infinity,\n        Infinity,\n        false,\n      );\n\n      // Annule le mouvement temporaire\n      board.setPiece(move.fromX, move.fromY, piece);\n      board.setPiece(move.toX, move.toY, originalPiece);\n\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    }\n\n    return bestMove;\n  }\n\n  // Fonction Minimax avec Alpha-Beta Pruning et table de transposition\n  private minimax(\n    board: Board,\n    depth: number,\n    alpha: number,\n    beta: number,\n    isMaximizing: boolean,\n  ): number {\n    const boardKey = board.toString(); // Représentation unique du plateau pour la table de transposition\n\n    // Vérifie si la position est déjà calculée\n    if (this.transpositionTable.has(boardKey)) {\n      return this.transpositionTable.get(boardKey)!;\n    }\n\n    if (\n      depth === 0 ||\n      board.isCheckmate(this.color) ||\n      board.isCheckmate(this.getOpponentColor())\n    ) {\n      const evaluation = evaluateBoard(board, this.color);\n      this.transpositionTable.set(boardKey, evaluation); // Stocke l'évaluation dans la table\n      return evaluation;\n    }\n\n    console.log(\n      `Simulation: ${isMaximizing ? 'Maximizing' : 'Minimizing'}, Depth: ${depth}, Alpha: ${alpha}, Beta: ${beta}`,\n    );\n\n    if (isMaximizing) {\n      let maxEval = -Infinity;\n      let moves = this.getAllValidMoves(board);\n\n      // Trie les mouvements pour optimiser la recherche\n      moves = this.sortMoves(moves, board);\n\n      for (const move of moves) {\n        // Enregistre l'état actuel avant de déplacer la pièce\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        // Effectue le mouvement temporairement\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n\n        // Appelle récursivement Minimax\n        const evaluation = this.minimax(board, depth - 1, alpha, beta, false);\n\n        // Annule le mouvement temporaire\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        maxEval = Math.max(maxEval, evaluation);\n        alpha = Math.max(alpha, evaluation);\n        if (beta <= alpha) break; // Coupure Alpha-Beta\n      }\n\n      this.transpositionTable.set(boardKey, maxEval); // Stocke l'évaluation dans la table\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      let moves = this.getAllValidMoves(board);\n\n      // Trie les mouvements pour optimiser la recherche\n      moves = this.sortMoves(moves, board);\n\n      for (const move of moves) {\n        // Enregistre l'état actuel avant de déplacer la pièce\n        const fromPiece = board.getPiece(move.fromX, move.fromY);\n        const toPiece = board.getPiece(move.toX, move.toY);\n\n        // Effectue le mouvement temporairement\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n\n        // Appelle récursivement Minimax\n        const evaluation = this.minimax(board, depth - 1, alpha, beta, true);\n\n        // Annule le mouvement temporaire\n        board.setPiece(move.fromX, move.fromY, fromPiece);\n        board.setPiece(move.toX, move.toY, toPiece);\n\n        minEval = Math.min(minEval, evaluation);\n        beta = Math.min(beta, evaluation);\n        if (beta <= alpha) break; // Coupure Alpha-Beta\n      }\n\n      this.transpositionTable.set(boardKey, minEval); // Stocke l'évaluation dans la table\n      return minEval;\n    }\n  }\n\n  // Fonction utilitaire pour obtenir la couleur adverse\n  private getOpponentColor(): PieceColor {\n    return this.color === PieceColor.WHITE\n      ? PieceColor.BLACK\n      : PieceColor.WHITE;\n  }\n\n  // Fonction pour obtenir tous les mouvements valides pour l'IA\n  private getAllValidMoves(\n    board: Board,\n  ): { fromX: number; fromY: number; toX: number; toY: number }[] {\n    const validMoves = [];\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n\n        if (piece && piece.color === this.color) {\n          const moves = board.getValidMoves(x, y);\n\n          // Vérifie que chaque mouvement est valide avant de l'ajouter\n          for (const move of moves) {\n            if (board.isMoveValid(x, y, move.x, move.y)) {\n              validMoves.push({ fromX: x, fromY: y, toX: move.x, toY: move.y });\n            }\n          }\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  // Fonction pour trier les mouvements afin d'optimiser la recherche\n  private sortMoves(\n    moves: { fromX: number; fromY: number; toX: number; toY: number }[],\n    board: Board,\n  ): {\n    fromX: number;\n    fromY: number;\n    toX: number;\n    toY: number;\n  }[] {\n    return moves.sort((a, b) => {\n      const pieceA = board.getPiece(a.toX, a.toY);\n      const pieceB = board.getPiece(b.toX, b.toY);\n\n      // Préfère les captures\n      if (pieceA && !pieceB) return -1;\n      if (!pieceA && pieceB) return 1;\n\n      // Sinon, trie par position centrale (exemple simple)\n      const centerControlA = centerControlBonus[`${a.toX},${a.toY}`] || 0;\n      const centerControlB = centerControlBonus[`${b.toX},${b.toY}`] || 0;\n\n      return centerControlB - centerControlA;\n    });\n  }\n}\n","import { Board } from './board';\nimport { AI } from './ai';\nimport { PieceColor } from './piece';\n\nexport class Game {\n  private readonly board: Board;\n  private readonly ai: AI | null;\n\n  constructor() {\n    this.board = new Board();\n    // Initialise l'IA pour jouer avec les Noirs par exemple\n    this.ai = new AI(PieceColor.BLACK);\n  }\n\n  public start(): void {\n    console.log(\"Nouvelle partie d'échecs démarrée !\");\n  }\n\n  public getBoard(): Board {\n    return this.board;\n  }\n\n  // Méthode pour faire jouer l'IA\n  public makeAIMove(): void {\n    if (this.ai) {\n      const move = this.ai.makeMove(this.board);\n\n      if (move) {\n        this.board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        console.log(\n          `L'IA a déplacé une pièce de (${move.fromX}, ${move.fromY}) à (${move.toX}, ${move.toY})`,\n        );\n      } else {\n        console.log(\"Aucun mouvement valide pour l'IA.\");\n      }\n    }\n  }\n}\n","// src/canvas-renderer.ts\nimport { Board } from './board';\nimport { Piece, PieceColor } from './piece';\n\nexport class CanvasRenderer {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private readonly tileSize: number;\n  private draggingPiece: Piece | null = null;\n  private startX: number | null = null;\n  private startY: number | null = null;\n  private highlightedMoves: { x: number; y: number }[] = [];\n  private kingInCheckPosition: { x: number; y: number } | null = null;\n\n  constructor(\n    private board: Board,\n    canvasId: string,\n    private moveHandler: (\n      fromX: number,\n      fromY: number,\n      toX: number,\n      toY: number,\n    ) => boolean, // Utilisation d'un retour booléen pour vérifier si le mouvement est valide\n  ) {\n    this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d')!;\n    this.tileSize = this.canvas.width / 8;\n\n    // Définir le curseur par défaut\n    this.canvas.style.cursor = 'default';\n\n    // Ajouter des écouteurs pour gérer les événements de glisser-déposer\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n  }\n\n  // Animation pour déplacer une pièce\n  public animateMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    const frames = 10;\n    let currentFrame = 0;\n\n    const startX = fromX * this.tileSize;\n    const startY = fromY * this.tileSize;\n    const deltaX = ((toX - fromX) * this.tileSize) / frames;\n    const deltaY = ((toY - fromY) * this.tileSize) / frames;\n\n    const animate = () => {\n      if (currentFrame <= frames) {\n        // Redessine l'échiquier pour effacer l'ancienne position de la pièce\n        this.drawBoard();\n\n        this.context.fillStyle =\n          piece.color === PieceColor.WHITE ? 'white' : 'black';\n        this.context.font = '48px Arial';\n        this.context.textAlign = 'center';\n        this.context.textBaseline = 'middle';\n\n        // Dessine la pièce en mouvement\n        this.context.fillText(\n          this.getPieceText(piece),\n          startX + deltaX * currentFrame + this.tileSize / 2,\n          startY + deltaY * currentFrame + this.tileSize / 2,\n        );\n\n        currentFrame++;\n        requestAnimationFrame(animate);\n      } else {\n        // Redessiner l'échiquier à la fin de l'animation pour afficher la pièce à la position finale\n        this.drawBoard();\n      }\n    };\n\n    animate();\n  }\n\n  // Surligne les mouvements valides pour une pièce sélectionnée\n  highlightValidMoves(moves: { x: number; y: number }[]): void {\n    this.context.fillStyle = 'rgba(0, 255, 0, 0.5)'; // Couleur de surlignage (vert translucide)\n    moves.forEach((move) => {\n      this.context.fillRect(\n        move.x * this.tileSize,\n        move.y * this.tileSize,\n        this.tileSize,\n        this.tileSize,\n      );\n    });\n  }\n\n  // Dessiner l'échiquier et les pièces\n  public drawBoard(): void {\n    // Obtenir la position du roi en échec si elle existe\n    const kingInCheck = this.board.getKingInCheck();\n    this.kingInCheckPosition = kingInCheck\n      ? { x: kingInCheck.x, y: kingInCheck.y }\n      : null;\n\n    // Dessiner le plateau\n    this.drawTiles();\n    this.drawPieces();\n  }\n\n  // Dessiner les cases de l'échiquier\n  private drawTiles(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const isDarkTile = (x + y) % 2 === 1;\n        let tileColor = isDarkTile ? '#769656' : '#eeeed2';\n\n        // Si la case contient le roi en échec, change la couleur\n        if (\n          this.kingInCheckPosition &&\n          this.kingInCheckPosition.x === x &&\n          this.kingInCheckPosition.y === y\n        ) {\n          tileColor = '#ff6347'; // Par exemple, une couleur rouge pour indiquer l'échec\n        }\n\n        this.context.fillStyle = tileColor;\n        this.context.fillRect(\n          x * this.tileSize,\n          y * this.tileSize,\n          this.tileSize,\n          this.tileSize,\n        );\n      }\n    }\n  }\n\n  // Dessiner toutes les pièces sur l'échiquier\n  private drawPieces(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.board.getPiece(x, y);\n        if (piece) {\n          this.drawPiece(piece, x, y);\n        }\n      }\n    }\n  }\n\n  // Dessiner une pièce spécifique\n  private drawPiece(piece: Piece, x: number, y: number): void {\n    this.context.fillStyle = piece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(piece);\n    this.context.fillText(\n      pieceText,\n      x * this.tileSize + this.tileSize / 2,\n      y * this.tileSize + this.tileSize / 2,\n    );\n  }\n\n  // Convertir le type de pièce en texte pour affichage\n  private getPieceText(piece: Piece): string {\n    switch (piece.type) {\n      case 'pawn':\n        return piece.color === 'white' ? '♙' : '♟';\n      case 'rook':\n        return piece.color === 'white' ? '♖' : '♜';\n      case 'knight':\n        return piece.color === 'white' ? '♘' : '♞';\n      case 'bishop':\n        return piece.color === 'white' ? '♗' : '♝';\n      case 'queen':\n        return piece.color === 'white' ? '♕' : '♛';\n      case 'king':\n        return piece.color === 'white' ? '♔' : '♚';\n      default:\n        return '';\n    }\n  }\n\n  // Gérer le début du glissement\n  private handleMouseDown(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    const piece = this.board.getPiece(x, y);\n    if (piece) {\n      this.draggingPiece = piece;\n      this.startX = x;\n      this.startY = y;\n      this.canvas.style.cursor = 'grabbing'; // Change le curseur pendant le drag\n\n      // Obtenez les mouvements légaux pour la pièce sélectionnée\n      this.highlightedMoves = this.board.getValidMoves(x, y);\n\n      // Redessinez le plateau avec les cases surlignées\n      this.drawBoard();\n      this.highlightValidMoves(this.highlightedMoves); // Surligne les mouvements valides\n    }\n  }\n\n  // Gérer le mouvement pendant le glissement\n  private handleMouseMove(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Changer le curseur lorsque la souris survole une pièce\n    let piece = null;\n    if (this.board.isWithinBounds(x, y)) piece = this.board.getPiece(x, y);\n    if (piece && !this.draggingPiece) {\n      this.canvas.style.cursor = 'pointer';\n    } else if (!this.draggingPiece) {\n      this.canvas.style.cursor = 'default';\n    }\n\n    if (!this.draggingPiece) return;\n\n    // Dessiner l'échiquier et les pièces\n    this.drawBoard();\n\n    // Assurez-vous que les mouvements valides restent visibles pendant le glissement\n    this.highlightValidMoves(this.highlightedMoves);\n\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    // Dessiner la pièce en mouvement\n    this.context.fillStyle =\n      this.draggingPiece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(this.draggingPiece);\n    this.context.fillText(pieceText, mouseX, mouseY);\n  }\n\n  // Gérer la fin du glissement\n  private handleMouseUp(event: MouseEvent): void {\n    if (!this.draggingPiece || this.startX === null || this.startY === null)\n      return;\n\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Utilise la fonction de rappel `moveHandler` pour déplacer la pièce\n    const moveSuccessful = this.moveHandler(this.startX, this.startY, x, y);\n\n    // Réinitialise l'état de glissement\n    this.draggingPiece = null;\n    this.startX = null;\n    this.startY = null;\n    this.canvas.style.cursor = 'default'; // Rétablir le curseur par défaut\n\n    // Efface les coups surlignés\n    this.highlightedMoves = [];\n\n    // Redessine le plateau après la fin du glissement\n    this.drawBoard();\n\n    // Si le mouvement est réussi, met à jour le tour\n    if (moveSuccessful) {\n      this.drawBoard();\n    }\n  }\n}\n","// src/timer.ts\nexport class Timer {\n  private intervalId: number | null = null;\n  private currentTime: number;\n  private readonly onTimeUpdate: (timeLeft: number) => void;\n  public isRunning: boolean = false;\n\n  constructor(\n    private initialTime: number,\n    onTimeUpdate: (timeLeft: number) => void,\n  ) {\n    this.currentTime = initialTime;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Démarrer le compte à rebours\n  public start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.intervalId = window.setInterval(() => {\n      this.currentTime--;\n      this.onTimeUpdate(this.currentTime);\n\n      if (this.currentTime <= 0) {\n        this.currentTime = 0;\n        this.stop();\n        // Appel de la fonction onTimeUpdate une dernière fois pour garantir l'affichage du temps écoulé\n        this.onTimeUpdate(this.currentTime);\n      }\n    }, 1000);\n  }\n\n  // Arrêter le compte à rebours\n  public stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n  }\n\n  // Réinitialiser le temps\n  public reset(time: number): void {\n    this.stop();\n    this.currentTime = time;\n    this.start();\n  }\n}\n","// src/index.ts\nimport { Game } from './game';\nimport { CanvasRenderer } from './canvas-renderer';\nimport { Timer } from './timer';\nimport { PieceColor, PieceType } from './piece';\nimport { showMessage, updateCapturedPieces } from './utils';\n\nconst game = new Game();\nconst board = game.getBoard();\nconst moveHistoryElement = document.getElementById('moveHistory')!;\nconst currentTurnElement = document.getElementById('currentTurn')!;\nconst timerElement = document.getElementById('timer')!;\nconst passTurnButton = document.getElementById('passTurnButton')!;\nconst gameMessageElement = document.getElementById('gameMessage')!;\nconst replayButton = document.getElementById('replayButton')!;\nconst drawButton = document.getElementById('drawButton')!;\nconst acceptDrawButton = document.getElementById('acceptDrawButton')!;\n\nlet currentPlayer: PieceColor = PieceColor.WHITE; // Les blancs commencent toujours\nlet gameState: 'playing' | 'waiting' | 'drawProposed' = 'playing'; // Ajout de l'état pour la proposition de nullité\nlet hasMoved: boolean = false; // Indique si un mouvement a déjà été effectué dans ce tour\nlet moveHistory: {\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n  pieceType: PieceType;\n}[][] = [[]]; // Historique des mouvements par tour\nlet isGameEnded = false;\n\n// Initialiser le timer avec 60 secondes pour chaque joueur\nlet whiteTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.WHITE),\n);\nlet blackTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.BLACK),\n);\n\n// Fonction pour mettre à jour l'affichage du timer\nfunction updateTimerDisplay(timeLeft: number, color: PieceColor) {\n  if (color === currentPlayer) {\n    timerElement.textContent = `Temps restant: ${timeLeft}s`;\n    if (timeLeft <= 0 && !isGameEnded) {\n      showMessage(\n        `${currentPlayer === PieceColor.WHITE ? 'Noir' : 'Blanc'} gagne par temps écoulé !`,\n      );\n      endGame();\n    }\n  }\n}\n\n// Démarrer le jeu et dessiner le plateau\nconst renderer = new CanvasRenderer(board, 'chessBoard', handleMove);\nrenderer.drawBoard();\nwhiteTimer.start();\n\n// Fonction pour terminer la partie\n\nfunction endGame() {\n  // Empêche l'appel multiple d'endGame\n  if (isGameEnded) return;\n  isGameEnded = true;\n\n  // Stoppez les timers seulement si ce n'est pas déjà fait\n  if (whiteTimer.isRunning) whiteTimer.stop();\n  if (blackTimer.isRunning) blackTimer.stop();\n\n  gameState = 'waiting';\n  showMessage('La partie est terminée !');\n  replayButton.style.display = 'block';\n}\n\n// Fonction pour effacer le message d'erreur\nfunction clearMessage() {\n  gameMessageElement.textContent = '';\n  gameMessageElement.style.display = 'none';\n}\n\n// Fonction pour mettre à jour le tour et l'affichage\nfunction updateTurn() {\n  clearMessage();\n  currentPlayer =\n    currentPlayer === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  currentTurnElement.textContent = `Tour actuel: ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`;\n  hasMoved = false;\n\n  // Gestion des timers\n  if (currentPlayer === PieceColor.WHITE) {\n    if (blackTimer.isRunning) blackTimer.stop();\n    whiteTimer.reset(60);\n  } else {\n    if (whiteTimer.isRunning) whiteTimer.stop();\n    blackTimer.reset(60);\n  }\n\n  // Vérifie les conditions de nullité\n  if (board.isStalemate(currentPlayer)) {\n    showMessage('Pat ! La partie est nulle.');\n    endGame();\n  }\n\n  if (board.isInsufficientMaterial()) {\n    showMessage('Matériel insuffisant pour continuer, partie nulle !');\n    endGame();\n  }\n\n  if (board.isFiftyMoveRule()) {\n    showMessage('Règle des 50 coups, partie nulle !');\n    endGame();\n  }\n\n  // Gestion de la proposition de nullité\n  if (gameState === 'drawProposed') {\n    acceptDrawButton.style.display = 'block';\n  } else {\n    acceptDrawButton.style.display = 'none';\n  }\n\n  // Seul \"playing\" permet de jouer\n  if (gameState === 'playing') {\n    gameState = 'playing';\n  }\n\n  // Crée un nouveau tour dans l'historique des mouvements\n  moveHistory.push([]);\n}\n\n// Ajouter un mouvement à l'historique\nfunction addMoveToHistory(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n  pieceType: PieceType,\n) {\n  const moveText = `${pieceType} de (${fromX}, ${fromY}) à (${toX}, ${toY})`;\n  const listItem = document.createElement('li');\n  listItem.textContent = moveText;\n  moveHistoryElement.appendChild(listItem);\n\n  // Ajoutez le mouvement au tour actuel\n  moveHistory[moveHistory.length - 1].push({\n    fromX,\n    fromY,\n    toX,\n    toY,\n    pieceType,\n  });\n}\n\n// Fonction pour gérer un mouvement sur le plateau\nexport function handleMove(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n): boolean {\n  if (gameState === 'waiting' || hasMoved) {\n    showMessage('Veuillez attendre le prochain tour !');\n    return false;\n  }\n\n  const piece = board.getPiece(fromX, fromY);\n  const targetPiece = board.getPiece(toX, toY);\n\n  // Vérifie que c'est bien le tour du joueur qui joue\n  if (!piece || piece.color !== currentPlayer) {\n    showMessage(\n      `C'est le tour de ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n    );\n    return false;\n  }\n\n  // Vérifie si le mouvement est valide pour la pièce et respecte les règles des échecs\n  if (piece.isValidMove(fromX, fromY, toX, toY, board)) {\n    // Si une pièce normale est capturée, l'ajouter aux pièces capturées\n    if (board.movePiece(fromX, fromY, toX, toY)) {\n      if (targetPiece) {\n        updateCapturedPieces(targetPiece.type, targetPiece.color);\n      }\n\n      // Ajoute le mouvement à l'historique\n      addMoveToHistory(fromX, fromY, toX, toY, piece.type);\n\n      // Utilise l'animation pour le déplacement\n      renderer.animateMove(fromX, fromY, toX, toY, piece);\n\n      // Vérifie si cela met le roi adverse en échec\n      const opponentColor =\n        currentPlayer === PieceColor.WHITE\n          ? PieceColor.BLACK\n          : PieceColor.WHITE;\n      if (board.isKingInCheck(opponentColor)) {\n        if (board.isCheckmate(opponentColor)) {\n          showMessage(\n            `Échec et Mat ! ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'} gagne !`,\n          );\n          endGame();\n        } else {\n          showMessage(\n            `Échec au ${opponentColor === PieceColor.WHITE ? 'Blanc' : 'Noir'} !`,\n          );\n        }\n      }\n\n      // Change de tour après un mouvement valide\n      updateTurn();\n\n      // Appeler l'IA après le tour des Blancs\n      if (currentPlayer === PieceColor.BLACK) {\n        game.makeAIMove();\n        updateTurn(); // Change de tour après que l'IA a joué\n      }\n\n      return true;\n    }\n\n    // Si le mouvement est invalide, retourne faux\n    showMessage('Mouvement invalide !');\n    return false;\n  }\n\n  // Ajoute un return false par défaut si aucune condition n'est remplie\n  return false;\n}\n\n// Gérer le clic sur \"Passer son tour\"\nif (passTurnButton) {\n  passTurnButton.addEventListener('click', (event) => {\n    event.preventDefault();\n    if (gameState === 'playing') {\n      showMessage(\n        `Tour passé pour ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n      );\n      updateTurn();\n    }\n  });\n}\n\n// Gérer le clic sur \"Rejouer\"\nif (replayButton) {\n  replayButton.addEventListener('click', () => {\n    location.reload();\n  });\n}\n\n// Gérer le clic sur \"Proposer une Nulle\"\nif (drawButton) {\n  drawButton.addEventListener('click', () => {\n    if (gameState === 'playing') {\n      showMessage(\n        \"Proposition de nullité faite. Attente de la réponse de l'adversaire.\",\n      );\n      gameState = 'drawProposed';\n      updateTurn(); // Change de tour pour que l'adversaire décide\n    }\n  });\n}\n\n// Gérer le clic sur \"Accepter la Nulle\"\nif (acceptDrawButton) {\n  acceptDrawButton.addEventListener('click', () => {\n    if (gameState === 'drawProposed') {\n      showMessage('Partie Nulle par Accord Mutuel !');\n      gameState = 'waiting'; // Change l'état du jeu à \"waiting\"\n      endGame();\n    }\n  });\n}\n"],"names":["PieceColor","PieceType","Piece","color","type","fromX","fromY","toX","toY","board","dx","dy","x","y","targetPiece","Rook","__publicField","isStraightMove","isPathClear","canCapture","Knight","Bishop","Queen","King","direction","rookX","rook","Pawn","startRow","distanceY","distanceX","promotionDialog","pieceType","showMessage","message","gameMessageElement","getPieceSymbol","piece","updateCapturedPieces","capturedWhiteElement","capturedBlackElement","capturedWhite","capturedBlack","pieceSymbol","Board","validMoves","originalPiece","king","kingX","kingY","capturedPawnY","capturedPawn","_a","kingPosition","kingSafe","pieces","fromRow","fromCol","toRow","toCol","destinationPiece","pieceValues","centerControlBonus","kingSafetyBonus","evaluateBoard","score","pieceScore","positionKey","AI","bestMove","bestValue","maxDepth","moves","move","boardValue","depth","alpha","beta","isMaximizing","boardKey","evaluation","maxEval","fromPiece","toPiece","minEval","a","b","pieceA","pieceB","centerControlA","Game","CanvasRenderer","canvasId","moveHandler","currentFrame","startX","startY","deltaX","deltaY","animate","kingInCheck","tileColor","pieceText","event","rect","mouseX","mouseY","moveSuccessful","Timer","initialTime","onTimeUpdate","time","game","moveHistoryElement","currentTurnElement","timerElement","passTurnButton","replayButton","drawButton","acceptDrawButton","currentPlayer","gameState","hasMoved","moveHistory","isGameEnded","whiteTimer","timeLeft","updateTimerDisplay","blackTimer","endGame","renderer","handleMove","clearMessage","updateTurn","addMoveToHistory","moveText","listItem","opponentColor"],"mappings":"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"}