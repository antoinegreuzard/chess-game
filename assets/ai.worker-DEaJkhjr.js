async function g(c,t){switch(c){case r.PAWN:const{Pawn:e}=await Promise.resolve().then(function(){return it});return new e(t);case r.ROOK:const{Rook:i}=await import("./rook-f07W4QSe.js");return new i(t);case r.KNIGHT:const{Knight:n}=await import("./knight-CMolYRsx.js");return new n(t);case r.BISHOP:const{Bishop:s}=await import("./bishop-C1cp-CqL.js");return new s(t);case r.QUEEN:const{Queen:o}=await import("./queen-CXrh-8ey.js");return new o(t);case r.KING:const{King:a}=await import("./king-CBKUA4fg.js");return new a(t);default:throw new Error(`Type de pièce inconnu : ${c}`)}}var f=(c=>(c.WHITE="white",c.BLACK="black",c))(f||{}),r=(c=>(c.PAWN="pawn",c.ROOK="rook",c.KNIGHT="knight",c.BISHOP="bishop",c.QUEEN="queen",c.KING="king",c))(r||{});class H{constructor(t,e){this.color=t,this.type=e}hasMoved=!1;isPathClear(t,e,i,n,s){const o=Math.sign(i-t),a=Math.sign(n-e);let l=t+o,u=e+a;for(;l!==i||u!==n;){if(s.getPiece(l,u)!==null)return!1;l+=o,u+=a}return!0}static isKing(t){return t.type==="king"}canCapture(t,e,i){const n=i.getPiece(t,e);return!n||n.color!==this.color}toData(){return{color:this.color,type:this.type}}static async fromData(t){return await g(t.type,t.color)}}let A=[],B=[];function O(c,t){switch(c){case r.PAWN:return t===f.WHITE?"♙":"♟";case r.ROOK:return t===f.WHITE?"♖":"♜";case r.KNIGHT:return t===f.WHITE?"♘":"♞";case r.BISHOP:return t===f.WHITE?"♗":"♝";case r.QUEEN:return t===f.WHITE?"♕":"♛";case r.KING:return t===f.WHITE?"♔":"♚";default:return""}}function S(c,t){const e=O(c,t);t===f.WHITE?A.push(e):B.push(e),G()}function G(){const c=document.getElementById("capturedWhite"),t=document.getElementById("capturedBlack");c&&(c.textContent=A.join(" ")),t&&(t.textContent=B.join(" "))}class K{grid;enPassantTarget=null;halfMoveCount=0;currentPlayer=f.WHITE;constructor(){this.grid=[]}async init(){this.grid=await this.initializeBoard()}async initializeBoard(){const t=Array(8).fill(null).map(()=>Array(8).fill(null));return t[0]=[await g(r.ROOK,f.WHITE),await g(r.KNIGHT,f.WHITE),await g(r.BISHOP,f.WHITE),await g(r.KING,f.WHITE),await g(r.QUEEN,f.WHITE),await g(r.BISHOP,f.WHITE),await g(r.KNIGHT,f.WHITE),await g(r.ROOK,f.WHITE)],t[1]=await Promise.all(Array(8).fill(null).map(()=>g(r.PAWN,f.WHITE))),t[7]=[await g(r.ROOK,f.BLACK),await g(r.KNIGHT,f.BLACK),await g(r.BISHOP,f.BLACK),await g(r.KING,f.BLACK),await g(r.QUEEN,f.BLACK),await g(r.BISHOP,f.BLACK),await g(r.KNIGHT,f.BLACK),await g(r.ROOK,f.BLACK)],t[6]=await Promise.all(Array(8).fill(null).map(()=>g(r.PAWN,f.BLACK))),t}isWithinBounds(t,e){return t>=0&&t<8&&e>=0&&e<8}getPiece(t,e){return this.grid[e][t]}getValidMoves(t,e){let i=null;if(this.isWithinBounds(t,e)&&(i=this.getPiece(t,e)),!i)return[];const n=[];for(let s=0;s<8;s++)for(let o=0;o<8;o++)i.isValidMove(t,e,o,s,this)&&n.push({x:o,y:s});return n}isCastlingMove(t,e,i,n){const s=this.getPiece(t,e);return s&&s.type===r.KING&&Math.abs(i-t)===2&&e===n}captureEnPassantIfValid(t,e,i,n){if(this.isEnPassantMove(t,e,i,n)){const s=this.getPiece(t,e);if(!s)return;const o=n+(s.color===f.WHITE?-1:1);this.grid[o][i]&&(this.grid[o][i]=null)}}getKingInCheck(){return this.isKingInCheck(f.WHITE)?this.findKing(f.WHITE):this.isKingInCheck(f.BLACK)?this.findKing(f.BLACK):null}movePiece(t,e,i,n){if(!this.isWithinBounds(t,e)||!this.isWithinBounds(i,n)||["__proto__","constructor","prototype"].includes(e.toString())||["__proto__","constructor","prototype"].includes(n.toString()))return!1;const s=this.getPiece(t,e);if(s&&s.isValidMove(t,e,i,n,this)){const o=this.getPiece(i,n);if(o&&o.type===r.KING)return!1;if(s?.type===r.KING&&Math.abs(i-t)===2)return this.isCastlingValid(s,t,e,i)?(this.handleCastling(i,e),s.hasMoved=!0,!0):!1;if(s?.type===r.PAWN&&this.isEnPassantMove(t,e,i,n)&&this.captureEnPassant(t,e,i,n),this.grid[n][i]=s,this.grid[e][t]=null,s.hasMoved=!0,this.isKingInCheck(s.color))return this.grid[e][t]=s,this.grid[n][i]=o,!1;"hasMoved"in s&&(s.hasMoved=!0),this.updateEnPassantTarget(t,e,i,n,s),this.halfMoveCount=s.type===r.PAWN||o?0:this.halfMoveCount+1;const a=s.color===f.WHITE?f.BLACK:f.WHITE;return this.isCheckmate(a),!0}return!1}isCastlingValid(t,e,i,n){const s=n>e?1:-1,o=n>e?7:0,a=this.getPiece(o,i);if(a?.type!==r.ROOK||a.hasMoved||t.hasMoved)return!1;for(let l=e+s;l!==n+s;l+=s)if(this.getPiece(l,i)||this.isSquareUnderAttack(l,i,t.color))return!1;return!0}handleCastling(t,e){if(t===6){const i=this.getPiece(7,e),n=this.getPiece(4,e);i?.type===r.ROOK&&!i.hasMoved&&n?.type===r.KING&&(this.setPiece(5,e,i),this.setPiece(7,e,null),this.setPiece(6,e,n),this.setPiece(4,e,null))}else if(t===2){const i=this.getPiece(0,e),n=this.getPiece(4,e);i?.type===r.ROOK&&!i.hasMoved&&n?.type===r.KING&&(this.setPiece(3,e,i),this.setPiece(0,e,null),this.setPiece(2,e,n),this.setPiece(4,e,null))}}updateEnPassantTarget(t,e,i,n,s){s?.type===r.PAWN&&Math.abs(n-e)===2&&t===i?this.enPassantTarget={x:i,y:(e+n)/2}:this.enPassantTarget=null}captureEnPassant(t,e,i,n){const s=this.getPiece(t,e);if(this.isEnPassantMove(t,e,i,n)&&s?.type===r.PAWN){const o=s.color===f.WHITE?-1:1,a=n+o,l=this.getPiece(i,a);if(l&&l.type===r.PAWN){this.grid[a][i]=null;const u={capturedWhite:[],capturedBlack:[]};return l.color===f.WHITE?u.capturedWhite.push(l.type):u.capturedBlack.push(l.type),S(l.type,l.color),u}}return null}isEnPassantMove(t,e,i,n){return this.enPassantTarget?this.getPiece(t,e)?.type===r.PAWN&&i===this.enPassantTarget.x&&n===this.enPassantTarget.y&&Math.abs(t-i)===1&&Math.abs(e-n)===1:!1}async promotePawn(t,e,i){const n=this.getPiece(t,e)?.color;if(n)switch(i){case"queen":this.grid[e][t]=await g(r.QUEEN,n);break;case"rook":this.grid[e][t]=await g(r.ROOK,n);break;case"bishop":this.grid[e][t]=await g(r.BISHOP,n);break;case"knight":this.grid[e][t]=await g(r.KNIGHT,n);break}}isKingInCheck(t){const e=this.findKing(t);if(!e)return!1;for(let i=0;i<8;i++)for(let n=0;n<8;n++){const s=this.getPiece(n,i);if(s&&s.color!==t&&s.isValidMove(n,i,e.x,e.y,this))return!0}return!1}isCheckmate(t){if(!this.isKingInCheck(t))return!1;for(let e=0;e<8;e++)for(let i=0;i<8;i++){const n=this.getPiece(i,e);if(n&&n.color===t){const s=this.getValidMoves(i,e);for(const o of s){const a=this.getPiece(o.x,o.y);this.grid[o.y][o.x]=n,this.grid[e][i]=null;const l=!this.isKingInCheck(t);if(this.grid[e][i]=n,this.grid[o.y][o.x]=a,l)return!1}}}return!0}isStalemate(t){if(this.isKingInCheck(t))return!1;for(let e=0;e<8;e++)for(let i=0;i<8;i++){const n=this.getPiece(i,e);if(n&&n.color===t){for(let s=0;s<8;s++)for(let o=0;o<8;o++)if(n.isValidMove(i,e,o,s,this)){const a=this.getPiece(o,s);this.grid[s][o]=n,this.grid[e][i]=null;const l=!this.isKingInCheck(t);if(this.grid[e][i]=n,this.grid[s][o]=a,l)return!1}}}return!0}findKing(t){for(let e=0;e<8;e++)for(let i=0;i<8;i++){const n=this.getPiece(i,e);if(n&&n?.type===r.KING&&n.color===t)return{x:i,y:e}}return null}isKing(t,e){return this.getPiece(t,e)?.type===r.KING}isSquareUnderAttack(t,e,i){for(let n=0;n<8;n++)for(let s=0;s<8;s++){const o=this.getPiece(s,n);if(o&&o.color!==i&&o.isValidMove(s,n,t,e,this))return!0}return!1}isInsufficientMaterial(){const t=this.grid.flat().filter(e=>e!==null);return t.length<=2?!0:t.length===3&&t.some(e=>e?.type===r.BISHOP||e?.type===r.KNIGHT)}isFiftyMoveRule(){return this.halfMoveCount>=50}setPiece(t,e,i){this.grid[e][t]=i}isMoveValid(t,e,i,n){const s=this.getPiece(t,e);if(!s||i<0||i>=8||n<0||n>=8||!s.isValidMove(t,e,i,n,this))return!1;const o=this.getPiece(i,n);return!(o&&o.color===s.color)}isCapture(t,e,i,n){const s=this.isWithinBounds(t,e)?this.getPiece(t,e):null,o=this.isWithinBounds(i,n)?this.getPiece(i,n):null;return s!==null&&o!==null&&s.color!==o.color}static async fromData(t){const e=new K;return await e.init(),e.grid=await Promise.all(t.grid.map(async i=>Promise.all(i.map(async n=>n?await H.fromData(n):null)))),e}toData(){return{grid:this.grid.map(t=>t.map(e=>e?e.toData():null))}}isAdjacentToAnotherKing(t,e,i){const n=[{dx:-1,dy:-1},{dx:-1,dy:0},{dx:-1,dy:1},{dx:0,dy:-1},{dx:0,dy:1},{dx:1,dy:-1},{dx:1,dy:0},{dx:1,dy:1}];for(const{dx:s,dy:o}of n){const a=t+s,l=e+o,u=this.isWithinBounds(a,l)?this.getPiece(a,l):null;if(u?.type===r.KING&&u.color!==i)return!0}return!1}clone(){const t=new K;return t.grid=this.grid.map(e=>e.map(i=>i?Object.create(Object.getPrototypeOf(i),Object.getOwnPropertyDescriptors(i)):null)),t.enPassantTarget=this.enPassantTarget?{...this.enPassantTarget}:null,t.halfMoveCount=this.halfMoveCount,t}getPieceCount(){return this.grid.flat().filter(t=>t!==null).length}isGameOver(){return this.isCheckmate(f.WHITE)||this.isCheckmate(f.BLACK)||this.isStalemate(f.WHITE)||this.isStalemate(f.BLACK)||this.isInsufficientMaterial()?!0:this.isFiftyMoveRule()}getWinner(){return this.isCheckmate(f.BLACK)?f.WHITE:this.isCheckmate(f.WHITE)?f.BLACK:(this.isStalemate(f.WHITE)||this.isStalemate(f.BLACK)||this.isInsufficientMaterial()||this.isFiftyMoveRule(),null)}getPieces(){return this.grid.flat().filter(t=>t!==null)}setPlayerColor(t){this.currentPlayer=t}getPlayerColor(){return this.currentPlayer}}const V={[r.PAWN]:1,[r.KNIGHT]:3,[r.BISHOP]:3.25,[r.ROOK]:5,[r.QUEEN]:9,[r.KING]:0},R={[r.PAWN]:[[0,0,0,0,0,0,0,0],[.5,.5,.5,.5,.5,.5,.5,.5],[.1,.1,.2,.3,.3,.2,.1,.1],[.05,.05,.1,.25,.25,.1,.05,.05],[0,0,0,.2,.2,0,0,0],[.05,-.05,-.1,0,0,-.1,-.05,.05],[.05,.1,.1,-.2,-.2,.1,.1,.05],[0,0,0,0,0,0,0,0]],[r.KNIGHT]:[[-.5,-.4,-.3,-.3,-.3,-.3,-.4,-.5],[-.4,-.2,0,0,0,0,-.2,-.4],[-.3,0,.1,.15,.15,.1,0,-.3],[-.3,.05,.15,.2,.2,.15,.05,-.3],[-.3,0,.15,.2,.2,.15,0,-.3],[-.3,.05,.1,.15,.15,.1,.05,-.3],[-.4,-.2,0,.05,.05,0,-.2,-.4],[-.5,-.4,-.3,-.3,-.3,-.3,-.4,-.5]],[r.BISHOP]:[[-.2,-.1,-.1,-.1,-.1,-.1,-.1,-.2],[-.1,0,0,0,0,0,0,-.1],[-.1,0,.05,.1,.1,.05,0,-.1],[-.1,.05,.05,.1,.1,.05,.05,-.1],[-.1,0,.1,.1,.1,.1,0,-.1],[-.1,.1,.1,.1,.1,.1,.1,-.1],[-.1,.05,0,0,0,0,.05,-.1],[-.2,-.1,-.1,-.1,-.1,-.1,-.1,-.2]],[r.ROOK]:[[0,0,0,0,0,0,0,0],[.05,.1,.1,.1,.1,.1,.1,.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[-.05,0,0,0,0,0,0,-.05],[0,0,0,.05,.05,0,0,0]],[r.QUEEN]:[[-.2,-.1,-.1,-.05,-.05,-.1,-.1,-.2],[-.1,0,0,0,0,0,0,-.1],[-.1,0,.05,.05,.05,.05,0,-.1],[-.05,0,.05,.05,.05,.05,0,-.05],[0,0,.05,.05,.05,.05,0,-.05],[-.1,.05,.05,.05,.05,.05,0,-.1],[-.1,0,.05,0,0,0,0,-.1],[-.2,-.1,-.1,-.05,-.05,-.1,-.1,-.2]],[r.KING]:[[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.3,-.4,-.4,-.5,-.5,-.4,-.4,-.3],[-.2,-.3,-.3,-.4,-.4,-.3,-.3,-.2],[-.1,-.2,-.2,-.2,-.2,-.2,-.2,-.1],[.2,.2,0,0,0,0,.2,.2],[.2,.3,0,0,0,0,.3,.2]]},X={"3,3":.5,"3,4":.5,"4,3":.5,"4,4":.5,"2,3":.25,"2,4":.25,"3,2":.25,"4,2":.25,"4,5":.25,"3,5":.25,"5,3":.25,"5,4":.25};function D(c,t){const e=c.findKing(t);return e&&c.isSquareUnderAttack(e.x,e.y,t)?-.5:0}function L(c,t,e,i){const n=R[c];return n?i?n[7-e][7-t]:n[e][t]:0}function T(c,t,e=!1){let i=0;for(let n=0;n<8;n++)for(let s=0;s<8;s++){const o=c.getPiece(s,n);if(o){let a=V[o.type];a+=L(o.type,s,n,e);const l=`${s},${n}`;X[l]&&(a+=X[l]),o.type===r.PAWN&&(a+=E(c,s,n,o.color),C(c,s,n,o.color)&&(a+=1)),o.type===r.PAWN&&(a+=E(c,s,n,o.color),C(c,s,n,o.color)&&(a+=1)),o.type===r.KING&&q(c,s,n,o.color)&&(a-=.5),i+=o.color===t?a:-a}}return parseFloat(i.toFixed(2))}function E(c,t,e,i){let n=0;return n-=_(c,t,e,i)*1.5,n-=j(c,t,e,i)*1.5,n+=C(c,t,e,i)?1:0,n}function _(c,t,e,i){for(let n=0;n<8;n++)if(n!==e&&c.getPiece(t,n)?.type===r.PAWN&&c.getPiece(t,n)?.color===i)return .5;return 0}function j(c,t,e,i){const n=t-1>=0?c.getPiece(t-1,e):null,s=t+1<8?c.getPiece(t+1,e):null;return(!n||n.type!==r.PAWN||n.color!==i)&&(!s||s.type!==r.PAWN||s.color!==i)?1.5:0}function q(c,t,e,i){const n=c.getPiece(t,e);return n&&n.type===r.KING?[{dx:-1,dy:0},{dx:1,dy:0},{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:-1},{dx:1,dy:1},{dx:-1,dy:1},{dx:1,dy:-1}].some(({dx:o,dy:a})=>{const l=t+o,u=e+a;if(!c.isWithinBounds(l,u))return!1;const m=c.getPiece(l,u);return!m||m.color!==i||m.type!==r.PAWN}):!1}function C(c,t,e,i){const n=i===f.WHITE?-1:1;for(let o=e+n;o>=0&&o<8;o+=n){const a=c.getPiece(t,o);if(a&&a.type===r.PAWN&&a.color!==i)return!1}return[t-1,t+1].every(o=>{if(o<0||o>=8)return!0;for(let a=0;a<8;a++){const l=c.getPiece(o,a);if(l&&l.type===r.PAWN&&l.color===i)return!1}return!0})}function U(c,t){return t?{fromX:7-c.fromX,fromY:7-c.fromY,toX:7-c.toX,toY:7-c.toY}:c}function $(c,t,e=!1){const i=c.getPieces();let n=null;return i.length===3&&p(i,r.KING,t)&&p(i,r.ROOK,t)&&p(i,r.KING,d(t))?n=Q(c,t):i.length===4&&p(i,r.KING,t)&&p(i,r.BISHOP,t)&&p(i,r.KNIGHT,t)&&p(i,r.KING,d(t))?n=F(c,t):i.length===4&&p(i,r.KING,t)&&p(i,r.BISHOP,t)&&i.filter(s=>s.type===r.BISHOP&&s.color===t).length===2&&p(i,r.KING,d(t))?n=z(c,t):i.length===3&&p(i,r.KING,t)&&p(i,r.PAWN,t)&&p(i,r.KING,d(t))&&(n=J(c,t)),n?U(n,t===f.BLACK||e):null}function p(c,t,e){return c.some(i=>i.type===t&&i.color===e)}function d(c){return c===f.WHITE?f.BLACK:f.WHITE}function Q(c,t){const e=v(c,r.KING,d(t)),i=v(c,r.ROOK,t);return!e||!i?null:e.x<4?{fromX:i.x,fromY:i.y,toX:e.x+1,toY:e.y}:{fromX:i.x,fromY:i.y,toX:e.x-1,toY:e.y}}function F(c,t){const e=v(c,r.KING,d(t)),i=v(c,r.KNIGHT,t),n=v(c,r.BISHOP,t);return!e||!i||!n?null:e.x<4?{fromX:i.x,fromY:i.y,toX:e.x+1,toY:e.y}:{fromX:n.x,fromY:n.y,toX:e.x-1,toY:e.y}}function z(c,t){const e=v(c,r.KING,d(t)),i=Z(c,r.BISHOP,t);return!e||i.length<2?null:{fromX:i[0].x,fromY:i[0].y,toX:e.x,toY:e.y>4?e.y-1:e.y+1}}function J(c,t){const e=v(c,r.KING,d(t)),i=v(c,r.PAWN,t);if(!e||!i)return null;const n=t===f.WHITE?1:-1;return{fromX:i.x,fromY:i.y,toX:i.x,toY:i.y+n}}function v(c,t,e){for(let i=0;i<8;i++)for(let n=0;n<8;n++){const s=c.getPiece(n,i);if(s&&s.type===t&&s.color===e)return{x:n,y:i}}return null}function Z(c,t,e){const i=[];for(let n=0;n<8;n++)for(let s=0;s<8;s++){const o=c.getPiece(s,n);o&&o.type===t&&o.color===e&&i.push({x:s,y:n})}return i}const w={"e2e4 e7e5 g1f3 b8c6 f1b5":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:3},{fromX:6,fromY:7,toX:5,toY:5},{fromX:1,fromY:0,toX:2,toY:2},{fromX:5,fromY:7,toX:1,toY:5}],"e2e4 c7c5":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:2,fromY:1,toX:2,toY:3}],"e2e4 c7c5 g1f3 d7d6":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:2,fromY:1,toX:2,toY:3},{fromX:6,fromY:7,toX:5,toY:5},{fromX:3,fromY:1,toX:3,toY:2}],"d2d4 d7d5 c2c4":[{fromX:3,fromY:6,toX:3,toY:4},{fromX:3,fromY:1,toX:3,toY:3},{fromX:2,fromY:6,toX:2,toY:4}],"e2e4 c7c6":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:2,fromY:1,toX:2,toY:2}],"e2e4 c7c6 d2d4 d7d5":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:2,fromY:1,toX:2,toY:2},{fromX:3,fromY:6,toX:3,toY:4},{fromX:3,fromY:1,toX:3,toY:3}],"e2e4 e7e6":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:2}],"e2e4 e7e6 d2d4 d7d5":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:2},{fromX:3,fromY:6,toX:3,toY:4},{fromX:3,fromY:1,toX:3,toY:3}],"e2e4 e7e5 g1f3 b8c6 f1c4":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:3},{fromX:6,fromY:7,toX:5,toY:5},{fromX:1,fromY:0,toX:2,toY:2},{fromX:5,fromY:7,toX:2,toY:4}],"e2e4 g8f6":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:6,fromY:0,toX:5,toY:2}],"e2e4 d7d6":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:3,fromY:1,toX:3,toY:2}],"e2e4 e7e5 g1f3 b8c6 d2d4":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:3},{fromX:6,fromY:7,toX:5,toY:5},{fromX:1,fromY:0,toX:2,toY:2},{fromX:3,fromY:6,toX:3,toY:4}],"e2e4 e7e5 f2f4":[{fromX:4,fromY:6,toX:4,toY:4},{fromX:4,fromY:1,toX:4,toY:3},{fromX:5,fromY:6,toX:5,toY:4}],c2c4:[{fromX:2,fromY:6,toX:2,toY:4}],"g1f3 d7d5":[{fromX:6,fromY:7,toX:5,toY:5},{fromX:3,fromY:1,toX:3,toY:3}]};function b(c,t){return t?{fromX:7-c.fromX,fromY:7-c.fromY,toX:7-c.toX,toY:7-c.toY}:c}function tt(c,t){const e=c.join(" ");return t[e]?.[c.length]??null}class et{constructor(t,e=5e3){this.color=t,this.transpositionTable=new Map,this.maxTime=e,this.killerMoves=new Map,this.startTime=0}openingMoves=w;transpositionTable;maxTime;startTime;killerMoves;makeMove(t){const e=this.getOpeningMove(t);if(e)return e;const i=this.getPastMoves(),n=this.chooseMove(i);if(n||n)return n;const s=this.useEndgameTablebase(t);if(s)return s;if(this.shouldUseMCTS(t))return this.mcts(t);let o=null,a=-1/0;const l=10;this.startTime=Date.now();for(let u=1;u<=l;u++){let m=this.getAllValidMoves(t);m=this.sortMoves(m,t,u);for(const h of m){const P=t.getPiece(h.fromX,h.fromY);if(!P)continue;const y=t.getPiece(h.toX,h.toY);t.movePiece(h.fromX,h.fromY,h.toX,h.toY);const M=t.isKingInCheck(this.color)||this.isCriticalMove(P,h,t)?u+1:u,I=this.minimax(t,M-1,-1/0,1/0,!1);if(t.setPiece(h.fromX,h.fromY,P),t.setPiece(h.toX,h.toY,y),I>a&&(a=I,o=h),Date.now()-this.startTime>this.maxTime)break}if(Date.now()-this.startTime>this.maxTime)break}return o}getPastMoves(){return[]}minimax(t,e,i,n,s){const o=t.toString();if(Date.now()-this.startTime>this.maxTime)return this.evaluatePositionWithKingSafety(t,this.color);if(this.transpositionTable.has(o))return this.transpositionTable.get(o);if(e>1&&!t.isKingInCheck(this.color)&&-this.minimax(t,e-2,-n,-i,!s)>=n)return n;if(e===0||t.isCheckmate(this.color)||t.isCheckmate(this.getOpponentColor())||Date.now()-this.startTime>this.maxTime){const a=this.quiescenceSearch(t,i,n);return this.transpositionTable.set(o,a),a}if(s){let a=-1/0,l=this.getAllValidMoves(t);l=this.sortMoves(l,t,e);for(const u of l){const m=t.getPiece(u.fromX,u.fromY),h=t.getPiece(u.toX,u.toY);t.movePiece(u.fromX,u.fromY,u.toX,u.toY);const P=this.minimax(t,e-1,i,n,!1);if(t.setPiece(u.fromX,u.fromY,m),t.setPiece(u.toX,u.toY,h),a=Math.max(a,P),i=Math.max(i,P),n<=i){this.addKillerMove(e,u);break}}return this.transpositionTable.set(o,a),a}else{let a=1/0,l=this.getAllValidMoves(t);l=this.sortMoves(l,t,e);for(let u=0;u<l.length;u++){const m=l[u],h=t.getPiece(m.fromX,m.fromY),P=t.getPiece(m.toX,m.toY),Y=u>3&&e>2?e-1:e,M=t.isKingInCheck(this.getOpponentColor()),I=h&&h.type===r.PAWN&&(m.toY===0||m.toY===7),x=M||I?Y+1:Y;t.movePiece(m.fromX,m.fromY,m.toX,m.toY);const W=this.minimax(t,x-1,i,n,!0);if(t.setPiece(m.fromX,m.fromY,h),t.setPiece(m.toX,m.toY,P),a=Math.min(a,W),n=Math.min(n,W),n<=i){this.addKillerMove(e,m);break}}return this.transpositionTable.set(o,a),a}}chooseMove(t){const e=tt(t,w);return e||null}addKillerMove(t,e){const i=this.killerMoves.get(t)||[],n=i.find(s=>s.move.fromX===e.fromX&&s.move.fromY===e.fromY);n?n.score+=1:i.push({move:e,score:1}),this.killerMoves.set(t,i.toSorted((s,o)=>o.score-s.score).slice(0,2))}quiescenceSearch(t,e,i,n=0){if(n>=5)return T(t,this.color);const o=T(t,this.color);if(o>=i)return i;e<o&&(e=o);const a=this.getAllValidMoves(t).filter(l=>t.isCapture(l.fromX,l.fromY,l.toX,l.toY));for(const l of a){const u=t.getPiece(l.fromX,l.fromY),m=t.getPiece(l.toX,l.toY);if(t.movePiece(l.fromX,l.fromY,l.toX,l.toY),!t.isKingInCheck(this.color)){const P=-this.quiescenceSearch(t,-i,-e,n+1);if(t.setPiece(l.fromX,l.fromY,u),t.setPiece(l.toX,l.toY,m),P>=i)return i;P>e&&(e=P)}else t.setPiece(l.fromX,l.fromY,u),t.setPiece(l.toX,l.toY,m)}return e}getOpponentColor(){return this.color===f.WHITE?f.BLACK:f.WHITE}getAllValidMoves(t){const e=[];for(let i=0;i<8;i++)for(let n=0;n<8;n++){const s=t.getPiece(n,i);if(s&&s.color===this.color){const o=t.getValidMoves(n,i);for(const a of o)if(t.isMoveValid(n,i,a.x,a.y)){const l=t.getPiece(a.x,a.y);t.setPiece(a.x,a.y,s),t.setPiece(n,i,null);const u=!t.isKingInCheck(this.color);t.setPiece(n,i,s),t.setPiece(a.x,a.y,l),u&&e.push({fromX:n,fromY:i,toX:a.x,toY:a.y})}}}return e}sortMoves(t,e,i){return t.sort((n,s)=>{const o=this.killerMoves.get(i);if(o&&o.some(h=>h.move.fromX===n.fromX&&h.move.fromY===n.fromY))return-1;const a=e.getPiece(n.toX,n.toY),l=e.getPiece(s.toX,s.toY);if(a&&!l)return-1;if(!a&&l)return 1;const u=X[`${n.toX},${n.toY}`]||0;return(X[`${s.toX},${s.toY}`]||0)-u})}mcts(t){const i=new Map,n=this.getAllValidMoves(t);for(let m=0;m<1e3;m++){const h=n[Math.floor(Math.random()*n.length)];if(!h||h.fromX===void 0||h.fromY===void 0||h.toX===void 0||h.toY===void 0)continue;const P=this.simulateRandomGame(t,h),y=`${h.fromX},${h.fromY},${h.toX},${h.toY}`;i.set(y,(i.get(y)??0)+P)}if(i.size===0)return null;const s=Array.from(i.entries()).reduce((m,h)=>h[1]>m[1]?h:m)[0],[o,a,l,u]=s.split(",").map(Number);return{fromX:o,fromY:a,toX:l,toY:u}}evaluatePositionWithKingSafety(t,e){let i=T(t,e);const n=D(t,e);return i+=n,i}simulateRandomGame(t,e){if(!e||e.fromX===void 0||e.fromY===void 0||e.toX===void 0||e.toY===void 0)return console.error("Invalid move:",e),0;const i=t.clone();i.movePiece(e.fromX,e.fromY,e.toX,e.toY);let n=this.color,s=this.getAllValidMoves(i);for(;!i.isGameOver()&&s.length>0;){const o=s[Math.floor(Math.random()*s.length)];if(!o||o.fromX===void 0||o.fromY===void 0||o.toX===void 0||o.toY===void 0){console.error("Invalid random move:",o);break}i.movePiece(o.fromX,o.fromY,o.toX,o.toY),n=n===f.WHITE?f.BLACK:f.WHITE,s=this.getAllValidMoves(i)}return i.getWinner()===this.color?1:i.getWinner()===null?.5:0}shouldUseMCTS(t){return t.getPieceCount()<=10}useEndgameTablebase(t){return t.getPieceCount()<=4?$(t,this.color):null}isCriticalMove(t,e,i){const n=i.getPiece(e.toX,e.toY);return n&&n.color!==t.color&&n.type!==r.PAWN}getOpeningMove(t){const e=this.getBoardHash(t);if(this.openingMoves[e]){const i=this.openingMoves[e][0];return b(i,this.color===f.BLACK)}return null}getBoardHash(t){let e="";for(let i=0;i<8;i++)for(let n=0;n<8;n++){const s=t.getPiece(n,i);if(s){const o=s.color===f.WHITE?s.type:s.type.toLowerCase();e+=o+n+i+" "}}return e.trim()}}class k extends H{hasMoved=!1;_toX=null;_toY=null;_board=null;constructor(t){super(t,r.PAWN)}isValidMove(t,e,i,n,s){const o=s.getPlayerColor(),a=this.color===f.WHITE?1:-1,l=this.color===f.WHITE?1:6,u=(n-e)*a,m=Math.abs(i-t),h=o===f.WHITE?7:0;if(m===0&&u===1&&!s.getPiece(i,n))return n===h?this.handlePromotion(i,n,s):!0;if(m===1&&u===1){if(s.getPiece(i,n)&&this.canCapture(i,n,s))return n===h?this.handlePromotion(i,n,s):!0;if(s.isEnPassantMove(t,e,i,n))return s.captureEnPassantIfValid(t,e,i,n),!0}return m===0&&u===2&&e===l&&!s.getPiece(i,n)&&!s.getPiece(t,e+a)?(s.updateEnPassantTarget(t,e,i,n,this),!0):!1}handlePromotion(t,e,i){return this._toX=t,this._toY=e,this._board=i,!0}}var it=Object.freeze({__proto__:null,Pawn:k});let N;self.onmessage=async c=>{const{boardData:t,aiColor:e}=c.data;N=new et(e);const i=await K.fromData(t),n=N.makeMove(i);let s=null;if(n&&i.isCapture(n.fromX,n.fromY,n.toX,n.toY)){const a=i.getPiece(n.toX,n.toY);a&&(s={capturedWhite:[],capturedBlack:[]},a.color===f.WHITE?s.capturedWhite.push(a.type):s.capturedBlack.push(a.type))}let o=!1;if(n&&i.getPiece(n.fromX,n.fromY)?.type===r.PAWN){const a=i.getPiece(n.fromX,n.fromY);if(a instanceof k){const l=e===f.WHITE?7:0;n.toY===l&&(o=a.handlePromotion(n.toX,n.toY,i))}}self.postMessage({bestMove:n,captureData:s,promotionRequired:o})};export{H as P,r as a,g as c};
//# sourceMappingURL=ai.worker-DEaJkhjr.js.map
