{"version":3,"file":"king-CVfeJL74.js","sources":["../../src/pieces/king.ts"],"sourcesContent":["import { BoardInterface, Piece, PieceColor, PieceType } from '../piece';\n\nexport class King extends Piece {\n  public hasMoved: boolean = false;\n  public readonly type: PieceType = PieceType.KING;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.KING);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    if (toX < 0 || toX >= 8 || toY < 0 || toY >= 8) {\n      return false;\n    }\n\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n\n    // Mouvement classique du roi\n    if (dx <= 1 && dy <= 1) {\n      return (\n        this.canCapture(toX, toY, board) &&\n        !board.isAdjacentToAnotherKing(toX, toY, this.color)\n      );\n    }\n\n    // Vérifications pour le roque\n    if (!this.hasMoved && dy === 0 && dx === 2) {\n      if (board.isSquareUnderAttack(fromX, fromY, this.color)) {\n        return false;\n      }\n\n      const direction = toX > fromX ? 1 : -1;\n      const rookX = toX > fromX ? 7 : 0;\n      const rook = board.getPiece(rookX, fromY);\n\n      if (rook && rook.type === PieceType.ROOK && !rook.hasMoved) {\n        for (let x = fromX + direction; x !== toX; x += direction) {\n          if (\n            board.getPiece(x, fromY) ||\n            board.isSquareUnderAttack(x, fromY, this.color)\n          ) {\n            return false;\n          }\n        }\n        return (\n          !board.isSquareUnderAttack(toX, fromY, this.color) &&\n          !board.isAdjacentToAnotherKing(toX, toY, this.color)\n        );\n      }\n    }\n\n    return false;\n  }\n\n  // Nouvelle méthode pour vérifier les menaces sans règles spécifiques du roi\n  public static isThreatenedMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    return dx <= 1 && dy <= 1;\n  }\n}\n"],"names":["King","Piece","PieceType","color","fromX","fromY","toX","toY","board","dx","dy","direction","rookX","rook","x"],"mappings":"+CAEO,MAAMA,UAAaC,CAAM,CACvB,SAAoB,GACX,KAAkBC,EAAU,KAE5C,YAAYC,EAAmB,CACvB,MAAAA,EAAOD,EAAU,IAAI,CAAA,CAG7B,YACEE,EACAC,EACAC,EACAC,EACAC,EACS,CACT,GAAIF,EAAM,GAAKA,GAAO,GAAKC,EAAM,GAAKA,GAAO,EACpC,MAAA,GAGT,MAAME,EAAK,KAAK,IAAIH,EAAMF,CAAK,EACzBM,EAAK,KAAK,IAAIH,EAAMF,CAAK,EAG3B,GAAAI,GAAM,GAAKC,GAAM,EACnB,OACE,KAAK,WAAWJ,EAAKC,EAAKC,CAAK,GAC/B,CAACA,EAAM,wBAAwBF,EAAKC,EAAK,KAAK,KAAK,EAKvD,GAAI,CAAC,KAAK,UAAYG,IAAO,GAAKD,IAAO,EAAG,CAC1C,GAAID,EAAM,oBAAoBJ,EAAOC,EAAO,KAAK,KAAK,EAC7C,MAAA,GAGH,MAAAM,EAAYL,EAAMF,EAAQ,EAAI,GAC9BQ,EAAQN,EAAMF,EAAQ,EAAI,EAC1BS,EAAOL,EAAM,SAASI,EAAOP,CAAK,EAExC,GAAIQ,GAAQA,EAAK,OAASX,EAAU,MAAQ,CAACW,EAAK,SAAU,CAC1D,QAASC,EAAIV,EAAQO,EAAWG,IAAMR,EAAKQ,GAAKH,EAE5C,GAAAH,EAAM,SAASM,EAAGT,CAAK,GACvBG,EAAM,oBAAoBM,EAAGT,EAAO,KAAK,KAAK,EAEvC,MAAA,GAGX,MACE,CAACG,EAAM,oBAAoBF,EAAKD,EAAO,KAAK,KAAK,GACjD,CAACG,EAAM,wBAAwBF,EAAKC,EAAK,KAAK,KAAK,CAAA,CAEvD,CAGK,MAAA,EAAA,CAIT,OAAc,iBACZH,EACAC,EACAC,EACAC,EACS,CACT,MAAME,EAAK,KAAK,IAAIH,EAAMF,CAAK,EACzBM,EAAK,KAAK,IAAIH,EAAMF,CAAK,EACxB,OAAAI,GAAM,GAAKC,GAAM,CAAA,CAE5B"}