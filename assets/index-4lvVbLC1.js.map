{"version":3,"mappings":"0pDAEsB,eAAAA,EAAYC,EAAiBC,EAAmB,CACpE,OAAQD,EAAM,CACZ,KAAKE,EAAU,KACb,KAAM,CAAE,KAAAC,CAAA,EAAS,MAAMC,EAAA,qBAAAD,GAAA,aAAO,oBAAgB,cAAAA,CAAA,OACvC,WAAIA,EAAKF,CAAK,EACvB,KAAKC,EAAU,KACb,KAAM,CAAE,KAAAG,CAAA,EAAS,MAAMD,EAAA,qBAAAC,GAAA,aAAO,oBAAgB,cAAAA,CAAA,OACvC,WAAIA,EAAKJ,CAAK,EACvB,KAAKC,EAAU,OACb,KAAM,CAAE,OAAAI,CAAA,EAAW,MAAMF,EAAA,uBAAAE,GAAA,aAAO,sBAAkB,gBAAAA,CAAA,OAC3C,WAAIA,EAAOL,CAAK,EACzB,KAAKC,EAAU,OACb,KAAM,CAAE,OAAAK,CAAA,EAAW,MAAMH,EAAA,uBAAAG,GAAA,aAAO,sBAAkB,gBAAAA,CAAA,OAC3C,WAAIA,EAAON,CAAK,EACzB,KAAKC,EAAU,MACb,KAAM,CAAE,MAAAM,CAAA,EAAU,MAAMJ,EAAA,sBAAAI,GAAA,aAAO,qBAAiB,eAAAA,CAAA,OACzC,WAAIA,EAAMP,CAAK,EACxB,KAAKC,EAAU,KACb,KAAM,CAAE,KAAAO,CAAA,EAAS,MAAML,EAAA,qBAAAK,GAAA,aAAO,oBAAgB,cAAAA,CAAA,OACvC,WAAIA,EAAKR,CAAK,EACvB,QACE,MAAM,IAAI,MAAM,2BAA2BD,CAAI,EAAE,CACrD,CACF,CCrBY,IAAAU,OACVA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QAFEA,OAAA,IAKAR,OACVA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,MAAQ,QACRA,EAAA,KAAO,OANGA,OAAA,IAoCL,MAAeS,CAAM,CAGhB,YACDV,EACAD,EACP,CAFO,WAAAC,EACA,UAAAD,CACN,CALI,SAAoB,GAepB,YACLY,EACAC,EACAC,EACAC,EACAC,EACS,CACT,MAAMC,EAAK,KAAK,KAAKH,EAAMF,CAAK,EAC1BM,EAAK,KAAK,KAAKH,EAAMF,CAAK,EAEhC,IAAIM,EAAIP,EAAQK,EACZG,EAAIP,EAAQK,EACT,KAAAC,IAAML,GAAOM,IAAML,GAAK,CAC7B,GAAIC,EAAM,SAASG,EAAGC,CAAC,IAAM,KAAa,SACrCD,GAAAF,EACAG,GAAAF,CACP,CACO,QACT,CAEA,OAAO,OAAOG,EAA6B,CACzC,OAAOA,EAAM,OAAS,MACxB,CAEO,WAAWP,EAAaC,EAAaC,EAAgC,CAC1E,MAAMM,EAAcN,EAAM,SAASF,EAAKC,CAAG,EAC3C,MAAO,CAACO,GAAeA,EAAY,QAAU,KAAK,KACpD,CAGO,QAAc,CACZ,OACL,MAAO,KAAK,MACZ,KAAM,KAAK,KAEf,CAEA,aAAa,SAASC,EAA2B,CAC/C,OAAO,MAAMxB,EAAYwB,EAAK,KAAMA,EAAK,KAAK,CAChD,CAGA,MAAa,OAAwB,CACnC,OAAO,MAAMxB,EAAY,KAAK,KAAM,KAAK,KAAK,CAChD,CACF,CCtGO,IAAIyB,EAA0B,GAC1BC,EAA0B,GAE9B,SAASC,EAAYC,EAAiB,CAC3C,MAAMC,EAAqB,SAAS,eAClC,eAEFA,EAAmB,YAAcD,EACjCC,EAAmB,MAAM,QAAU,OACrC,CAEgB,SAAAC,EAAeR,EAAkBpB,EAA2B,CAC1E,OAAQoB,EAAO,CACb,KAAKnB,EAAU,KACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,KAAKR,EAAU,KACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,KAAKR,EAAU,OACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,KAAKR,EAAU,OACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,KAAKR,EAAU,MACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,KAAKR,EAAU,KACN,OAAAD,IAAUS,EAAW,MAAQ,IAAM,IAC5C,QACS,QACX,CACF,CAEgB,SAAAoB,EAAqBT,EAAkBpB,EAAmB,CAClE,MAAA8B,EAAcF,EAAeR,EAAOpB,CAAK,EAE3CA,IAAUS,EAAW,MACvBc,EAAc,KAAKO,CAAW,EAE9BN,EAAc,KAAKM,CAAW,EAGRC,GAC1B,CAEO,SAASA,GAA0B,CACxC,MAAMC,EAAuB,SAAS,eACpC,iBAEIC,EAAuB,SAAS,eACpC,iBAGED,IACmBA,EAAA,YAAcT,EAAc,KAAK,GAAG,GAEvDU,IACmBA,EAAA,YAAcT,EAAc,KAAK,GAAG,EAE7D,CCpDO,MAAMU,CAAgC,CACnC,KACA,gBAAmD,KACnD,cAAwB,EAEhC,aAAc,CACZ,KAAK,KAAO,EACd,CAEA,MAAa,MAAsB,CAC5B,UAAO,MAAM,KAAK,gBAAgB,CACzC,CAEA,MAAc,iBAA+C,CAC3D,MAAMnB,EAA4B,MAAM,CAAC,EACtC,KAAK,IAAI,EACT,IAAI,IAAM,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,EAGhC,OAAAA,EAAM,CAAC,EAAI,CACT,MAAMjB,EAAYG,EAAU,KAAMQ,EAAW,KAAK,EAClD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,MAAOQ,EAAW,KAAK,EACnD,MAAMX,EAAYG,EAAU,KAAMQ,EAAW,KAAK,EAClD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,KAAMQ,EAAW,KAAK,GAE9CM,EAAA,CAAC,EAAI,MAAM,QAAQ,IACvB,MAAM,CAAC,EACJ,KAAK,IAAI,EACT,IAAI,IAAMjB,EAAYG,EAAU,KAAMQ,EAAW,KAAK,CAAC,GAI5DM,EAAM,CAAC,EAAI,CACT,MAAMjB,EAAYG,EAAU,KAAMQ,EAAW,KAAK,EAClD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,MAAOQ,EAAW,KAAK,EACnD,MAAMX,EAAYG,EAAU,KAAMQ,EAAW,KAAK,EAClD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,OAAQQ,EAAW,KAAK,EACpD,MAAMX,EAAYG,EAAU,KAAMQ,EAAW,KAAK,GAE9CM,EAAA,CAAC,EAAI,MAAM,QAAQ,IACvB,MAAM,CAAC,EACJ,KAAK,IAAI,EACT,IAAI,IAAMjB,EAAYG,EAAU,KAAMQ,EAAW,KAAK,CAAC,GAGrDM,CACT,CAGO,eAAeG,EAAWC,EAAoB,CACnD,OAAOD,GAAK,GAAKA,EAAI,GAAKC,GAAK,GAAKA,EAAI,CAC1C,CAEO,SAASD,EAAWC,EAAwB,CACjD,OAAO,KAAK,KAAKA,CAAC,EAAED,CAAC,CACvB,CAEO,cAAcA,EAAWC,EAAuC,CACrE,IAAIC,EAAQ,KAER,GADA,KAAK,eAAeF,EAAGC,CAAC,IAAWC,EAAA,KAAK,SAASF,EAAGC,CAAC,GACrD,CAACC,EAAO,MAAO,GAEnB,MAAMe,EAAyC,GAE/C,QAASrB,EAAM,EAAGA,EAAM,EAAGA,IACzB,QAASD,EAAM,EAAGA,EAAM,EAAGA,IACrBO,EAAM,YAAYF,EAAGC,EAAGN,EAAKC,EAAK,IAAI,GACxCqB,EAAW,KAAK,CAAE,EAAGtB,EAAK,EAAGC,EAAK,EAKjC,OAAAqB,CACT,CAEO,gBAAkD,CACvD,OAAI,KAAK,cAAc1B,EAAW,KAAK,EAC9B,KAAK,SAASA,EAAW,KAAK,EAC5B,KAAK,cAAcA,EAAW,KAAK,EACrC,KAAK,SAASA,EAAW,KAAK,EAEhC,IACT,CAEO,UACLE,EACAC,EACAC,EACAC,EACS,CACT,GACE,CAAC,KAAK,eAAeH,EAAOC,CAAK,GACjC,CAAC,KAAK,eAAeC,EAAKC,CAAG,GAC7B,CAAC,YAAa,cAAe,WAAW,EAAE,SAASF,EAAM,SAAU,IACnE,CAAC,YAAa,cAAe,WAAW,EAAE,SAASE,EAAI,SAAU,GAE1D,SAGT,MAAMM,EAAQ,KAAK,SAAST,EAAOC,CAAK,EACpC,GAAAQ,GAASA,EAAM,YAAYT,EAAOC,EAAOC,EAAKC,EAAK,IAAI,EAAG,CAC5D,MAAMO,EAAc,KAAK,SAASR,EAAKC,CAAG,EAG1C,GAAIO,GAAeA,EAAY,OAASpB,EAAU,KACzC,SAIL,GAAAS,EAAM,OAAOU,CAAK,GAAK,KAAK,IAAIP,EAAMF,CAAK,IAAM,EACnD,OAAI,KAAK,gBAAgBS,EAAOT,EAAOC,EAAOC,CAAG,GAC1C,oBAAeA,EAAKD,CAAK,EACvB,IAEA,GAiBX,GAXEQ,GAAO,OAASnB,EAAU,MAC1B,KAAK,gBAAgBU,EAAOC,EAAOC,EAAKC,CAAG,GAE3C,KAAK,iBAAiBH,EAAOC,EAAOC,EAAKC,CAAG,EAI9C,KAAK,KAAKA,CAAG,EAAED,CAAG,EAAIO,EACtB,KAAK,KAAKR,CAAK,EAAED,CAAK,EAAI,KAGtB,KAAK,cAAcS,EAAM,KAAK,EAEhC,YAAK,KAAKR,CAAK,EAAED,CAAK,EAAIS,EAC1B,KAAK,KAAKN,CAAG,EAAED,CAAG,EAAIQ,EACf,GAIL,aAAcD,IACfA,EAAc,SAAW,IAE5B,KAAK,sBAAsBT,EAAOC,EAAOC,EAAKC,EAAKM,CAAK,EAGnD,mBACHA,EAAM,OAASnB,EAAU,MAAQoB,EAC7B,EACA,KAAK,cAAgB,EAG3B,MAAMe,EACJhB,EAAM,QAAUX,EAAW,MAAQA,EAAW,MAAQA,EAAW,MAC/D,YAAK,YAAY2B,CAAa,EACzB,EAIX,CAEO,QACT,CAEQ,gBACNC,EACA1B,EACAC,EACAC,EACS,CACH,MAAAyB,EAAYzB,EAAMF,EAAQ,EAAI,GAC9B4B,EAAQ1B,EAAMF,EAAQ,EAAI,EAC1B6B,EAAO,KAAK,SAASD,EAAO3B,CAAK,EAEvC,GAAM4B,GAAM,OAASvC,EAAU,MAASuC,EAAK,UAAYH,EAAK,SACrD,SAGT,QAASnB,EAAIP,EAAQ2B,EAAWpB,IAAML,EAAKK,GAAKoB,EAE5C,QAAK,SAASpB,EAAGN,CAAK,GACtB,KAAK,oBAAoBM,EAAGN,EAAOyB,EAAK,KAAK,EAEtC,SAIX,MACE,CAAC,KAAK,oBAAoB1B,EAAOC,EAAOyB,EAAK,KAAK,GAClD,CAAC,KAAK,oBAAoBxB,EAAKD,EAAOyB,EAAK,KAAK,CAEpD,CAEQ,eAAeI,EAAeC,EAAqB,CAErDD,IAAU,EACC,KAAK,SAAS,EAAGC,CAAK,GACzB,OAASzC,EAAU,MAC3B,KAAK,UAAU,EAAGyC,EAAO,EAAGA,CAAK,EAI5BD,IAAU,GACJ,KAAK,SAAS,EAAGC,CAAK,GACzB,OAASzC,EAAU,MAC3B,KAAK,UAAU,EAAGyC,EAAO,EAAGA,CAAK,CAGvC,CAEO,sBACL/B,EACAC,EACAC,EACAC,EACAM,EACM,CAEJA,GAAO,OAASnB,EAAU,MAC1B,KAAK,IAAIa,EAAMF,CAAK,IAAM,GAC1BD,IAAUE,EAGV,KAAK,gBAAkB,CAAE,EAAGA,EAAK,GAAID,EAAQE,GAAO,GAEpD,KAAK,gBAAkB,IAE3B,CAEO,iBACLH,EACAC,EACAC,EACAC,EACmE,CACnE,MAAMM,EAAQ,KAAK,SAAST,EAAOC,CAAK,EAGtC,QAAK,gBAAgBD,EAAOC,EAAOC,EAAKC,CAAG,GAC3CM,GAAO,OAASnB,EAAU,KAC1B,CACA,MAAMqC,EAAYlB,EAAM,QAAUX,EAAW,MAAQ,GAAK,EACpDkC,EAAgB7B,EAAMwB,EACtBM,EAAe,KAAK,SAAS/B,EAAK8B,CAAa,EAErD,GAAIC,GAAgBA,EAAa,OAAS3C,EAAU,KAAM,CACxD,KAAK,KAAK0C,CAAa,EAAE9B,CAAG,EAAI,KAGhC,MAAMgC,EAGF,CACF,cAAe,CAAC,EAChB,cAAe,CAAC,GAGd,OAAAD,EAAa,QAAUnC,EAAW,MACxBoC,EAAA,cAAc,KAAKD,EAAa,IAAI,EAEpCC,EAAA,cAAc,KAAKD,EAAa,IAAI,EAI7Bf,EAAAe,EAAa,KAAMA,EAAa,KAAK,EAEnDC,CACT,CACF,CACO,WACT,CAEO,gBACLlC,EACAC,EACAC,EACAC,EACS,CACL,OAAC,KAAK,gBAGI,KAAK,SAASH,EAAOC,CAAK,GAE/B,OAASX,EAAU,MAC1BY,IAAQ,KAAK,gBAAgB,GAC7BC,IAAQ,KAAK,gBAAgB,GAC7B,KAAK,IAAIH,EAAQE,CAAG,IAAM,GAC1B,KAAK,IAAID,EAAQE,CAAG,IAAM,EATM,EAWpC,CAEA,MAAa,YACXI,EACAC,EACA2B,EACe,CACf,MAAM9C,EAAQ,KAAK,SAASkB,EAAGC,CAAC,GAAG,MAEnC,GAAKnB,EAEL,OAAQ8C,EAAW,CACjB,IAAK,QACE,UAAK3B,CAAC,EAAED,CAAC,EAAI,MAAMpB,EAAYG,EAAU,MAAOD,CAAK,EAC1D,MACF,IAAK,OACE,UAAKmB,CAAC,EAAED,CAAC,EAAI,MAAMpB,EAAYG,EAAU,KAAMD,CAAK,EACzD,MACF,IAAK,SACE,UAAKmB,CAAC,EAAED,CAAC,EAAI,MAAMpB,EAAYG,EAAU,OAAQD,CAAK,EAC3D,MACF,IAAK,SACE,UAAKmB,CAAC,EAAED,CAAC,EAAI,MAAMpB,EAAYG,EAAU,OAAQD,CAAK,EAC3D,KACJ,CACF,CAEO,cAAcA,EAA4B,CACzC,MAAA+C,EAAe,KAAK,SAAS/C,CAAK,EACxC,GAAI,CAAC+C,EACI,SAGT,QAAS5B,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAME,EAAQ,KAAK,SAASF,EAAGC,CAAC,EAC5B,GAAAC,GAASA,EAAM,QAAUpB,GACvBoB,EAAM,YAAYF,EAAGC,EAAG4B,EAAa,EAAGA,EAAa,EAAG,IAAI,EACvD,QAGb,CAEK,QACT,CAEO,YAAY/C,EAA4B,CAC7C,GAAI,CAAC,KAAK,cAAcA,CAAK,EACpB,SAIT,QAASmB,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAME,EAAQ,KAAK,SAASF,EAAGC,CAAC,EAC5B,GAAAC,GAASA,EAAM,QAAUpB,EAAO,CAClC,MAAMgD,EAAQ,KAAK,cAAc9B,EAAGC,CAAC,EAErC,UAAW8B,KAAQD,EAAO,CAExB,MAAME,EAAgB,KAAK,SAASD,EAAK,EAAGA,EAAK,CAAC,EAClD,KAAK,KAAKA,EAAK,CAAC,EAAEA,EAAK,CAAC,EAAI7B,EAC5B,KAAK,KAAKD,CAAC,EAAED,CAAC,EAAI,KAElB,MAAMiC,EAAW,CAAC,KAAK,cAAcnD,CAAK,EAM1C,GAHA,KAAK,KAAKmB,CAAC,EAAED,CAAC,EAAIE,EAClB,KAAK,KAAK6B,EAAK,CAAC,EAAEA,EAAK,CAAC,EAAIC,EAExBC,EACK,QAEX,CACF,CACF,CAGK,QACT,CAEO,YAAYnD,EAA4B,CAE7C,GAAI,KAAK,cAAcA,CAAK,EAAU,SAEtC,QAASmB,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAME,EAAQ,KAAK,SAASF,EAAGC,CAAC,EAC5B,GAAAC,GAASA,EAAM,QAAUpB,GAC3B,QAASc,EAAM,EAAGA,EAAM,EAAGA,IACzB,QAASD,EAAM,EAAGA,EAAM,EAAGA,IACzB,GAAIO,EAAM,YAAYF,EAAGC,EAAGN,EAAKC,EAAK,IAAI,EAAG,CAE3C,MAAMoC,EAAgB,KAAK,SAASrC,EAAKC,CAAG,EAC5C,KAAK,KAAKA,CAAG,EAAED,CAAG,EAAIO,EACtB,KAAK,KAAKD,CAAC,EAAED,CAAC,EAAI,KAElB,MAAMkC,EAAa,CAAC,KAAK,cAAcpD,CAAK,EAM5C,GAHA,KAAK,KAAKmB,CAAC,EAAED,CAAC,EAAIE,EAClB,KAAK,KAAKN,CAAG,EAAED,CAAG,EAAIqC,EAElBE,EAAmB,QACzB,EAIR,CAEK,QACT,CAEQ,SAASpD,EAAoD,CACnE,QAASmB,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAME,EAAQ,KAAK,SAASF,EAAGC,CAAC,EAChC,GAAIC,GAASA,GAAO,OAASnB,EAAU,MAAQmB,EAAM,QAAUpB,EACtD,OAAE,EAAAkB,EAAG,EAAAC,EAEhB,CAEK,WACT,CAEO,OAAOD,EAAWC,EAAoB,CAEpC,OADO,KAAK,SAASD,EAAGC,CAAC,GAClB,OAASlB,EAAU,IACnC,CAEO,oBAAoBiB,EAAWC,EAAWnB,EAA4B,CAC3E,QAASY,EAAQ,EAAGA,EAAQ,EAAGA,IAC7B,QAASD,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,MAAMS,EAAQ,KAAK,SAAST,EAAOC,CAAK,EACpC,GAAAQ,GAASA,EAAM,QAAUpB,GACvBoB,EAAM,YAAYT,EAAOC,EAAOM,EAAGC,EAAG,IAAI,EACrC,QAGb,CAEK,QACT,CAGO,wBAAkC,CACjC,MAAAkC,EAAS,KAAK,KAAK,OAAO,OAAQjC,GAAUA,IAAU,IAAI,EAG5D,OAAAiC,EAAO,QAAU,EAAU,GAE7BA,EAAO,SAAW,GAClBA,EAAO,KACJjC,GACCA,GAAO,OAASnB,EAAU,QAAUmB,GAAO,OAASnB,EAAU,OAGtE,CAGO,iBAA2B,CAChC,OAAO,KAAK,eAAiB,EAC/B,CAEO,SAASiB,EAAWC,EAAWC,EAA2B,CAC/D,KAAK,KAAKD,CAAC,EAAED,CAAC,EAAIE,CACpB,CAGO,YACLkC,EACAC,EACAC,EACAC,EACS,CACT,MAAMrC,EAAQ,KAAK,SAASkC,EAASC,CAAO,EAaxC,GAVA,CAACnC,GAKDoC,EAAQ,GAAKA,GAAS,GAAKC,EAAQ,GAAKA,GAAS,GAKjD,CAACrC,EAAM,YAAYkC,EAASC,EAASC,EAAOC,EAAO,IAAI,EAClD,SAIT,MAAMC,EAAmB,KAAK,SAASF,EAAOC,CAAK,EACnD,MAAO,EAAEC,GAAoBA,EAAiB,QAAUtC,EAAM,MAChE,CAEO,UACLT,EACAC,EACAC,EACAC,EACS,CACH,MAAAM,EAAQ,KAAK,eAAeT,EAAOC,CAAK,EAC1C,KAAK,SAASD,EAAOC,CAAK,EAC1B,KACES,EAAc,KAAK,eAAeR,EAAKC,CAAG,EAC5C,KAAK,SAASD,EAAKC,CAAG,EACtB,KAGJ,OACEM,IAAU,MACVC,IAAgB,MAChBD,EAAM,QAAUC,EAAY,KAEhC,CAEA,aAAoB,SAASC,EAA2B,CAChD,MAAAP,EAAQ,IAAImB,EAClB,aAAMnB,EAAM,OACNA,EAAA,KAAO,MAAM,QAAQ,IACzBO,EAAK,KAAK,IAAI,MAAOqC,GACnB,QAAQ,IACNA,EAAI,IAAI,MAAOC,GACbA,EAAY,MAAMlD,EAAM,SAASkD,CAAS,EAAI,IAChD,CACF,CACF,GAEK7C,CACT,CAEO,QAAc,CACZ,OACL,KAAM,KAAK,KAAK,IAAK4C,GACnBA,EAAI,IAAKvC,GAAWA,EAAQA,EAAM,OAAO,EAAI,IAAK,CACpD,EAEJ,CAEO,wBACLF,EACAC,EACAnB,EACS,CACT,MAAM6D,EAAgB,CACpB,CAAE,GAAI,GAAI,GAAI,EAAG,EACjB,CAAE,GAAI,GAAI,GAAI,CAAE,EAChB,CAAE,GAAI,GAAI,GAAI,CAAE,EAChB,CAAE,GAAI,EAAG,GAAI,EAAG,EAChB,CAAE,GAAI,EAAG,GAAI,CAAE,EACf,CAAE,GAAI,EAAG,GAAI,EAAG,EAChB,CAAE,GAAI,EAAG,GAAI,CAAE,EACf,CAAE,GAAI,EAAG,GAAI,CAAE,GAGjB,SAAW,CAAE,GAAA7C,EAAI,GAAAC,CAAG,IAAK4C,EAAe,CACtC,MAAMC,EAAK5C,EAAIF,EACT+C,EAAK5C,EAAIF,EACTG,EAAQ,KAAK,eAAe0C,EAAIC,CAAE,EAAI,KAAK,SAASD,EAAIC,CAAE,EAAI,KACpE,GAAI3C,GAAO,OAASnB,EAAU,MAAQmB,EAAM,QAAUpB,EAC7C,QAEX,CACO,QACT,CAEO,OAAe,CACd,MAAAgE,EAAc,IAAI9B,EACZ,OAAA8B,EAAA,KAAO,KAAK,KAAK,IAAKL,GAChCA,EAAI,IAAKvC,GACPA,EACI,OAAO,OACL,OAAO,eAAeA,CAAK,EAC3B,OAAO,0BAA0BA,CAAK,GAExC,IACN,GAEF4C,EAAY,gBAAkB,KAAK,gBAC/B,CAAE,GAAG,KAAK,eACV,OACJA,EAAY,cAAgB,KAAK,cAC1BA,CACT,CAEO,eAAwB,CACtB,YAAK,KAAK,OAAO,OAAQ5C,GAAUA,IAAU,IAAI,EAAE,MAC5D,CAEO,YAAsB,CAkBvB,OAfF,KAAK,YAAYX,EAAW,KAAK,GACjC,KAAK,YAAYA,EAAW,KAAK,GAOjC,KAAK,YAAYA,EAAW,KAAK,GACjC,KAAK,YAAYA,EAAW,KAAK,GAM/B,KAAK,yBACA,GAIF,KAAK,iBACd,CAEO,WAA+B,CAEpC,OAAI,KAAK,YAAYA,EAAW,KAAK,EAC5BA,EAAW,MAIhB,KAAK,YAAYA,EAAW,KAAK,EAC5BA,EAAW,OAKlB,KAAK,YAAYA,EAAW,KAAK,GACjC,KAAK,YAAYA,EAAW,KAAK,GACjC,KAAK,uBACL,QAAK,kBAEE,KAIX,CAEO,WAAqB,CACnB,YAAK,KAAK,KAAK,EAAE,OAAQW,GAA0BA,IAAU,IAAI,CAC1E,CACF,CCloBO,MAAM6C,CAAK,CACC,MACT,SAER,aAAc,CACP,WAAQ,IAAI/B,EACZ,cAAW,IAAI,OAAO,IAA4C,iEACrE,KAAM,SACP,CACH,CAEA,MAAa,UAAkB,CACvB,kBAAK,MAAM,OACV,KAAK,KACd,CAEO,YAA4B,CAC1B,WAAI,QAASgC,GAAY,CACzB,cAAS,UAAaC,GAAU,CACnC,KAAM,CAAE,SAAAC,EAAU,YAAAvB,GAAgBsB,EAAM,KAEpCC,GACe,KAAK,MAAM,UAC1BA,EAAS,MACTA,EAAS,MACTA,EAAS,IACTA,EAAS,MAGKvB,IACdA,EAAY,cAAc,QAASzB,GACjCS,EAAqBT,EAAOX,EAAW,KAAK,GAE9CoC,EAAY,cAAc,QAASzB,GACjCS,EAAqBT,EAAOX,EAAW,KAAK,IAI1CyD,GAAA,EAGJ,MAAAG,EAAY,KAAK,MAAM,OAAO,EACpC,KAAK,SAAS,YAAY,CAAE,UAAAA,CAAW,GACxC,CACH,CACF,CC9CO,MAAMC,CAAe,CAU1B,YACUvD,EACRwD,EACQC,EAMR,CARQ,WAAAzD,EAEA,iBAAAyD,EAOH,YAAS,SAAS,eAAeD,CAAQ,EAC9C,KAAK,QAAU,KAAK,OAAO,WAAW,IAAI,EACrC,cAAW,KAAK,OAAO,MAAQ,EAG/B,YAAO,MAAM,OAAS,UAG3B,KAAK,OAAO,iBAAiB,YAAa,KAAK,gBAAgB,KAAK,IAAI,CAAC,EACzE,KAAK,OAAO,iBAAiB,YAAa,KAAK,gBAAgB,KAAK,IAAI,CAAC,EACzE,KAAK,OAAO,iBAAiB,UAAW,KAAK,cAAc,KAAK,IAAI,CAAC,CACvE,CA9BQ,OACA,QACS,SACT,cAA8B,KAC9B,OAAwB,KACxB,OAAwB,KACxB,iBAA+C,GAC/C,oBAAuD,KA0BxD,YACL5D,EACAC,EACAC,EACAC,EACAM,EACM,CAEN,IAAIqD,EAAe,EAEb,MAAAC,EAAS/D,EAAQ,KAAK,SACtBgE,EAAS/D,EAAQ,KAAK,SACtBgE,GAAW/D,EAAMF,GAAS,KAAK,SAAY,GAC3CkE,GAAW/D,EAAMF,GAAS,KAAK,SAAY,GAE3CkE,EAAU,IAAM,CAChBL,GAAgB,IAElB,KAAK,UAAU,EAEf,KAAK,QAAQ,UACXrD,EAAM,QAAUX,EAAW,MAAQ,QAAU,QAC/C,KAAK,QAAQ,KAAO,aACpB,KAAK,QAAQ,UAAY,SACzB,KAAK,QAAQ,aAAe,SAG5B,KAAK,QAAQ,SACX,KAAK,aAAaW,CAAK,EACvBsD,EAASE,EAASH,EAAe,KAAK,SAAW,EACjDE,EAASE,EAASJ,EAAe,KAAK,SAAW,GAGnDA,IACA,sBAAsBK,CAAO,GAG7B,KAAK,UAAU,CACjB,EAGMA,GACV,CAGA,oBAAoB9B,EAAyC,CAC3D,KAAK,QAAQ,UAAY,uBACnBA,EAAA,QAASC,GAAS,CACtB,KAAK,QAAQ,SACXA,EAAK,EAAI,KAAK,SACdA,EAAK,EAAI,KAAK,SACd,KAAK,SACL,KAAK,SACP,CACD,CACH,CAGO,WAAkB,CAEjB,MAAA8B,EAAc,KAAK,MAAM,eAAe,EACzC,yBAAsBA,EACvB,CAAE,EAAGA,EAAY,EAAG,EAAGA,EAAY,GACnC,KAGJ,KAAK,UAAU,EACf,KAAK,WAAW,CAClB,CAGQ,WAAkB,CACxB,QAAS5D,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAEtB,IAAA8D,GADgB9D,EAAIC,GAAK,IAAM,EACN,UAAY,UAIvC,KAAK,qBACL,KAAK,oBAAoB,IAAMD,GAC/B,KAAK,oBAAoB,IAAMC,IAEnB6D,EAAA,WAGd,KAAK,QAAQ,UAAYA,EACzB,KAAK,QAAQ,SACX9D,EAAI,KAAK,SACTC,EAAI,KAAK,SACT,KAAK,SACL,KAAK,SAET,CAEJ,CAGQ,YAAmB,CACzB,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAME,EAAQ,KAAK,MAAM,SAASF,EAAGC,CAAC,EAClCC,GACG,eAAUA,EAAOF,EAAGC,CAAC,CAE9B,CAEJ,CAGQ,UAAUC,EAAcF,EAAWC,EAAiB,CAC1D,KAAK,QAAQ,UAAYC,EAAM,QAAU,QAAU,QAAU,QAC7D,KAAK,QAAQ,KAAO,aACpB,KAAK,QAAQ,UAAY,SACzB,KAAK,QAAQ,aAAe,SACtB,MAAA6D,EAAY,KAAK,aAAa7D,CAAK,EACzC,KAAK,QAAQ,SACX6D,EACA/D,EAAI,KAAK,SAAW,KAAK,SAAW,EACpCC,EAAI,KAAK,SAAW,KAAK,SAAW,EAExC,CAGQ,aAAaC,EAAsB,CACzC,OAAQA,EAAM,KAAM,CAClB,IAAK,OACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,IAAK,OACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,IAAK,SACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,IAAK,SACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,IAAK,QACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,IAAK,OACI,OAAAA,EAAM,QAAU,QAAU,IAAM,IACzC,QACS,QACX,CACF,CAGQ,gBAAgB+C,EAAyB,CACzC,MAAAe,EAAO,KAAK,OAAO,sBAAsB,EACzChE,EAAI,KAAK,OAAOiD,EAAM,QAAUe,EAAK,MAAQ,KAAK,QAAQ,EAC1D/D,EAAI,KAAK,OAAOgD,EAAM,QAAUe,EAAK,KAAO,KAAK,QAAQ,EAEzD9D,EAAQ,KAAK,MAAM,SAASF,EAAGC,CAAC,EAClCC,IACF,KAAK,cAAgBA,EACrB,KAAK,OAASF,EACd,KAAK,OAASC,EACT,YAAO,MAAM,OAAS,WAG3B,KAAK,iBAAmB,KAAK,MAAM,cAAcD,EAAGC,CAAC,EAGrD,KAAK,UAAU,EACV,yBAAoB,KAAK,gBAAgB,EAElD,CAGQ,gBAAgBgD,EAAyB,CACzC,MAAAe,EAAO,KAAK,OAAO,sBAAsB,EACzChE,EAAI,KAAK,OAAOiD,EAAM,QAAUe,EAAK,MAAQ,KAAK,QAAQ,EAC1D/D,EAAI,KAAK,OAAOgD,EAAM,QAAUe,EAAK,KAAO,KAAK,QAAQ,EAG/D,IAAI9D,EAAQ,KAQR,GAPA,KAAK,MAAM,eAAeF,EAAGC,CAAC,IAAGC,EAAQ,KAAK,MAAM,SAASF,EAAGC,CAAC,GACjEC,GAAS,CAAC,KAAK,cACZ,YAAO,MAAM,OAAS,UACjB,KAAK,gBACV,YAAO,MAAM,OAAS,WAGzB,CAAC,KAAK,cAAe,OAGzB,KAAK,UAAU,EAGV,yBAAoB,KAAK,gBAAgB,EAExC,MAAA+D,EAAShB,EAAM,QAAUe,EAAK,KAC9BE,EAASjB,EAAM,QAAUe,EAAK,IAGpC,KAAK,QAAQ,UACX,KAAK,cAAc,QAAU,QAAU,QAAU,QACnD,KAAK,QAAQ,KAAO,aACpB,KAAK,QAAQ,UAAY,SACzB,KAAK,QAAQ,aAAe,SAC5B,MAAMD,EAAY,KAAK,aAAa,KAAK,aAAa,EACtD,KAAK,QAAQ,SAASA,EAAWE,EAAQC,CAAM,CACjD,CAGQ,cAAcjB,EAAyB,CAC7C,GAAI,CAAC,KAAK,eAAiB,KAAK,SAAW,MAAQ,KAAK,SAAW,KACjE,OAEI,MAAAe,EAAO,KAAK,OAAO,sBAAsB,EACzChE,EAAI,KAAK,OAAOiD,EAAM,QAAUe,EAAK,MAAQ,KAAK,QAAQ,EAC1D/D,EAAI,KAAK,OAAOgD,EAAM,QAAUe,EAAK,KAAO,KAAK,QAAQ,EAGzDG,EAAiB,KAAK,YAAY,KAAK,OAAQ,KAAK,OAAQnE,EAAGC,CAAC,EAGtE,KAAK,cAAgB,KACrB,KAAK,OAAS,KACd,KAAK,OAAS,KACT,YAAO,MAAM,OAAS,UAG3B,KAAK,iBAAmB,GAGxB,KAAK,UAAU,EAGXkE,GACF,KAAK,UAAU,CAEnB,CACF,CC3QO,MAAMC,CAAM,CAMjB,YACUC,EACRC,EACA,CAFQ,iBAAAD,EAGR,KAAK,YAAcA,EACnB,KAAK,aAAeC,CACtB,CAXQ,WAA4B,KAC5B,YACS,aACV,UAAqB,GAWrB,OAAc,CACf,KAAK,YAET,KAAK,UAAY,GACZ,gBAAa,OAAO,YAAY,IAAM,CACpC,mBACA,kBAAa,KAAK,WAAW,EAE9B,KAAK,aAAe,IACtB,KAAK,YAAc,EACnB,KAAK,KAAK,EAEL,kBAAa,KAAK,WAAW,IAEnC,GAAI,EACT,CAGO,MAAa,CACb,KAAK,YAIN,KAAK,aAAe,OACtB,cAAc,KAAK,UAAU,EAC7B,KAAK,WAAa,MAEpB,KAAK,UAAY,GACnB,CAGO,MAAMC,EAAoB,CAC/B,KAAK,KAAK,EACV,KAAK,YAAcA,EACd,kBAAa,KAAK,WAAW,EAClC,KAAK,MAAM,CACb,CACF,CC1CA,MAAMC,EAAO,IAAIzB,EACXlD,EAAQ,MAAM2E,EAAK,WACnBC,EAAqB,SAAS,eAClC,aACF,EACMC,EAAqB,SAAS,eAClC,aACF,EACMC,EAAe,SAAS,eAAe,OAAO,EAC9CC,EAAiB,SAAS,eAC9B,gBACF,EACMnE,EAAqB,SAAS,eAClC,aACF,EACMoE,EAAe,SAAS,eAC5B,cACF,EAEA,IAAIC,EAA4BvF,EAAW,MACvCwF,EAAmC,UACnCC,EAAoB,GACpBC,EAMI,CAAC,EAAE,EACPC,EAAc,GACdC,EAAW,GAGXC,EAAa,IAAIhB,EAAM,GAAKiB,GAC9BC,EAAmBD,EAAU9F,EAAW,KAAK,CAC/C,EACIgG,EAAa,IAAInB,EAAM,GAAKiB,GAC9BC,EAAmBD,EAAU9F,EAAW,KAAK,CAC/C,EAGgB,SAAA+F,EAAmBD,EAAkBvG,EAAmB,CAClEA,IAAUgG,IACCH,EAAA,YAAc,kBAAkBU,CAAQ,IACjDA,GAAY,GAAK,CAACH,GACpBM,EACE,GAAGV,IAAkBvF,EAAW,MAAQ,OAAS,OAAO,6BAIhE,CAGA,MAAMkG,EAAW,IAAIrC,EAAevD,EAAO,aAAc6F,EAAU,EACnED,EAAS,UAAU,EACnBL,EAAW,MAAM,EAEV,SAASI,EAAQhF,EAAiB,CACvCD,EAAYC,CAAO,EACL0E,EAAA,GACdL,EAAa,MAAM,QAAU,QACzBO,EAAW,WAAWA,EAAW,KAAK,EACtCG,EAAW,WAAWA,EAAW,KAAK,CAC5C,CAGA,SAASI,GAAe,CACtBlF,EAAmB,YAAc,GACjCA,EAAmB,MAAM,QAAU,MACrC,CAGA,eAAemF,GAAa,CACbD,IACbb,EACEA,IAAkBvF,EAAW,MAAQA,EAAW,MAAQA,EAAW,MACrEmF,EAAmB,YAAc,gBAAgBI,IAAkBvF,EAAW,MAAQ,QAAU,MAAM,GAC3FyF,EAAA,GAGIJ,EAAA,SAAWE,IAAkBvF,EAAW,MAGnDuF,IAAkBvF,EAAW,OAC3BgG,EAAW,WAAWA,EAAW,KAAK,EAC1CH,EAAW,MAAM,EAAE,IAEfA,EAAW,WAAWA,EAAW,KAAK,EAC1CG,EAAW,MAAM,EAAE,IAInB1F,EAAM,cAAcN,EAAW,KAAK,GACpCM,EAAM,cAAcN,EAAW,KAAK,KAEhCM,EAAM,YAAYN,EAAW,KAAK,GACpCiG,EAAQ,8BAA8B,EAGpC3F,EAAM,YAAYN,EAAW,KAAK,GACpCiG,EAAQ,6BAA6B,GAKrC3F,EAAM,YAAYiF,CAAa,GACjCU,EAAQ,4BAA4B,EAGlC3F,EAAM,0BACR2F,EAAQ,qDAAqD,EAG3D3F,EAAM,mBACR2F,EAAQ,oCAAoC,EAI1CT,IAAc,YACJA,EAAA,WAIFE,EAAA,KAAK,EAAE,EAGfH,IAAkBvF,EAAW,OAC/B,MAAMsG,EAAc,CAExB,CAEA,eAAeA,GAAgB,CAClBV,EAAA,GACX,MAAMX,EAAK,aACXiB,EAAS,UAAU,EACRN,EAAA,GACX,MAAMS,EAAW,CACnB,CAGA,SAASE,GACPrG,EACAC,EACAC,EACAC,EACAgC,EACA,CACA,MAAMmE,EAAW,GAAGrF,EAAekB,EAAWrC,EAAW,KAAK,CAAC,QAAQE,CAAK,KAAKC,CAAK,QAAQC,CAAG,KAAKC,CAAG,IACnGoG,EAAW,SAAS,cAAc,IAAI,EAC5CA,EAAS,YAAcD,EACvBtB,EAAmB,YAAYuB,CAAQ,EAGvCf,EAAYA,EAAY,OAAS,CAAC,EAAE,KAAK,CACvC,MAAAxF,EACA,MAAAC,EACA,IAAAC,EACA,IAAAC,EACA,UAAAgC,CAAA,CACD,CACH,CAGO,SAAS8D,GACdjG,EACAC,EACAC,EACAC,EACS,CACL,GAAAmF,IAAc,WAAaC,GAAYE,EACzC,OAAA3E,EAAY,sCAAsC,EAC3C,GAGT,MAAML,EAAQL,EAAM,SAASJ,EAAOC,CAAK,EACnCS,EAAcN,EAAM,SAASF,EAAKC,CAAG,EAE3C,GAAI,CAACM,GAASA,EAAM,QAAU4E,EAC5B,OAAKK,GAEH5E,EACE,oBAAoBuE,IAAkBvF,EAAW,MAAQ,QAAU,MAAM,IAGtE,GAGT,GAAIW,EAAM,YAAYT,EAAOC,EAAOC,EAAKC,EAAKC,CAAK,EAAG,CACpD,GAAIA,EAAM,UAAUJ,EAAOC,EAAOC,EAAKC,CAAG,EAC7B,OAAAoF,EAAA,GAGP7E,GACmBQ,EAAAR,EAAY,KAAMA,EAAY,KAAK,EAG1D2F,GAAiBrG,EAAOC,EAAOC,EAAKC,EAAKM,EAAM,IAAI,EACnDuF,EAAS,YAAYhG,EAAOC,EAAOC,EAAKC,EAAKM,CAAK,EACvC0F,IACJ,GAETrF,EAAY,sBAAsB,CACpC,CACO,QACT,CAGIqE,GACaA,EAAA,iBAAiB,QAAS,MAAO3B,GAAU,CACxDA,EAAM,eAAe,EAEnB8B,IAAc,WACdD,IAAkBvF,EAAW,OAC7B,CAACM,EAAM,cAAcN,EAAW,KAAK,IAErCgB,EACE,mBAAmBuE,IAAkBvF,EAAW,MAAQ,QAAU,MAAM,IAE1E,MAAMqG,EAAW,EACnB,CACD,EAICf,GACWA,EAAA,iBAAiB,QAAS,IAAM,CAC3C,SAAS,OAAO,EACjB","names":["createPiece","type","color","PieceType","Pawn","__vitePreload","Rook","Knight","Bishop","Queen","King","PieceColor","Piece","fromX","fromY","toX","toY","board","dx","dy","x","y","piece","targetPiece","data","capturedWhite","capturedBlack","showMessage","message","gameMessageElement","getPieceSymbol","updateCapturedPieces","pieceSymbol","updateCapturedPiecesDOM","capturedWhiteElement","capturedBlackElement","Board","validMoves","opponentColor","king","direction","rookX","rook","kingX","kingY","capturedPawnY","capturedPawn","captureData","pieceType","kingPosition","moves","move","originalPiece","kingSafe","isKingSafe","pieces","fromRow","fromCol","toRow","toCol","destinationPiece","row","pieceData","kingPositions","nx","ny","clonedBoard","Game","resolve","event","bestMove","boardData","CanvasRenderer","canvasId","moveHandler","currentFrame","startX","startY","deltaX","deltaY","animate","kingInCheck","tileColor","pieceText","rect","mouseX","mouseY","moveSuccessful","Timer","initialTime","onTimeUpdate","time","game","moveHistoryElement","currentTurnElement","timerElement","passTurnButton","replayButton","currentPlayer","gameState","hasMoved","moveHistory","isGameEnded","isAITurn","whiteTimer","timeLeft","updateTimerDisplay","blackTimer","endGame","renderer","handleMove","clearMessage","updateTurn","triggerAIMove","addMoveToHistory","moveText","listItem"],"ignoreList":[],"sources":["../../src/utils/pieceFactory.ts","../../src/piece.ts","../../src/utils/utils.ts","../../src/board.ts","../../src/game.ts","../../src/canvas-renderer.ts","../../src/timer.ts","../../src/index.ts"],"sourcesContent":["import { PieceColor, PieceType } from '../piece';\n\nexport async function createPiece(type: PieceType, color: PieceColor) {\n  switch (type) {\n    case PieceType.PAWN:\n      const { Pawn } = await import('../pieces/pawn');\n      return new Pawn(color);\n    case PieceType.ROOK:\n      const { Rook } = await import('../pieces/rook');\n      return new Rook(color);\n    case PieceType.KNIGHT:\n      const { Knight } = await import('../pieces/knight');\n      return new Knight(color);\n    case PieceType.BISHOP:\n      const { Bishop } = await import('../pieces/bishop');\n      return new Bishop(color);\n    case PieceType.QUEEN:\n      const { Queen } = await import('../pieces/queen');\n      return new Queen(color);\n    case PieceType.KING:\n      const { King } = await import('../pieces/king');\n      return new King(color);\n    default:\n      throw new Error(`Type de pièce inconnu : ${type}`);\n  }\n}\n","// src/piece.ts\nimport { createPiece } from './utils/pieceFactory';\nimport { King } from './pieces/king';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport interface BoardInterface {\n  getPiece(x: number, y: number): Piece | null;\n\n  updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void;\n\n  isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean;\n\n  promotePawn(x: number, y: number, pieceType: string): void;\n\n  isSquareUnderAttack(x: number, y: number, color: string): boolean;\n\n  isKing(x: number, y: number): boolean;\n\n  isAdjacentToAnotherKing(x: number, y: number, color: PieceColor): boolean;\n}\n\nexport abstract class Piece {\n  public hasMoved: boolean = false;\n\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean;\n\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    const dx = Math.sign(toX - fromX);\n    const dy = Math.sign(toY - fromY);\n\n    let x = fromX + dx;\n    let y = fromY + dy;\n    while (x !== toX || y !== toY) {\n      if (board.getPiece(x, y) !== null) return false;\n      x += dx;\n      y += dy;\n    }\n    return true;\n  }\n\n  static isKing(piece: Piece): piece is King {\n    return piece.type === PieceType.KING;\n  }\n\n  public canCapture(toX: number, toY: number, board: BoardInterface): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return !targetPiece || targetPiece.color !== this.color;\n  }\n\n  // Sérialisation des données de la pièce\n  public toData(): any {\n    return {\n      color: this.color,\n      type: this.type,\n    };\n  }\n\n  static async fromData(data: any): Promise<Piece> {\n    return await createPiece(data.type, data.color);\n  }\n\n  // Méthode clone pour créer une nouvelle instance identique\n  public async clone(): Promise<Piece> {\n    return await createPiece(this.type, this.color);\n  }\n}\n","// src/utils/utils.ts\n\nimport { PieceColor, PieceType } from '../piece';\n\nexport let capturedWhite: string[] = [];\nexport let capturedBlack: string[] = [];\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById(\n    'gameMessage',\n  ) as HTMLDivElement;\n  gameMessageElement.textContent = message;\n  gameMessageElement.style.display = 'block'; // Afficher le message\n}\n\nexport function getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case PieceType.PAWN:\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case PieceType.ROOK:\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case PieceType.KNIGHT:\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case PieceType.BISHOP:\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case PieceType.QUEEN:\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case PieceType.KING:\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\nexport function updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const pieceSymbol = getPieceSymbol(piece, color);\n\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n  } else {\n    capturedBlack.push(pieceSymbol);\n  }\n\n  updateCapturedPiecesDOM();\n}\n\nexport function updateCapturedPiecesDOM() {\n  const capturedWhiteElement = document.getElementById(\n    'capturedWhite',\n  ) as HTMLDivElement;\n  const capturedBlackElement = document.getElementById(\n    'capturedBlack',\n  ) as HTMLDivElement;\n\n  if (capturedWhiteElement) {\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  }\n  if (capturedBlackElement) {\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n","// src/board.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from './piece';\nimport { King } from './pieces/king';\nimport { updateCapturedPieces } from './utils/utils';\nimport { createPiece } from './utils/pieceFactory';\n\ntype BoardSquare = Piece | null;\n\nexport class Board implements BoardInterface {\n  private grid: (Piece | null)[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n\n  constructor() {\n    this.grid = [];\n  }\n\n  public async init(): Promise<void> {\n    this.grid = await this.initializeBoard();\n  }\n\n  private async initializeBoard(): Promise<(Piece | null)[][]> {\n    const board: (Piece | null)[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Ajouter les pièces blanches\n    board[0] = [\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.QUEEN, PieceColor.WHITE),\n      await createPiece(PieceType.KING, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n    ];\n    board[1] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.WHITE)),\n    );\n\n    // Ajouter les pièces noires\n    board[7] = [\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.QUEEN, PieceColor.BLACK),\n      await createPiece(PieceType.KING, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n    ];\n    board[6] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.BLACK)),\n    );\n\n    return board;\n  }\n\n  // Méthode générale pour vérifier les limites\n  public isWithinBounds(x: number, y: number): boolean {\n    return x >= 0 && x < 8 && y >= 0 && y < 8;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    let piece = null;\n    if (this.isWithinBounds(x, y)) piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (\n      !this.isWithinBounds(fromX, fromY) ||\n      !this.isWithinBounds(toX, toY) ||\n      ['__proto__', 'constructor', 'prototype'].includes(fromY.toString()) ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString())\n    ) {\n      return false; // Mouvement invalide en dehors des limites ou clé interdite\n    }\n\n    const piece = this.getPiece(fromX, fromY);\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      const targetPiece = this.getPiece(toX, toY);\n\n      // Empêche de capturer le roi ennemi\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false;\n      }\n\n      // Gestion du roque\n      if (Piece.isKing(piece) && Math.abs(toX - fromX) === 2) {\n        if (this.isCastlingValid(piece, fromX, fromY, toX)) {\n          this.handleCastling(toX, fromY);\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      // Gestion de la prise en passant\n      if (\n        piece?.type === PieceType.PAWN &&\n        this.isEnPassantMove(fromX, fromY, toX, toY)\n      ) {\n        this.captureEnPassant(fromX, fromY, toX, toY); // Capture le pion en passant\n      }\n\n      // Sauvegarde l'état avant de simuler le mouvement\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Vérifie si le mouvement met le roi du joueur en échec\n      if (this.isKingInCheck(piece.color)) {\n        // Annule le mouvement si le roi est en échec\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = targetPiece;\n        return false;\n      }\n\n      // Mise à jour de l'état après un mouvement valide\n      if ('hasMoved' in piece) {\n        (piece as any).hasMoved = true;\n      }\n      this.updateEnPassantTarget(fromX, fromY, toX, toY, piece);\n\n      // Réinitialise le compteur pour la règle des 50 coups si un pion bouge ou une capture a lieu\n      this.halfMoveCount =\n        piece.type === PieceType.PAWN || targetPiece\n          ? 0\n          : this.halfMoveCount + 1;\n\n      // Vérifie si le mouvement met l'adversaire en échec et mat\n      const opponentColor =\n        piece.color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n      if (this.isCheckmate(opponentColor)) {\n        return true; // Partie terminée\n      }\n\n      return true;\n    }\n\n    return false; // Mouvement invalide\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    const rook = this.getPiece(rookX, fromY);\n\n    if (!(rook?.type === PieceType.ROOK) || rook.hasMoved || king.hasMoved)\n      return false;\n\n    // Vérifie que les cases entre le roi et la tour sont libres\n    for (let x = fromX + direction; x !== toX; x += direction) {\n      if (\n        this.getPiece(x, fromY) ||\n        this.isSquareUnderAttack(x, fromY, king.color)\n      ) {\n        return false;\n      }\n    }\n\n    return (\n      !this.isSquareUnderAttack(fromX, fromY, king.color) &&\n      !this.isSquareUnderAttack(toX, fromY, king.color)\n    );\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    // Déplacement pour le petit roque (roi se déplace vers la droite)\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      if (rook?.type === PieceType.ROOK) {\n        this.movePiece(7, kingY, 5, kingY);\n      }\n    }\n    // Déplacement pour le grand roque (roi se déplace vers la gauche)\n    else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      if (rook?.type === PieceType.ROOK) {\n        this.movePiece(0, kingY, 3, kingY);\n      }\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    if (\n      piece?.type === PieceType.PAWN &&\n      Math.abs(toY - fromY) === 2 &&\n      fromX === toX\n    ) {\n      // Si le pion avance de deux cases, configure la cible pour la prise en passant\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): { capturedWhite: PieceType[]; capturedBlack: PieceType[] } | null {\n    const piece = this.getPiece(fromX, fromY);\n\n    if (\n      this.isEnPassantMove(fromX, fromY, toX, toY) &&\n      piece?.type === PieceType.PAWN\n    ) {\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n      const capturedPawnY = toY + direction;\n      const capturedPawn = this.getPiece(toX, capturedPawnY);\n\n      if (capturedPawn && capturedPawn.type === PieceType.PAWN) {\n        this.grid[capturedPawnY][toX] = null;\n\n        // Déclare explicitement le type de captureData pour éviter l'erreur\n        const captureData: {\n          capturedWhite: PieceType[];\n          capturedBlack: PieceType[];\n        } = {\n          capturedWhite: [],\n          capturedBlack: [],\n        };\n\n        if (capturedPawn.color === PieceColor.WHITE) {\n          captureData.capturedWhite.push(capturedPawn.type);\n        } else {\n          captureData.capturedBlack.push(capturedPawn.type);\n        }\n\n        // Appelle updateCapturedPieces pour mettre à jour le DOM\n        updateCapturedPieces(capturedPawn.type, capturedPawn.color);\n\n        return captureData;\n      }\n    }\n    return null;\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n\n    // Vérifie que le mouvement cible la bonne case pour la prise en passant\n    const piece = this.getPiece(fromX, fromY);\n    return (\n      piece?.type === PieceType.PAWN &&\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      Math.abs(fromX - toX) === 1 &&\n      Math.abs(fromY - toY) === 1\n    );\n  }\n\n  public async promotePawn(\n    x: number,\n    y: number,\n    pieceType: string,\n  ): Promise<void> {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = await createPiece(PieceType.QUEEN, color);\n        break;\n      case 'rook':\n        this.grid[y][x] = await createPiece(PieceType.ROOK, color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = await createPiece(PieceType.BISHOP, color);\n        break;\n      case 'knight':\n        this.grid[y][x] = await createPiece(PieceType.KNIGHT, color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    if (!this.isKingInCheck(color)) {\n      return false; // Pas de mat si le roi n'est pas en échec\n    }\n\n    // Parcourt chaque pièce de la couleur donnée pour trouver un mouvement légal\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          const moves = this.getValidMoves(x, y);\n\n          for (const move of moves) {\n            // Simule le mouvement\n            const originalPiece = this.getPiece(move.x, move.y);\n            this.grid[move.y][move.x] = piece;\n            this.grid[y][x] = null;\n\n            const kingSafe = !this.isKingInCheck(color);\n\n            // Annule le mouvement simulé\n            this.grid[y][x] = piece;\n            this.grid[move.y][move.x] = originalPiece;\n\n            if (kingSafe) {\n              return false; // Un mouvement légal existe pour sortir de l'échec\n            }\n          }\n        }\n      }\n    }\n\n    return true; // Aucun mouvement possible, échec et mat\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    // Pat uniquement si le roi n'est pas en échec et qu'il n'y a aucun coup légal disponible\n    if (this.isKingInCheck(color)) return false;\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                // Simuler le mouvement pour vérifier l'échec potentiel\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const isKingSafe = !this.isKingInCheck(color);\n\n                // Annuler le mouvement simulé\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (isKingSafe) return false; // Mouvement valide trouvé, pas de pat\n              }\n            }\n          }\n        }\n      }\n    }\n    return true; // Aucun coup légal trouvé, pat détecté\n  }\n\n  private findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece?.type === PieceType.KING && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isKing(x: number, y: number): boolean {\n    const piece = this.getPiece(x, y);\n    return piece?.type === PieceType.KING;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n\n  // Vérifie si un mouvement est valide\n  public isMoveValid(\n    fromRow: number,\n    fromCol: number,\n    toRow: number,\n    toCol: number,\n  ): boolean {\n    const piece = this.getPiece(fromRow, fromCol);\n\n    // Si aucune pièce n'est présente à l'emplacement source, le mouvement est invalide\n    if (!piece) {\n      return false;\n    }\n\n    // Si la destination est en dehors de l'échiquier, mouvement invalide\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) {\n      return false;\n    }\n\n    // Vérifie si la pièce peut se déplacer à cette destination en utilisant la logique de mouvement de la pièce\n    if (!piece.isValidMove(fromRow, fromCol, toRow, toCol, this)) {\n      return false;\n    }\n\n    // Vérifie s'il y a une pièce à la destination et si elle est de la même couleur\n    const destinationPiece = this.getPiece(toRow, toCol);\n    return !(destinationPiece && destinationPiece.color === piece.color);\n  }\n\n  public isCapture(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const piece = this.isWithinBounds(fromX, fromY)\n      ? this.getPiece(fromX, fromY)\n      : null;\n    const targetPiece = this.isWithinBounds(toX, toY)\n      ? this.getPiece(toX, toY)\n      : null;\n\n    // Vérifie qu'il y a une pièce à la position cible et qu'elle est d'une couleur opposée\n    return (\n      piece !== null &&\n      targetPiece !== null &&\n      piece.color !== targetPiece.color\n    );\n  }\n\n  public static async fromData(data: any): Promise<Board> {\n    const board = new Board();\n    await board.init();\n    board.grid = await Promise.all(\n      data.grid.map(async (row: any[]) =>\n        Promise.all(\n          row.map(async (pieceData) =>\n            pieceData ? await Piece.fromData(pieceData) : null,\n          ),\n        ),\n      ),\n    );\n    return board;\n  }\n\n  public toData(): any {\n    return {\n      grid: this.grid.map((row) =>\n        row.map((piece) => (piece ? piece.toData() : null)),\n      ),\n    };\n  }\n\n  public isAdjacentToAnotherKing(\n    x: number,\n    y: number,\n    color: PieceColor,\n  ): boolean {\n    const kingPositions = [\n      { dx: -1, dy: -1 },\n      { dx: -1, dy: 0 },\n      { dx: -1, dy: 1 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: 1, dy: -1 },\n      { dx: 1, dy: 0 },\n      { dx: 1, dy: 1 },\n    ];\n\n    for (const { dx, dy } of kingPositions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      const piece = this.isWithinBounds(nx, ny) ? this.getPiece(nx, ny) : null;\n      if (piece?.type === PieceType.KING && piece.color !== color) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public clone(): Board {\n    const clonedBoard = new Board();\n    clonedBoard.grid = this.grid.map((row) =>\n      row.map((piece) =>\n        piece\n          ? Object.create(\n              Object.getPrototypeOf(piece),\n              Object.getOwnPropertyDescriptors(piece),\n            )\n          : null,\n      ),\n    );\n    clonedBoard.enPassantTarget = this.enPassantTarget\n      ? { ...this.enPassantTarget }\n      : null;\n    clonedBoard.halfMoveCount = this.halfMoveCount;\n    return clonedBoard;\n  }\n\n  public getPieceCount(): number {\n    return this.grid.flat().filter((piece) => piece !== null).length;\n  }\n\n  public isGameOver(): boolean {\n    // Vérifie l'échec et mat pour chaque couleur\n    if (\n      this.isCheckmate(PieceColor.WHITE) ||\n      this.isCheckmate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le pat pour chaque couleur\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK)\n    ) {\n      return true;\n    }\n\n    // Vérifie le matériel insuffisant pour chaque couleur\n    if (this.isInsufficientMaterial()) {\n      return true;\n    }\n\n    // Vérifie si la règle des 50 coups est atteinte\n    return this.isFiftyMoveRule();\n  }\n\n  public getWinner(): PieceColor | null {\n    // Si c'est un échec et mat pour les Noirs, Blancs gagnent\n    if (this.isCheckmate(PieceColor.BLACK)) {\n      return PieceColor.WHITE;\n    }\n\n    // Si c'est un échec et mat pour les Blancs, Noirs gagnent\n    if (this.isCheckmate(PieceColor.WHITE)) {\n      return PieceColor.BLACK;\n    }\n\n    // Si c'est un pat, une égalité par matériel insuffisant, ou la règle des 50 coups, la partie est nulle\n    if (\n      this.isStalemate(PieceColor.WHITE) ||\n      this.isStalemate(PieceColor.BLACK) ||\n      this.isInsufficientMaterial() ||\n      this.isFiftyMoveRule()\n    ) {\n      return null;\n    }\n\n    return null; // Retourne null si le jeu n'est pas encore terminé\n  }\n\n  public getPieces(): Piece[] {\n    return this.grid.flat().filter((piece): piece is Piece => piece !== null);\n  }\n}\n","// game.ts\nimport { Board } from './board';\nimport { updateCapturedPieces } from './utils/utils';\nimport { PieceColor, PieceType } from './piece';\n\nexport class Game {\n  private readonly board: Board;\n  private aiWorker: Worker;\n\n  constructor() {\n    this.board = new Board();\n    this.aiWorker = new Worker(new URL('./ai.worker.ts', import.meta.url), {\n      type: 'module',\n    });\n  }\n\n  public async getBoard(): Board {\n    await this.board.init();\n    return this.board;\n  }\n\n  public makeAIMove(): Promise<void> {\n    return new Promise((resolve) => {\n      this.aiWorker.onmessage = (event) => {\n        const { bestMove, captureData } = event.data;\n\n        if (bestMove) {\n          const wasMoved = this.board.movePiece(\n            bestMove.fromX,\n            bestMove.fromY,\n            bestMove.toX,\n            bestMove.toY,\n          );\n\n          if (wasMoved && captureData) {\n            captureData.capturedWhite.forEach((piece: PieceType) =>\n              updateCapturedPieces(piece, PieceColor.WHITE),\n            );\n            captureData.capturedBlack.forEach((piece: PieceType) =>\n              updateCapturedPieces(piece, PieceColor.BLACK),\n            );\n          }\n        }\n        resolve(); // Résout la promesse une fois le coup de l’IA joué\n      };\n\n      const boardData = this.board.toData();\n      this.aiWorker.postMessage({ boardData });\n    });\n  }\n}\n","// src/canvas-renderer.ts\nimport { Board } from './board';\nimport { Piece, PieceColor } from './piece';\n\nexport class CanvasRenderer {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private readonly tileSize: number;\n  private draggingPiece: Piece | null = null;\n  private startX: number | null = null;\n  private startY: number | null = null;\n  private highlightedMoves: { x: number; y: number }[] = [];\n  private kingInCheckPosition: { x: number; y: number } | null = null;\n\n  constructor(\n    private board: Board,\n    canvasId: string,\n    private moveHandler: (\n      fromX: number,\n      fromY: number,\n      toX: number,\n      toY: number,\n    ) => boolean, // Utilisation d'un retour booléen pour vérifier si le mouvement est valide\n  ) {\n    this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d')!;\n    this.tileSize = this.canvas.width / 8;\n\n    // Définir le curseur par défaut\n    this.canvas.style.cursor = 'default';\n\n    // Ajouter des écouteurs pour gérer les événements de glisser-déposer\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n  }\n\n  // Animation pour déplacer une pièce\n  public animateMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    const frames = 10;\n    let currentFrame = 0;\n\n    const startX = fromX * this.tileSize;\n    const startY = fromY * this.tileSize;\n    const deltaX = ((toX - fromX) * this.tileSize) / frames;\n    const deltaY = ((toY - fromY) * this.tileSize) / frames;\n\n    const animate = () => {\n      if (currentFrame <= frames) {\n        // Redessine l'échiquier pour effacer l'ancienne position de la pièce\n        this.drawBoard();\n\n        this.context.fillStyle =\n          piece.color === PieceColor.WHITE ? 'white' : 'black';\n        this.context.font = '48px Arial';\n        this.context.textAlign = 'center';\n        this.context.textBaseline = 'middle';\n\n        // Dessine la pièce en mouvement\n        this.context.fillText(\n          this.getPieceText(piece),\n          startX + deltaX * currentFrame + this.tileSize / 2,\n          startY + deltaY * currentFrame + this.tileSize / 2,\n        );\n\n        currentFrame++;\n        requestAnimationFrame(animate);\n      } else {\n        // Redessiner l'échiquier à la fin de l'animation pour afficher la pièce à la position finale\n        this.drawBoard();\n      }\n    };\n\n    animate();\n  }\n\n  // Surligne les mouvements valides pour une pièce sélectionnée\n  highlightValidMoves(moves: { x: number; y: number }[]): void {\n    this.context.fillStyle = 'rgba(0, 255, 0, 0.5)'; // Couleur de surlignage (vert translucide)\n    moves.forEach((move) => {\n      this.context.fillRect(\n        move.x * this.tileSize,\n        move.y * this.tileSize,\n        this.tileSize,\n        this.tileSize,\n      );\n    });\n  }\n\n  // Dessiner l'échiquier et les pièces\n  public drawBoard(): void {\n    // Obtenir la position du roi en échec si elle existe\n    const kingInCheck = this.board.getKingInCheck();\n    this.kingInCheckPosition = kingInCheck\n      ? { x: kingInCheck.x, y: kingInCheck.y }\n      : null;\n\n    // Dessiner le plateau\n    this.drawTiles();\n    this.drawPieces();\n  }\n\n  // Dessiner les cases de l'échiquier\n  private drawTiles(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const isDarkTile = (x + y) % 2 === 1;\n        let tileColor = isDarkTile ? '#769656' : '#eeeed2';\n\n        // Si la case contient le roi en échec, change la couleur\n        if (\n          this.kingInCheckPosition &&\n          this.kingInCheckPosition.x === x &&\n          this.kingInCheckPosition.y === y\n        ) {\n          tileColor = '#ff6347'; // Par exemple, une couleur rouge pour indiquer l'échec\n        }\n\n        this.context.fillStyle = tileColor;\n        this.context.fillRect(\n          x * this.tileSize,\n          y * this.tileSize,\n          this.tileSize,\n          this.tileSize,\n        );\n      }\n    }\n  }\n\n  // Dessiner toutes les pièces sur l'échiquier\n  private drawPieces(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.board.getPiece(x, y);\n        if (piece) {\n          this.drawPiece(piece, x, y);\n        }\n      }\n    }\n  }\n\n  // Dessiner une pièce spécifique\n  private drawPiece(piece: Piece, x: number, y: number): void {\n    this.context.fillStyle = piece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(piece);\n    this.context.fillText(\n      pieceText,\n      x * this.tileSize + this.tileSize / 2,\n      y * this.tileSize + this.tileSize / 2,\n    );\n  }\n\n  // Convertir le type de pièce en texte pour affichage\n  private getPieceText(piece: Piece): string {\n    switch (piece.type) {\n      case 'pawn':\n        return piece.color === 'white' ? '♙' : '♟';\n      case 'rook':\n        return piece.color === 'white' ? '♖' : '♜';\n      case 'knight':\n        return piece.color === 'white' ? '♘' : '♞';\n      case 'bishop':\n        return piece.color === 'white' ? '♗' : '♝';\n      case 'queen':\n        return piece.color === 'white' ? '♕' : '♛';\n      case 'king':\n        return piece.color === 'white' ? '♔' : '♚';\n      default:\n        return '';\n    }\n  }\n\n  // Gérer le début du glissement\n  private handleMouseDown(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    const piece = this.board.getPiece(x, y);\n    if (piece) {\n      this.draggingPiece = piece;\n      this.startX = x;\n      this.startY = y;\n      this.canvas.style.cursor = 'grabbing'; // Change le curseur pendant le drag\n\n      // Obtenez les mouvements légaux pour la pièce sélectionnée\n      this.highlightedMoves = this.board.getValidMoves(x, y);\n\n      // Redessinez le plateau avec les cases surlignées\n      this.drawBoard();\n      this.highlightValidMoves(this.highlightedMoves); // Surligne les mouvements valides\n    }\n  }\n\n  // Gérer le mouvement pendant le glissement\n  private handleMouseMove(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Changer le curseur lorsque la souris survole une pièce\n    let piece = null;\n    if (this.board.isWithinBounds(x, y)) piece = this.board.getPiece(x, y);\n    if (piece && !this.draggingPiece) {\n      this.canvas.style.cursor = 'pointer';\n    } else if (!this.draggingPiece) {\n      this.canvas.style.cursor = 'default';\n    }\n\n    if (!this.draggingPiece) return;\n\n    // Dessiner l'échiquier et les pièces\n    this.drawBoard();\n\n    // Assurez-vous que les mouvements valides restent visibles pendant le glissement\n    this.highlightValidMoves(this.highlightedMoves);\n\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    // Dessiner la pièce en mouvement\n    this.context.fillStyle =\n      this.draggingPiece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(this.draggingPiece);\n    this.context.fillText(pieceText, mouseX, mouseY);\n  }\n\n  // Gérer la fin du glissement\n  private handleMouseUp(event: MouseEvent): void {\n    if (!this.draggingPiece || this.startX === null || this.startY === null)\n      return;\n\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Utilise la fonction de rappel `moveHandler` pour déplacer la pièce\n    const moveSuccessful = this.moveHandler(this.startX, this.startY, x, y);\n\n    // Réinitialise l'état de glissement\n    this.draggingPiece = null;\n    this.startX = null;\n    this.startY = null;\n    this.canvas.style.cursor = 'default'; // Rétablir le curseur par défaut\n\n    // Efface les coups surlignés\n    this.highlightedMoves = [];\n\n    // Redessine le plateau après la fin du glissement\n    this.drawBoard();\n\n    // Si le mouvement est réussi, met à jour le tour\n    if (moveSuccessful) {\n      this.drawBoard();\n    }\n  }\n}\n","// src/timer.ts\nexport class Timer {\n  private intervalId: number | null = null;\n  private currentTime: number;\n  private readonly onTimeUpdate: (timeLeft: number) => void;\n  public isRunning: boolean = false;\n\n  constructor(\n    private initialTime: number,\n    onTimeUpdate: (timeLeft: number) => void,\n  ) {\n    this.currentTime = initialTime;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Démarrer le compte à rebours\n  public start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.intervalId = window.setInterval(() => {\n      this.currentTime--;\n      this.onTimeUpdate(this.currentTime);\n\n      if (this.currentTime <= 0) {\n        this.currentTime = 0;\n        this.stop();\n        // Appel de la fonction onTimeUpdate une dernière fois pour garantir l'affichage du temps écoulé\n        this.onTimeUpdate(this.currentTime);\n      }\n    }, 1000);\n  }\n\n  // Arrêter le compte à rebours\n  public stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n  }\n\n  // Réinitialiser le temps\n  public reset(time: number): void {\n    this.stop();\n    this.currentTime = time;\n    this.onTimeUpdate(this.currentTime); // Appel immédiat pour la mise à jour du temps\n    this.start();\n  }\n}\n","// src/index.ts\nimport { Game } from './game';\nimport { CanvasRenderer } from './canvas-renderer';\nimport { Timer } from './timer';\nimport { PieceColor, PieceType } from './piece';\nimport {\n  getPieceSymbol,\n  showMessage,\n  updateCapturedPieces,\n} from './utils/utils';\n\nconst game = new Game();\nconst board = await game.getBoard();\nconst moveHistoryElement = document.getElementById(\n  'moveHistory',\n) as HTMLUListElement;\nconst currentTurnElement = document.getElementById(\n  'currentTurn',\n) as HTMLDivElement;\nconst timerElement = document.getElementById('timer') as HTMLDivElement;\nconst passTurnButton = document.getElementById(\n  'passTurnButton',\n) as HTMLButtonElement;\nconst gameMessageElement = document.getElementById(\n  'gameMessage',\n) as HTMLDivElement;\nconst replayButton = document.getElementById(\n  'replayButton',\n) as HTMLButtonElement;\n\nlet currentPlayer: PieceColor = PieceColor.WHITE; // Les blancs commencent toujours\nlet gameState: 'playing' | 'waiting' = 'playing'; // Ajout de l'état pour la proposition de nullité\nlet hasMoved: boolean = false; // Indique si un mouvement a déjà été effectué dans ce tour\nlet moveHistory: {\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n  pieceType: PieceType;\n}[][] = [[]]; // Historique des mouvements par tour\nlet isGameEnded = false;\nlet isAITurn = false;\n\n// Initialiser le timer avec 60 secondes pour chaque joueur\nlet whiteTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.WHITE),\n);\nlet blackTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.BLACK),\n);\n\n// Fonction pour mettre à jour l'affichage du timer\nexport function updateTimerDisplay(timeLeft: number, color: PieceColor) {\n  if (color === currentPlayer) {\n    timerElement.textContent = `Temps restant: ${timeLeft}s`;\n    if (timeLeft <= 0 && !isGameEnded) {\n      endGame(\n        `${currentPlayer === PieceColor.WHITE ? 'Noir' : 'Blanc'} gagne par temps écoulé !`,\n      );\n    }\n  }\n}\n\n// Démarrer le jeu et dessiner le plateau\nconst renderer = new CanvasRenderer(board, 'chessBoard', handleMove);\nrenderer.drawBoard();\nwhiteTimer.start();\n\nexport function endGame(message: string) {\n  showMessage(message);\n  isGameEnded = true;\n  replayButton.style.display = 'block';\n  if (whiteTimer.isRunning) whiteTimer.stop();\n  if (blackTimer.isRunning) blackTimer.stop();\n}\n\n// Fonction pour effacer le message d'erreur\nfunction clearMessage() {\n  gameMessageElement.textContent = '';\n  gameMessageElement.style.display = 'none';\n}\n\n// Fonction pour mettre à jour le tour et l'affichage\nasync function updateTurn() {\n  clearMessage();\n  currentPlayer =\n    currentPlayer === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  currentTurnElement.textContent = `Tour actuel: ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`;\n  hasMoved = false;\n\n  // Gestion du bouton \"Passer son tour\"\n  passTurnButton.disabled = currentPlayer === PieceColor.BLACK;\n\n  // Gestion des timers\n  if (currentPlayer === PieceColor.WHITE) {\n    if (blackTimer.isRunning) blackTimer.stop();\n    whiteTimer.reset(60);\n  } else {\n    if (whiteTimer.isRunning) whiteTimer.stop();\n    blackTimer.reset(60);\n  }\n\n  if (\n    board.isKingInCheck(PieceColor.BLACK) ||\n    board.isKingInCheck(PieceColor.WHITE)\n  ) {\n    if (board.isCheckmate(PieceColor.BLACK)) {\n      endGame('Échec et Mat ! Blanc gagne !');\n    }\n\n    if (board.isCheckmate(PieceColor.WHITE)) {\n      endGame('Échec et Mat ! Noir gagne !');\n    }\n  }\n\n  // Vérifie les conditions de nullité\n  if (board.isStalemate(currentPlayer)) {\n    endGame('Pat ! La partie est nulle.');\n  }\n\n  if (board.isInsufficientMaterial()) {\n    endGame('Matériel insuffisant pour continuer, partie nulle !');\n  }\n\n  if (board.isFiftyMoveRule()) {\n    endGame('Règle des 50 coups, partie nulle !');\n  }\n\n  // Seul \"playing\" permet de jouer\n  if (gameState === 'playing') {\n    gameState = 'playing';\n  }\n\n  // Crée un nouveau tour dans l'historique des mouvements\n  moveHistory.push([]);\n\n  // Si c'est au tour de l'IA, faire jouer l'IA automatiquement\n  if (currentPlayer === PieceColor.BLACK) {\n    await triggerAIMove();\n  }\n}\n\nasync function triggerAIMove() {\n  isAITurn = true;\n  await game.makeAIMove();\n  renderer.drawBoard();\n  isAITurn = false;\n  await updateTurn(); // Revenir au tour du joueur après le coup de l'IA\n}\n\n// Ajouter un mouvement à l'historique\nfunction addMoveToHistory(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n  pieceType: PieceType,\n) {\n  const moveText = `${getPieceSymbol(pieceType, PieceColor.WHITE)} de (${fromX}, ${fromY}) à (${toX}, ${toY})`;\n  const listItem = document.createElement('li');\n  listItem.textContent = moveText;\n  moveHistoryElement.appendChild(listItem);\n\n  // Ajoutez le mouvement au tour actuel\n  moveHistory[moveHistory.length - 1].push({\n    fromX,\n    fromY,\n    toX,\n    toY,\n    pieceType,\n  });\n}\n\n// Fonction pour gérer un mouvement sur le plateau\nexport function handleMove(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n): boolean {\n  if (gameState === 'waiting' || hasMoved || isGameEnded) {\n    showMessage('Veuillez attendre le prochain tour !');\n    return false;\n  }\n\n  const piece = board.getPiece(fromX, fromY);\n  const targetPiece = board.getPiece(toX, toY); // Ajout pour vérifier la cible\n\n  if (!piece || piece.color !== currentPlayer) {\n    if (!isAITurn) {\n      // Affiche le message uniquement si ce n'est pas le tour de l'IA\n      showMessage(\n        `C'est le tour de ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n      );\n    }\n    return false;\n  }\n\n  if (piece.isValidMove(fromX, fromY, toX, toY, board)) {\n    if (board.movePiece(fromX, fromY, toX, toY)) {\n      hasMoved = true; // Empêche les actions supplémentaires\n\n      // Enregistrement de la capture si une pièce est prise\n      if (targetPiece) {\n        updateCapturedPieces(targetPiece.type, targetPiece.color);\n      }\n\n      addMoveToHistory(fromX, fromY, toX, toY, piece.type);\n      renderer.animateMove(fromX, fromY, toX, toY, piece);\n      updateTurn();\n      return true;\n    }\n    showMessage('Mouvement invalide !');\n  }\n  return false;\n}\n\n// Gérer le clic sur \"Passer son tour\"\nif (passTurnButton) {\n  passTurnButton.addEventListener('click', async (event) => {\n    event.preventDefault();\n    if (\n      gameState === 'playing' &&\n      currentPlayer === PieceColor.WHITE &&\n      !board.isKingInCheck(PieceColor.WHITE)\n    ) {\n      showMessage(\n        `Tour passé pour ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n      );\n      await updateTurn();\n    }\n  });\n}\n\n// Gérer le clic sur \"Rejouer\"\nif (replayButton) {\n  replayButton.addEventListener('click', () => {\n    location.reload();\n  });\n}\nexport { Game };\n"],"file":"assets/index-4lvVbLC1.js"}