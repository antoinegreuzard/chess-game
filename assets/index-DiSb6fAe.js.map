{"version":3,"file":"index-DiSb6fAe.js","sources":["../../../src/piece.ts","../../../src/pieces/rook.ts","../../../src/pieces/knight.ts","../../../src/pieces/bishop.ts","../../../src/pieces/queen.ts","../../../src/pieces/king.ts","../../../src/pieces/pawn.ts","../../../src/board.ts","../../../src/game.ts","../../../src/canvas-renderer.ts","../../../src/timer.ts","../../../src/utils.ts","../../../src/index.ts"],"sourcesContent":["// src/piece.ts\nimport { Board } from './board';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport abstract class Piece {\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  // Mise à jour pour inclure le paramètre 'board'\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean;\n\n  // Vérifie si le chemin est dégagé pour certaines pièces\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const dx = Math.sign(toX - fromX); // Direction en X\n    const dy = Math.sign(toY - fromY); // Direction en Y\n\n    // Boucle sur toutes les cases intermédiaires jusqu'à la case cible exclue\n    let x = fromX + dx;\n    let y = fromY + dy;\n\n    while (x !== toX || y !== toY) {\n      // Vérifie s'il y a une pièce sur le chemin\n      if (board.getPiece(x, y)) return false;\n\n      // Avance dans la direction\n      x += dx;\n      y += dy;\n    }\n\n    return true; // Chemin dégagé\n  }\n\n  // Vérifie si une pièce peut capturer une autre\n  canCapture(toX: number, toY: number, board: Board): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return targetPiece === null || targetPiece.color !== this.color;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Rook extends Piece {\n  public hasMoved: boolean = false;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.ROOK);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Vérifie si le mouvement est en ligne droite et que le chemin est dégagé\n    if (\n      (fromX === toX || fromY === toY) &&\n      this.isPathClear(fromX, fromY, toX, toY, board)\n    ) {\n      // Vérifie si la case cible est vide ou contient une pièce ennemie\n      return this.canCapture(toX, toY, board);\n    }\n    return false;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Knight extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.KNIGHT);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Le Cavalier se déplace en L : 2 cases dans une direction puis 1 case perpendiculairement\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    return (\n      ((dx === 2 && dy === 1) || (dx === 1 && dy === 2)) &&\n      this.canCapture(toX, toY, board)\n    );\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Bishop extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.BISHOP);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // Le fou se déplace en diagonale\n    if (Math.abs(toX - fromX) === Math.abs(toY - fromY)) {\n      // Vérifie que la trajectoire est dégagée\n      if (this.isPathClear(fromX, fromY, toX, toY, board)) {\n        // Vérifie si la cible est vide ou contient une pièce ennemie\n        return this.canCapture(toX, toY, board);\n      }\n    }\n\n    return false;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Queen extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.QUEEN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    // La reine peut se déplacer en ligne droite ou en diagonale\n    if (\n      fromX === toX || // Déplacement en colonne\n      fromY === toY || // Déplacement en ligne\n      Math.abs(toX - fromX) === Math.abs(toY - fromY) // Déplacement en diagonale\n    ) {\n      // Vérifie que la trajectoire est dégagée\n      if (this.isPathClear(fromX, fromY, toX, toY, board)) {\n        // Vérifie si la cible est vide ou contient une pièce ennemie\n        return this.canCapture(toX, toY, board);\n      }\n    }\n\n    return false;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\nimport { Rook } from './rook';\n\nexport class King extends Piece {\n  public hasMoved: boolean = false;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.KING);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n\n    // Vérification pour le mouvement classique du roi\n    if (dx <= 1 && dy <= 1) {\n      const targetPiece = board.getPiece(toX, toY);\n      return (\n        this.canCapture(toX, toY, board) &&\n        (!targetPiece || targetPiece.type !== PieceType.KING)\n      );\n    }\n\n    // Logique pour le roque\n    if (!this.hasMoved && dy === 0 && dx === 2) {\n      const direction = toX > fromX ? 1 : -1;\n      const rookX = toX > fromX ? 7 : 0;\n      const rook = board.getPiece(rookX, fromY);\n\n      if (rook && rook instanceof Rook && !rook.hasMoved) {\n        // Vérifie que les cases entre le roi et la tour sont libres\n        for (let x = fromX + direction; x !== rookX; x += direction) {\n          if (board.getPiece(x, fromY)) return false;\n        }\n\n        // Assure que le roi n'est pas en échec avant, pendant ou après le roque\n        if (\n          !board.isKingInCheck(this.color) &&\n          !board.isSquareUnderAttack(fromX + direction, fromY, this.color) &&\n          !board.isSquareUnderAttack(toX, fromY, this.color)\n        ) {\n          return true; // Roque valide\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import { Piece, PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\n\nexport class Pawn extends Piece {\n  constructor(color: PieceColor) {\n    super(color, PieceType.PAWN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: Board,\n  ): boolean {\n    const direction = this.color === PieceColor.WHITE ? 1 : -1;\n    const startRow = this.color === PieceColor.WHITE ? 1 : 6;\n    const distanceY = (toY - fromY) * direction;\n    const distanceX = Math.abs(toX - fromX);\n\n    // 1. Déplacement d'une case vers l'avant\n    if (distanceX === 0 && distanceY === 1) {\n      if (!board.getPiece(toX, toY)) {\n        // Promotion si le pion atteint la dernière rangée\n        if (\n          (this.color === PieceColor.WHITE && toY === 7) ||\n          (this.color === PieceColor.BLACK && toY === 0)\n        ) {\n          this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n    }\n\n    // 2. Déplacement de deux cases vers l'avant depuis la ligne de départ\n    if (distanceX === 0 && distanceY === 2 && fromY === startRow) {\n      if (\n        !board.getPiece(toX, toY) &&\n        !board.getPiece(fromX, fromY + direction)\n      ) {\n        board.updateEnPassantTarget(fromX, fromY, toX, toY, this);\n        return true;\n      }\n    }\n\n    // 3. Capture en diagonale\n    if (distanceX === 1 && distanceY === 1) {\n      if (this.canCapture(toX, toY, board)) {\n        // Promotion si le pion atteint la dernière rangée\n        if (\n          (this.color === PieceColor.WHITE && toY === 7) ||\n          (this.color === PieceColor.BLACK && toY === 0)\n        ) {\n          this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n\n      // Prise en passant\n      if (board.isEnPassantMove(fromX, fromY, toX, toY)) {\n        board.captureEnPassant(fromX, fromY, toX, toY);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private handlePromotion(toX: number, toY: number, board: Board): void {\n    const promotionDialog = document.getElementById('promotionDialog');\n    if (promotionDialog) {\n      promotionDialog.style.display = 'block';\n\n      // Définis la fonction promote sur l'objet global window\n      window.promote = (pieceType: string) => {\n        promotionDialog.style.display = 'none';\n        board.promotePawn(toX, toY, pieceType);\n      };\n    }\n  }\n}\n","// src/board.ts\nimport { Piece, PieceColor, PieceType } from './piece';\nimport { Rook } from './pieces/rook';\nimport { Knight } from './pieces/knight';\nimport { Bishop } from './pieces/bishop';\nimport { Queen } from './pieces/queen';\nimport { King } from './pieces/king';\nimport { Pawn } from './pieces/pawn';\n\ntype BoardSquare = Piece | null;\n\nexport class Board {\n  private readonly grid: BoardSquare[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n\n  constructor() {\n    this.grid = this.initializeBoard();\n  }\n\n  private initializeBoard(): BoardSquare[][] {\n    const board: BoardSquare[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Ajouter les pièces blanches\n    board[0] = [\n      new Rook(PieceColor.WHITE),\n      new Knight(PieceColor.WHITE),\n      new Bishop(PieceColor.WHITE),\n      new Queen(PieceColor.WHITE),\n      new King(PieceColor.WHITE),\n      new Bishop(PieceColor.WHITE),\n      new Knight(PieceColor.WHITE),\n      new Rook(PieceColor.WHITE),\n    ];\n    board[1] = Array(8)\n      .fill(null)\n      .map(() => new Pawn(PieceColor.WHITE));\n\n    // Ajouter les pièces noires\n    board[7] = [\n      new Rook(PieceColor.BLACK),\n      new Knight(PieceColor.BLACK),\n      new Bishop(PieceColor.BLACK),\n      new Queen(PieceColor.BLACK),\n      new King(PieceColor.BLACK),\n      new Bishop(PieceColor.BLACK),\n      new Knight(PieceColor.BLACK),\n      new Rook(PieceColor.BLACK),\n    ];\n    board[6] = Array(8)\n      .fill(null)\n      .map(() => new Pawn(PieceColor.BLACK));\n\n    return board;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    const piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (\n      toY < 0 ||\n      toY >= this.grid.length ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString())\n    ) {\n      return false; // Invalid move if toY is out of bounds or a special property name\n    }\n    const piece = this.getPiece(fromX, fromY);\n\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      const targetPiece = this.getPiece(toX, toY);\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false; // Mouvement invalide si la cible est un roi\n      }\n\n      // Sauvegarder l'état actuel pour vérifier l'échec\n      const originalPiece = this.getPiece(toX, toY);\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Vérification de l'échec après le mouvement\n      if (this.isKingInCheck(piece.color)) {\n        // Annuler le mouvement\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = originalPiece;\n        return false;\n      }\n\n      // Vérifie si c'est un mouvement de roque pour le roi\n      if (piece instanceof King && Math.abs(toX - fromX) === 2) {\n        if (!this.isCastlingValid(piece, fromX, fromY, toX)) {\n          return false; // Roque invalide\n        }\n        this.handleCastling(toX, toY);\n      }\n\n      // Gérer la prise en passant\n      this.handleEnPassant(fromX, fromY, toX, toY);\n\n      // Compte les mouvements pour la règle des 50 coups\n      if (piece.type === PieceType.PAWN || targetPiece) {\n        this.halfMoveCount = 0; // Réinitialise le compteur si un pion bouge ou si une capture a lieu\n      } else {\n        this.halfMoveCount++;\n      }\n\n      // Déplace la pièce\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n\n      // Met à jour l'état du roi et des tours pour le roque\n      if (piece instanceof King) {\n        piece.hasMoved = true;\n      } else if (piece instanceof Rook) {\n        piece.hasMoved = true;\n      }\n\n      // Gérer la cible pour la prise en passant\n      this.updateEnPassantTarget(fromX, fromY, toX, toY, piece);\n\n      return true;\n    }\n    return false;\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    const rook = this.getPiece(rookX, fromY);\n\n    if (!(rook instanceof Rook) || rook.hasMoved || king.hasMoved) {\n      return false;\n    }\n\n    // Vérifie que les cases entre le roi et la tour sont libres\n    for (let x = fromX + direction; x !== rookX; x += direction) {\n      if (this.getPiece(x, fromY)) {\n        return false;\n      }\n    }\n\n    // Assure que le roi ne passe pas par une case attaquée\n    for (let x = fromX; x !== toX + direction; x += direction) {\n      if (this.isSquareUnderAttack(x, fromY, king.color)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      if (rook instanceof Rook) {\n        this.grid[5][kingY] = rook;\n        this.grid[7][kingY] = null;\n      }\n    } else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      if (rook instanceof Rook) {\n        this.grid[3][kingY] = rook;\n        this.grid[0][kingY] = null;\n      }\n    }\n  }\n\n  private handleEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void {\n    if (this.isEnPassantMove(fromX, fromY, toX, toY)) {\n      const direction =\n        this.getPiece(fromX, fromY)?.color === PieceColor.WHITE ? -1 : 1;\n      this.grid[toY - direction][toX] = null; // Capture du pion en passant\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    if (piece instanceof Pawn && Math.abs(toY - fromY) === 2 && fromX === toX) {\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void {\n    const piece = this.getPiece(fromX, fromY);\n\n    // Vérifie que le mouvement est une prise en passant valide\n    if (this.isEnPassantMove(fromX, fromY, toX, toY) && piece instanceof Pawn) {\n      // Détermine la direction pour la capture en passant\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n      this.grid[toY - direction][toX] = null; // Enlève le pion capturé\n    }\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n    return (\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      this.getPiece(fromX, fromY) instanceof Pawn\n    );\n  }\n\n  public promotePawn(x: number, y: number, pieceType: string): void {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = new Queen(color);\n        break;\n      case 'rook':\n        this.grid[y][x] = new Rook(color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = new Bishop(color);\n        break;\n      case 'knight':\n        this.grid[y][x] = new Knight(color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) return false;\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    if (!this.isKingInCheck(color)) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const kingSafe = !this.isKingInCheck(color);\n\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (kingSafe) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    if (this.isKingInCheck(color)) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const kingSafe = !this.isKingInCheck(color);\n\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (kingSafe) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece instanceof King && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  // Ajoute cette méthode dans la classe Board\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n}\n","// src/game.ts\nimport { Board } from './board';\n\nexport class Game {\n  private readonly board: Board;\n\n  constructor() {\n    this.board = new Board();\n  }\n\n  // Commencer une nouvelle partie (initialisation de la logique du jeu)\n  public start(): void {\n    console.log(\"Nouvelle partie d'échecs démarrée !\");\n  }\n\n  // Retourner l'état actuel de l'échiquier\n  public getBoard(): Board {\n    return this.board;\n  }\n}\n","// src/canvas-renderer.ts\nimport { Board } from './board';\nimport { Piece, PieceColor } from './piece';\n\nexport class CanvasRenderer {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private readonly tileSize: number;\n  private draggingPiece: Piece | null = null;\n  private startX: number | null = null;\n  private startY: number | null = null;\n  private highlightedMoves: { x: number; y: number }[] = [];\n  private kingInCheckPosition: { x: number; y: number } | null = null;\n\n  constructor(\n    private board: Board,\n    canvasId: string,\n    private moveHandler: (\n      fromX: number,\n      fromY: number,\n      toX: number,\n      toY: number,\n    ) => boolean, // Utilisation d'un retour booléen pour vérifier si le mouvement est valide\n  ) {\n    this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d')!;\n    this.tileSize = this.canvas.width / 8;\n\n    // Définir le curseur par défaut\n    this.canvas.style.cursor = 'default';\n\n    // Ajouter des écouteurs pour gérer les événements de glisser-déposer\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n  }\n\n  // Animation pour déplacer une pièce\n  public animateMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    const frames = 10;\n    let currentFrame = 0;\n\n    const startX = fromX * this.tileSize;\n    const startY = fromY * this.tileSize;\n    const deltaX = ((toX - fromX) * this.tileSize) / frames;\n    const deltaY = ((toY - fromY) * this.tileSize) / frames;\n\n    const animate = () => {\n      if (currentFrame <= frames) {\n        // Redessine l'échiquier pour effacer l'ancienne position de la pièce\n        this.drawBoard();\n\n        this.context.fillStyle =\n          piece.color === PieceColor.WHITE ? 'white' : 'black';\n        this.context.font = '48px Arial';\n        this.context.textAlign = 'center';\n        this.context.textBaseline = 'middle';\n\n        // Dessine la pièce en mouvement\n        this.context.fillText(\n          this.getPieceText(piece),\n          startX + deltaX * currentFrame + this.tileSize / 2,\n          startY + deltaY * currentFrame + this.tileSize / 2,\n        );\n\n        currentFrame++;\n        requestAnimationFrame(animate);\n      } else {\n        // Redessiner l'échiquier à la fin de l'animation pour afficher la pièce à la position finale\n        this.drawBoard();\n      }\n    };\n\n    animate();\n  }\n\n  // Surligne les mouvements valides pour une pièce sélectionnée\n  private highlightValidMoves(moves: { x: number; y: number }[]): void {\n    this.context.fillStyle = 'rgba(0, 255, 0, 0.5)'; // Couleur de surlignage (vert translucide)\n    moves.forEach((move) => {\n      this.context.fillRect(\n        move.x * this.tileSize,\n        move.y * this.tileSize,\n        this.tileSize,\n        this.tileSize,\n      );\n    });\n  }\n\n  // Dessiner l'échiquier et les pièces\n  public drawBoard(): void {\n    // Obtenir la position du roi en échec si elle existe\n    const kingInCheck = this.board.getKingInCheck();\n    this.kingInCheckPosition = kingInCheck\n      ? { x: kingInCheck.x, y: kingInCheck.y }\n      : null;\n\n    // Dessiner le plateau\n    this.drawTiles();\n    this.drawPieces();\n  }\n\n  // Dessiner les cases de l'échiquier\n  private drawTiles(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const isDarkTile = (x + y) % 2 === 1;\n        let tileColor = isDarkTile ? '#769656' : '#eeeed2';\n\n        // Si la case contient le roi en échec, change la couleur\n        if (\n          this.kingInCheckPosition &&\n          this.kingInCheckPosition.x === x &&\n          this.kingInCheckPosition.y === y\n        ) {\n          tileColor = '#ff6347'; // Par exemple, une couleur rouge pour indiquer l'échec\n        }\n\n        this.context.fillStyle = tileColor;\n        this.context.fillRect(\n          x * this.tileSize,\n          y * this.tileSize,\n          this.tileSize,\n          this.tileSize,\n        );\n      }\n    }\n  }\n\n  // Dessiner toutes les pièces sur l'échiquier\n  private drawPieces(): void {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.board.getPiece(x, y);\n        if (piece) {\n          this.drawPiece(piece, x, y);\n        }\n      }\n    }\n  }\n\n  // Dessiner une pièce spécifique\n  private drawPiece(piece: Piece, x: number, y: number): void {\n    this.context.fillStyle = piece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(piece);\n    this.context.fillText(\n      pieceText,\n      x * this.tileSize + this.tileSize / 2,\n      y * this.tileSize + this.tileSize / 2,\n    );\n  }\n\n  // Convertir le type de pièce en texte pour affichage\n  private getPieceText(piece: Piece): string {\n    switch (piece.type) {\n      case 'pawn':\n        return piece.color === 'white' ? '♙' : '♟';\n      case 'rook':\n        return piece.color === 'white' ? '♖' : '♜';\n      case 'knight':\n        return piece.color === 'white' ? '♘' : '♞';\n      case 'bishop':\n        return piece.color === 'white' ? '♗' : '♝';\n      case 'queen':\n        return piece.color === 'white' ? '♕' : '♛';\n      case 'king':\n        return piece.color === 'white' ? '♔' : '♚';\n      default:\n        return '';\n    }\n  }\n\n  // Gérer le début du glissement\n  private handleMouseDown(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    const piece = this.board.getPiece(x, y);\n    if (piece) {\n      this.draggingPiece = piece;\n      this.startX = x;\n      this.startY = y;\n      this.canvas.style.cursor = 'grabbing'; // Change le curseur pendant le drag\n\n      // Obtenez les mouvements légaux pour la pièce sélectionnée\n      this.highlightedMoves = this.board.getValidMoves(x, y);\n\n      // Redessinez le plateau avec les cases surlignées\n      this.drawBoard();\n      this.highlightValidMoves(this.highlightedMoves); // Surligne les mouvements valides\n    }\n  }\n\n  // Gérer le mouvement pendant le glissement\n  private handleMouseMove(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Changer le curseur lorsque la souris survole une pièce\n    const piece = this.board.getPiece(x, y);\n    if (piece && !this.draggingPiece) {\n      this.canvas.style.cursor = 'pointer';\n    } else if (!this.draggingPiece) {\n      this.canvas.style.cursor = 'default';\n    }\n\n    if (!this.draggingPiece) return;\n\n    // Dessiner l'échiquier et les pièces\n    this.drawBoard();\n\n    // Assurez-vous que les mouvements valides restent visibles pendant le glissement\n    this.highlightValidMoves(this.highlightedMoves);\n\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    // Dessiner la pièce en mouvement\n    this.context.fillStyle =\n      this.draggingPiece.color === 'white' ? 'white' : 'black';\n    this.context.font = '48px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    const pieceText = this.getPieceText(this.draggingPiece);\n    this.context.fillText(pieceText, mouseX, mouseY);\n  }\n\n  // Gérer la fin du glissement\n  private handleMouseUp(event: MouseEvent): void {\n    if (!this.draggingPiece || this.startX === null || this.startY === null)\n      return;\n\n    const rect = this.canvas.getBoundingClientRect();\n    const x = Math.floor((event.clientX - rect.left) / this.tileSize);\n    const y = Math.floor((event.clientY - rect.top) / this.tileSize);\n\n    // Utilise la fonction de rappel `moveHandler` pour déplacer la pièce\n    const moveSuccessful = this.moveHandler(this.startX, this.startY, x, y);\n\n    // Réinitialise l'état de glissement\n    this.draggingPiece = null;\n    this.startX = null;\n    this.startY = null;\n    this.canvas.style.cursor = 'default'; // Rétablir le curseur par défaut\n\n    // Efface les coups surlignés\n    this.highlightedMoves = [];\n\n    // Redessine le plateau après la fin du glissement\n    this.drawBoard();\n\n    // Si le mouvement est réussi, met à jour le tour\n    if (moveSuccessful) {\n      this.drawBoard();\n    }\n  }\n}\n","// src/timer.ts\nexport class Timer {\n  private intervalId: number | null = null;\n  private currentTime: number;\n  private readonly onTimeUpdate: (timeLeft: number) => void;\n  public isRunning: boolean = false;\n\n  constructor(\n    private initialTime: number,\n    onTimeUpdate: (timeLeft: number) => void,\n  ) {\n    this.currentTime = initialTime;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Démarrer le compte à rebours\n  public start(): void {\n    if (this.isRunning) return;\n\n    console.log('Timer started.');\n    this.isRunning = true;\n    this.intervalId = window.setInterval(() => {\n      this.currentTime--;\n      this.onTimeUpdate(this.currentTime);\n\n      if (this.currentTime <= 0) {\n        this.currentTime = 0;\n        this.stop();\n        // Appel de la fonction onTimeUpdate une dernière fois pour garantir l'affichage du temps écoulé\n        this.onTimeUpdate(this.currentTime);\n      }\n    }, 1000);\n  }\n\n  // Arrêter le compte à rebours\n  public stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    console.log('Stopping timer.');\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n  }\n\n  // Réinitialiser le temps\n  public reset(time: number): void {\n    console.log('Resetting timer to', time);\n    this.stop();\n    this.currentTime = time;\n    this.start();\n  }\n}\n","// src/utils.ts\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById('gameMessage')!;\n  gameMessageElement.textContent = message;\n  gameMessageElement.style.display = 'block'; // Afficher le message\n}\n","// src/index.ts\nimport { Game } from './game';\nimport { CanvasRenderer } from './canvas-renderer';\nimport { Timer } from './timer';\nimport { PieceColor, PieceType } from './piece';\nimport { showMessage } from './utils';\n\nconst game = new Game();\nconst board = game.getBoard();\nconst moveHistoryElement = document.getElementById('moveHistory')!;\nconst currentTurnElement = document.getElementById('currentTurn')!;\nconst timerElement = document.getElementById('timer')!;\nconst capturedWhiteElement = document.getElementById('capturedWhite')!;\nconst capturedBlackElement = document.getElementById('capturedBlack')!;\nconst passTurnButton = document.getElementById('passTurnButton')!;\nconst gameMessageElement = document.getElementById('gameMessage')!;\nconst replayButton = document.getElementById('replayButton')!;\nconst drawButton = document.getElementById('drawButton')!;\nconst undoButton = document.getElementById('undoButton')!;\nconst acceptDrawButton = document.getElementById('acceptDrawButton')!;\n\nlet currentPlayer: PieceColor = PieceColor.WHITE; // Les blancs commencent toujours\nlet gameState: 'playing' | 'waiting' | 'drawProposed' = 'playing'; // Ajout de l'état pour la proposition de nullité\nlet hasMoved: boolean = false; // Indique si un mouvement a déjà été effectué dans ce tour\nlet capturedWhite: string[] = []; // Liste des pièces capturées par les Blancs\nlet capturedBlack: string[] = []; // Liste des pièces capturées par les Noirs\nlet moveHistory: {\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n  pieceType: PieceType;\n}[][] = [[]]; // Historique des mouvements par tour\nlet isGameEnded = false;\n\n// Initialiser le timer avec 60 secondes pour chaque joueur\nlet whiteTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.WHITE),\n);\nlet blackTimer = new Timer(60, (timeLeft) =>\n  updateTimerDisplay(timeLeft, PieceColor.BLACK),\n);\n\n// Fonction pour mettre à jour l'affichage du timer\nfunction updateTimerDisplay(timeLeft: number, color: PieceColor) {\n  if (color === currentPlayer) {\n    timerElement.textContent = `Temps restant: ${timeLeft}s`;\n    if (timeLeft <= 0 && !isGameEnded) {\n      showMessage(\n        `${currentPlayer === PieceColor.WHITE ? 'Noir' : 'Blanc'} gagne par temps écoulé !`,\n      );\n      endGame();\n    }\n  }\n}\n\n// Démarrer le jeu et dessiner le plateau\nconst renderer = new CanvasRenderer(board, 'chessBoard', handleMove);\nrenderer.drawBoard();\nwhiteTimer.start();\n\n// Fonction pour terminer la partie\n\nfunction endGame() {\n  // Empêche l'appel multiple d'endGame\n  if (isGameEnded) return;\n  isGameEnded = true;\n\n  // Stoppez les timers seulement si ce n'est pas déjà fait\n  if (whiteTimer.isRunning) whiteTimer.stop();\n  if (blackTimer.isRunning) blackTimer.stop();\n\n  gameState = 'waiting';\n  showMessage('La partie est terminée !');\n  replayButton.style.display = 'block';\n}\n\n// Fonction pour effacer le message d'erreur\nfunction clearMessage() {\n  gameMessageElement.textContent = '';\n  gameMessageElement.style.display = 'none';\n}\n\n// Fonction pour mettre à jour le tour et l'affichage\nfunction updateTurn() {\n  clearMessage();\n  currentPlayer =\n    currentPlayer === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  currentTurnElement.textContent = `Tour actuel: ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`;\n  hasMoved = false;\n\n  // Gestion des timers\n  if (currentPlayer === PieceColor.WHITE) {\n    if (blackTimer.isRunning) blackTimer.stop();\n    whiteTimer.reset(60);\n  } else {\n    if (whiteTimer.isRunning) whiteTimer.stop();\n    blackTimer.reset(60);\n  }\n\n  // Vérifie les conditions de nullité\n  if (board.isStalemate(currentPlayer)) {\n    showMessage('Pat ! La partie est nulle.');\n    endGame();\n  }\n\n  if (board.isInsufficientMaterial()) {\n    showMessage('Matériel insuffisant pour continuer, partie nulle !');\n    endGame();\n  }\n\n  if (board.isFiftyMoveRule()) {\n    showMessage('Règle des 50 coups, partie nulle !');\n    endGame();\n  }\n\n  // Gestion de la proposition de nullité\n  if (gameState === 'drawProposed') {\n    acceptDrawButton.style.display = 'block';\n  } else {\n    acceptDrawButton.style.display = 'none';\n  }\n\n  // Seul \"playing\" permet de jouer\n  if (gameState === 'playing') {\n    gameState = 'playing';\n  }\n\n  // Crée un nouveau tour dans l'historique des mouvements\n  moveHistory.push([]);\n}\n\n// Ajouter un mouvement à l'historique\nfunction addMoveToHistory(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n  pieceType: PieceType,\n) {\n  const moveText = `${pieceType} de (${fromX}, ${fromY}) à (${toX}, ${toY})`;\n  const listItem = document.createElement('li');\n  listItem.textContent = moveText;\n  moveHistoryElement.appendChild(listItem);\n\n  // Ajoutez le mouvement au tour actuel\n  moveHistory[moveHistory.length - 1].push({\n    fromX,\n    fromY,\n    toX,\n    toY,\n    pieceType,\n  });\n}\n\n// Fonction pour mettre à jour l'affichage des pièces capturées\nfunction updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const pieceSymbol = getPieceSymbol(piece, color);\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  } else {\n    capturedBlack.push(pieceSymbol);\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n\n// Fonction pour obtenir le symbole de la pièce capturée\nfunction getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case 'pawn':\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case 'rook':\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case 'knight':\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case 'bishop':\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case 'queen':\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case 'king':\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\n// Fonction pour gérer un mouvement sur le plateau\nexport function handleMove(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n): boolean {\n  if (gameState === 'waiting' || hasMoved) {\n    showMessage('Veuillez attendre le prochain tour !');\n    return false;\n  }\n\n  const piece = board.getPiece(fromX, fromY);\n  const targetPiece = board.getPiece(toX, toY);\n\n  // Vérifie que c'est bien le tour du joueur qui joue\n  if (!piece || piece.color !== currentPlayer) {\n    showMessage(\n      `Ce n'est pas le tour de ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n    );\n    return false;\n  }\n\n  // Vérifie si le mouvement est valide pour la pièce et respecte les règles des échecs\n  if (piece.isValidMove(fromX, fromY, toX, toY, board)) {\n    // Effectue le mouvement uniquement si valide\n    if (board.movePiece(fromX, fromY, toX, toY)) {\n      // Marquer que le joueur a effectué son coup\n      hasMoved = true;\n\n      // Si une pièce est capturée, l'ajouter aux pièces capturées\n      if (targetPiece) {\n        updateCapturedPieces(targetPiece.type, targetPiece.color);\n      }\n\n      // Ajoute le mouvement à l'historique\n      addMoveToHistory(fromX, fromY, toX, toY, piece.type);\n\n      // Utilise l'animation pour le déplacement\n      renderer.animateMove(fromX, fromY, toX, toY, piece);\n\n      // Vérifie si cela met le roi adverse en échec\n      const opponentColor =\n        currentPlayer === PieceColor.WHITE\n          ? PieceColor.BLACK\n          : PieceColor.WHITE;\n      if (board.isKingInCheck(opponentColor)) {\n        if (board.isCheckmate(opponentColor)) {\n          showMessage(\n            `Échec et Mat ! ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'} gagne !`,\n          );\n          endGame();\n        } else {\n          showMessage(\n            `Échec au ${opponentColor === PieceColor.WHITE ? 'Blanc' : 'Noir'} !`,\n          );\n        }\n      }\n\n      // Change de tour après un mouvement valide\n      updateTurn();\n      return true;\n    }\n  }\n\n  // Si le mouvement est invalide, retourne faux\n  showMessage('Mouvement invalide !');\n  return false;\n}\n\n// Gérer le clic sur \"Passer son tour\"\npassTurnButton.addEventListener('click', (event) => {\n  event.preventDefault();\n  if (gameState === 'playing') {\n    showMessage(\n      `Tour passé pour ${currentPlayer === PieceColor.WHITE ? 'Blanc' : 'Noir'}`,\n    );\n    updateTurn();\n  }\n});\n\n// Gérer le clic sur \"Rejouer\"\nreplayButton.addEventListener('click', () => {\n  location.reload();\n});\n\n// Gérer le clic sur \"Proposer une Nulle\"\ndrawButton.addEventListener('click', () => {\n  if (gameState === 'playing') {\n    showMessage(\n      \"Proposition de nullité faite. Attente de la réponse de l'adversaire.\",\n    );\n    gameState = 'drawProposed';\n    updateTurn(); // Change de tour pour que l'adversaire décide\n  }\n});\n\n// Gérer le clic sur \"Accepter la Nulle\"\nacceptDrawButton.addEventListener('click', () => {\n  if (gameState === 'drawProposed') {\n    showMessage('Partie Nulle par Accord Mutuel !');\n    gameState = 'waiting'; // Change l'état du jeu à \"waiting\"\n    endGame();\n  }\n});\n\n// Gérer le clic sur \"Annuler le dernier coup\"\nundoButton.addEventListener('click', () => {\n  if (gameState === 'playing' && moveHistory.length > 0) {\n    const currentTurnMoves = moveHistory[moveHistory.length - 1];\n\n    // Annule uniquement si c'est encore le tour actuel\n    if (currentTurnMoves.length > 0) {\n      const lastMove = currentTurnMoves.pop();\n      if (lastMove) {\n        board.movePiece(\n          lastMove.toX,\n          lastMove.toY,\n          lastMove.fromX,\n          lastMove.fromY,\n        );\n        showMessage('Dernier coup annulé !');\n        renderer.drawBoard();\n      }\n    }\n\n    // Si le tour n'a plus de mouvements, supprime le tour vide\n    if (currentTurnMoves.length === 0 && moveHistory.length > 1) {\n      moveHistory.pop();\n    }\n  }\n});\n"],"names":["PieceColor","PieceType","Piece","color","type","fromX","fromY","toX","toY","board","dx","dy","x","y","targetPiece","Rook","__publicField","Knight","Bishop","Queen","King","direction","rookX","rook","Pawn","startRow","distanceY","distanceX","promotionDialog","pieceType","Board","piece","validMoves","originalPiece","king","kingX","kingY","_a","kingPosition","kingSafe","pieces","Game","CanvasRenderer","canvasId","moveHandler","currentFrame","startX","startY","deltaX","deltaY","animate","moves","move","kingInCheck","tileColor","pieceText","event","rect","mouseX","mouseY","moveSuccessful","Timer","initialTime","onTimeUpdate","time","showMessage","message","gameMessageElement","game","moveHistoryElement","currentTurnElement","timerElement","capturedWhiteElement","capturedBlackElement","passTurnButton","replayButton","drawButton","undoButton","acceptDrawButton","currentPlayer","gameState","hasMoved","capturedWhite","capturedBlack","moveHistory","isGameEnded","whiteTimer","timeLeft","updateTimerDisplay","blackTimer","endGame","renderer","handleMove","clearMessage","updateTurn","addMoveToHistory","moveText","listItem","updateCapturedPieces","pieceSymbol","getPieceSymbol","opponentColor","currentTurnMoves","lastMove"],"mappings":"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"}