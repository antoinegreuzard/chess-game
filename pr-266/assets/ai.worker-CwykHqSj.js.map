{"version":3,"file":"ai.worker-CwykHqSj.js","sources":["../src/utils/pieceFactory.ts","../src/piece.ts","../src/utils/utils.ts","../src/board.ts","../src/ai/evaluator.ts","../src/ai/endgameTablebase.ts","../src/ai/openingBook.ts","../src/ai/gamesAnalyzer.ts","../src/ai/contextualMoveDatabase.ts","../src/ai.ts","../src/pieces/pawn.ts","../src/ai.worker.ts"],"sourcesContent":["import { PieceColor, PieceType } from '../piece';\n\nexport async function createPiece(type: PieceType, color: PieceColor) {\n  switch (type) {\n    case PieceType.PAWN:\n      const { Pawn } = await import('../pieces/pawn');\n      return new Pawn(color);\n    case PieceType.ROOK:\n      const { Rook } = await import('../pieces/rook');\n      return new Rook(color);\n    case PieceType.KNIGHT:\n      const { Knight } = await import('../pieces/knight');\n      return new Knight(color);\n    case PieceType.BISHOP:\n      const { Bishop } = await import('../pieces/bishop');\n      return new Bishop(color);\n    case PieceType.QUEEN:\n      const { Queen } = await import('../pieces/queen');\n      return new Queen(color);\n    case PieceType.KING:\n      const { King } = await import('../pieces/king');\n      return new King(color);\n    default:\n      throw new Error(`Type de pièce inconnu : ${type}`);\n  }\n}\n","// src/piece.ts\nimport { createPiece } from './utils/pieceFactory';\nimport { King } from './pieces/king';\n\nexport enum PieceColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\n\nexport enum PieceType {\n  PAWN = 'pawn',\n  ROOK = 'rook',\n  KNIGHT = 'knight',\n  BISHOP = 'bishop',\n  QUEEN = 'queen',\n  KING = 'king',\n}\n\nexport interface BoardInterface {\n  getPiece(x: number, y: number): Piece | null;\n\n  updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void;\n\n  isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean;\n\n  promotePawn(\n    x: number,\n    y: number,\n    pieceType: PieceType | string,\n  ): Promise<void>;\n\n  isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean;\n\n  isKing(x: number, y: number): boolean;\n\n  isAdjacentToAnotherKing(x: number, y: number, color: PieceColor): boolean;\n\n  getPlayerColor(): PieceColor;\n\n  captureEnPassantIfValid(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void;\n}\n\nexport abstract class Piece {\n  public hasMoved: boolean = false;\n\n  protected constructor(\n    public color: PieceColor,\n    public type: PieceType,\n  ) {}\n\n  abstract isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean;\n\n  public isPathClear(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    const dx = Math.sign(toX - fromX);\n    const dy = Math.sign(toY - fromY);\n\n    let x = fromX + dx;\n    let y = fromY + dy;\n    while (x !== toX || y !== toY) {\n      if (board.getPiece(x, y) !== null) return false;\n      x += dx;\n      y += dy;\n    }\n    return true;\n  }\n\n  static isKing(piece: Piece): piece is King {\n    return piece.type === PieceType.KING;\n  }\n\n  public canCapture(toX: number, toY: number, board: BoardInterface): boolean {\n    const targetPiece = board.getPiece(toX, toY);\n    return !targetPiece || targetPiece.color !== this.color;\n  }\n\n  // Sérialisation des données de la pièce\n  public toData(): any {\n    return {\n      color: this.color,\n      type: this.type,\n    };\n  }\n\n  static async fromData(data: any): Promise<Piece> {\n    return await createPiece(data.type, data.color);\n  }\n\n  // Nouvelle méthode pour vérifier les menaces sans règles spécifiques du roi\n  public isThreatenedMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    return dx <= 1 && dy <= 1;\n  }\n}\n","// src/utils/utils.ts\n\nimport { PieceColor, PieceType } from '../piece';\nimport { Board } from '../board';\nimport { Move } from '../ai/openingBook';\n\nexport let capturedWhite: string[] = [];\nexport let capturedBlack: string[] = [];\n\nexport function showMessage(message: string) {\n  const gameMessageElement = document.getElementById(\n    'gameMessage',\n  ) as HTMLDivElement;\n  if (gameMessageElement) {\n    gameMessageElement.textContent = message;\n    gameMessageElement.style.display = 'block'; // Afficher le message\n  }\n}\n\nexport function getPieceSymbol(piece: PieceType, color: PieceColor): string {\n  switch (piece) {\n    case PieceType.PAWN:\n      return color === PieceColor.WHITE ? '♙' : '♟';\n    case PieceType.ROOK:\n      return color === PieceColor.WHITE ? '♖' : '♜';\n    case PieceType.KNIGHT:\n      return color === PieceColor.WHITE ? '♘' : '♞';\n    case PieceType.BISHOP:\n      return color === PieceColor.WHITE ? '♗' : '♝';\n    case PieceType.QUEEN:\n      return color === PieceColor.WHITE ? '♕' : '♛';\n    case PieceType.KING:\n      return color === PieceColor.WHITE ? '♔' : '♚';\n    default:\n      return '';\n  }\n}\n\nexport function updateCapturedPieces(piece: PieceType, color: PieceColor) {\n  const pieceSymbol = getPieceSymbol(piece, color);\n\n  if (color === PieceColor.WHITE) {\n    capturedWhite.push(pieceSymbol);\n  } else {\n    capturedBlack.push(pieceSymbol);\n  }\n\n  updateCapturedPiecesDOM();\n}\n\nexport function updateCapturedPiecesDOM(): void {\n  const capturedWhiteElement = document.getElementById(\n    'capturedWhite',\n  ) as HTMLDivElement;\n  const capturedBlackElement = document.getElementById(\n    'capturedBlack',\n  ) as HTMLDivElement;\n\n  if (capturedWhiteElement) {\n    capturedWhiteElement.textContent = capturedWhite.join(' ');\n  }\n  if (capturedBlackElement) {\n    capturedBlackElement.textContent = capturedBlack.join(' ');\n  }\n}\n\nexport function describeMove(board: Board, move: Move): string {\n  const piece = board.getPiece(move.fromX, move.fromY);\n  if (!piece) {\n    return `❗ Erreur : aucune pièce à (${move.fromX}, ${move.fromY})`;\n  }\n\n  const symbols = {\n    [PieceType.PAWN]: '♟',\n    [PieceType.KNIGHT]: '♞',\n    [PieceType.BISHOP]: '♝',\n    [PieceType.ROOK]: '♜',\n    [PieceType.QUEEN]: '♛',\n    [PieceType.KING]: '♚',\n  };\n\n  const from = `${String.fromCharCode(97 + move.fromX)}${8 - move.fromY}`;\n  const to = `${String.fromCharCode(97 + move.toX)}${8 - move.toY}`;\n\n  return `${piece.color === PieceColor.WHITE ? 'Blanc' : 'Noir'} joue ${symbols[piece.type]} de ${from} à ${to}`;\n}\n","// src/board.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from './piece';\nimport { King } from './pieces/king';\nimport { updateCapturedPieces } from './utils/utils';\nimport { createPiece } from './utils/pieceFactory';\n\ntype BoardSquare = Piece | null;\n\nexport class Board implements BoardInterface {\n  private grid: (Piece | null)[][];\n  private enPassantTarget: { x: number; y: number } | null = null;\n  private halfMoveCount: number = 0; // Compteur pour la règle des 50 coups\n  private currentPlayer: PieceColor = PieceColor.WHITE;\n\n  public flipBoard: boolean = false;\n\n  constructor() {\n    this.grid = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n  }\n\n  public async init(): Promise<void> {\n    this.grid = await this.initializeBoard();\n  }\n\n  public setFlipBoard(flip: boolean): void {\n    this.flipBoard = flip;\n  }\n\n  private async initializeBoard(): Promise<(Piece | null)[][]> {\n    const board: (Piece | null)[][] = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null));\n\n    // Pièces noires en haut (rangée 8 = y=0)\n    board[0] = [\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.QUEEN, PieceColor.BLACK),\n      await createPiece(PieceType.KING, PieceColor.BLACK),\n      await createPiece(PieceType.BISHOP, PieceColor.BLACK),\n      await createPiece(PieceType.KNIGHT, PieceColor.BLACK),\n      await createPiece(PieceType.ROOK, PieceColor.BLACK),\n    ];\n    board[1] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.BLACK)),\n    );\n\n    // Pièces blanches en bas (rangée 1 = y=7)\n    board[7] = [\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.QUEEN, PieceColor.WHITE),\n      await createPiece(PieceType.KING, PieceColor.WHITE),\n      await createPiece(PieceType.BISHOP, PieceColor.WHITE),\n      await createPiece(PieceType.KNIGHT, PieceColor.WHITE),\n      await createPiece(PieceType.ROOK, PieceColor.WHITE),\n    ];\n    board[6] = await Promise.all(\n      Array(8)\n        .fill(null)\n        .map(() => createPiece(PieceType.PAWN, PieceColor.WHITE)),\n    );\n\n    return board;\n  }\n\n  // Méthode générale pour vérifier les limites\n  public isWithinBounds(x: number, y: number): boolean {\n    return x >= 0 && x < 8 && y >= 0 && y < 8;\n  }\n\n  public getPiece(x: number, y: number): BoardSquare {\n    return this.grid[y][x];\n  }\n\n  public getValidMoves(x: number, y: number): { x: number; y: number }[] {\n    let piece = null;\n    if (this.isWithinBounds(x, y)) piece = this.getPiece(x, y);\n    if (!piece) return [];\n\n    const validMoves: { x: number; y: number }[] = [];\n\n    for (let toY = 0; toY < 8; toY++) {\n      for (let toX = 0; toX < 8; toX++) {\n        if (piece.isValidMove(x, y, toX, toY, this)) {\n          validMoves.push({ x: toX, y: toY });\n        }\n      }\n    }\n\n    return validMoves;\n  }\n\n  public captureEnPassantIfValid(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): void {\n    if (this.isEnPassantMove(fromX, fromY, toX, toY)) {\n      const movingPawn = this.getPiece(fromX, fromY);\n      if (!movingPawn) return;\n\n      // Détermine la position du pion capturé en fonction de la couleur\n      const capturedPawnY =\n        toY + (movingPawn.color === PieceColor.WHITE ? -1 : 1);\n\n      if (this.grid[capturedPawnY][toX]) {\n        this.grid[capturedPawnY][toX] = null;\n      }\n    }\n  }\n\n  public getKingInCheck(): { x: number; y: number } | null {\n    if (this.isKingInCheck(PieceColor.WHITE)) {\n      return this.findKing(PieceColor.WHITE);\n    } else if (this.isKingInCheck(PieceColor.BLACK)) {\n      return this.findKing(PieceColor.BLACK);\n    }\n    return null;\n  }\n\n  public movePiece(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    isSimulation: boolean = true,\n  ): boolean {\n    if (\n      !this.isWithinBounds(fromX, fromY) ||\n      !this.isWithinBounds(toX, toY) ||\n      ['__proto__', 'constructor', 'prototype'].includes(fromY.toString()) ||\n      ['__proto__', 'constructor', 'prototype'].includes(toY.toString())\n    ) {\n      return false; // Mouvement invalide en dehors des limites ou clé interdite\n    }\n\n    const piece = this.getPiece(fromX, fromY);\n    if (piece && piece.isValidMove(fromX, fromY, toX, toY, this)) {\n      const targetPiece = this.getPiece(toX, toY);\n\n      // Empêche de capturer le roi ennemi\n      if (targetPiece && targetPiece.type === PieceType.KING) {\n        return false;\n      }\n\n      // Gestion du roque pour le roi\n      if (piece.type === PieceType.KING && Math.abs(toX - fromX) === 2) {\n        if (this.isCastlingValid(piece, fromX, fromY, toX)) {\n          this.handleCastling(toX, fromY);\n          piece.hasMoved = true; // Met à jour le statut de mouvement du roi\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      // Gestion de la prise en passant\n      if (\n        piece?.type === PieceType.PAWN &&\n        this.isEnPassantMove(fromX, fromY, toX, toY)\n      ) {\n        this.captureEnPassant(fromX, fromY, toX, toY); // Capture le pion en passant\n      }\n\n      // Sauvegarde l'état avant de simuler le mouvement\n      this.grid[toY][toX] = piece;\n      this.grid[fromY][fromX] = null;\n      if (!isSimulation) {\n        piece.hasMoved = true;\n      }\n\n      // Vérifie si le mouvement met le roi du joueur en échec\n      if (this.isKingInCheck(piece.color)) {\n        // Annule le mouvement si le roi est en échec\n        this.grid[fromY][fromX] = piece;\n        this.grid[toY][toX] = targetPiece;\n        return false;\n      }\n\n      // Mise à jour de `hasMoved` pour les rois et tours\n      if (piece.type === PieceType.KING || piece.type === PieceType.ROOK) {\n        piece.hasMoved = true;\n      }\n\n      // Mise à jour de l'état après un mouvement valide\n      this.updateEnPassantTarget(fromX, fromY, toX, toY, piece);\n\n      // Réinitialise le compteur pour la règle des 50 coups si un pion bouge ou une capture a lieu\n      this.halfMoveCount =\n        piece.type === PieceType.PAWN || targetPiece\n          ? 0\n          : this.halfMoveCount + 1;\n\n      // Vérifie si le mouvement met l'adversaire en échec et mat\n      const opponentColor =\n        piece.color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n      if (this.isCheckmate(opponentColor)) {\n        return true; // Partie terminée\n      }\n\n      return true;\n    }\n\n    return false; // Mouvement invalide\n  }\n\n  private isCastlingValid(\n    king: King,\n    fromX: number,\n    fromY: number,\n    toX: number,\n  ): boolean {\n    const direction = toX > fromX ? 1 : -1;\n    const rookX = toX > fromX ? 7 : 0;\n    const rook = this.getPiece(rookX, fromY);\n\n    // Vérification des conditions de roque : roi et tour n'ont pas bougé, et la tour est présente\n    if (!(rook?.type === PieceType.ROOK) || rook.hasMoved || king.hasMoved)\n      return false;\n\n    // Vérifie que les cases entre le roi et la tour sont libres et non attaquées\n    for (let x = fromX + direction; x !== toX + direction; x += direction) {\n      if (\n        this.getPiece(x, fromY) ||\n        this.isSquareUnderAttack(x, fromY, king.color)\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private handleCastling(kingX: number, kingY: number): void {\n    // Petit roque (roi vers la droite)\n    if (kingX === 6) {\n      const rook = this.getPiece(7, kingY);\n      const king = this.getPiece(4, kingY);\n      if (\n        rook?.type === PieceType.ROOK &&\n        !rook.hasMoved &&\n        king?.type === PieceType.KING &&\n        !king.hasMoved\n      ) {\n        // Déplace la tour et le roi pour le petit roque\n        this.setPiece(5, kingY, rook); // Déplace la tour\n        this.setPiece(7, kingY, null); // Enlève la tour de sa position initiale\n        this.setPiece(6, kingY, king); // Déplace le roi vers sa nouvelle position\n        this.setPiece(4, kingY, null); // Enlève le roi de sa position initiale\n\n        // Marque le roi et la tour comme ayant bougé\n        king.hasMoved = true;\n        rook.hasMoved = true;\n      }\n    }\n    // Grand roque (roi vers la gauche)\n    else if (kingX === 2) {\n      const rook = this.getPiece(0, kingY);\n      const king = this.getPiece(4, kingY);\n      if (\n        rook?.type === PieceType.ROOK &&\n        !rook.hasMoved &&\n        king?.type === PieceType.KING &&\n        !king.hasMoved\n      ) {\n        // Déplace la tour et le roi pour le grand roque\n        this.setPiece(3, kingY, rook); // Déplace la tour\n        this.setPiece(0, kingY, null); // Enlève la tour de sa position initiale\n        this.setPiece(2, kingY, king); // Déplace le roi vers sa nouvelle position\n        this.setPiece(4, kingY, null); // Enlève le roi de sa position initiale\n\n        // Marque le roi et la tour comme ayant bougé\n        king.hasMoved = true;\n        rook.hasMoved = true;\n      }\n    }\n  }\n\n  public updateEnPassantTarget(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    piece: Piece,\n  ): void {\n    // Vérifie que la pièce est un pion et qu'il avance de deux cases\n    if (\n      piece?.type === PieceType.PAWN &&\n      Math.abs(toY - fromY) === 2 &&\n      fromX === toX\n    ) {\n      // Si le pion avance de deux cases, configure `enPassantTarget`\n      // pour permettre une prise en passant lors du tour suivant\n      this.enPassantTarget = { x: toX, y: (fromY + toY) / 2 };\n    } else {\n      // Réinitialise `enPassantTarget` si aucune condition de prise en passant n'est remplie\n      this.enPassantTarget = null;\n    }\n  }\n\n  public captureEnPassant(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): { capturedWhite: PieceType[]; capturedBlack: PieceType[] } | null {\n    const piece = this.getPiece(fromX, fromY);\n\n    if (\n      this.isEnPassantMove(fromX, fromY, toX, toY) &&\n      piece?.type === PieceType.PAWN\n    ) {\n      const direction = piece.color === PieceColor.WHITE ? -1 : 1;\n      const capturedPawnY = toY + direction;\n      const capturedPawn = this.getPiece(toX, capturedPawnY);\n\n      if (capturedPawn && capturedPawn.type === PieceType.PAWN) {\n        // Supprime le pion capturé de la grille\n        this.grid[capturedPawnY][toX] = null;\n\n        // Initialise les données de capture\n        const captureData: {\n          capturedWhite: PieceType[];\n          capturedBlack: PieceType[];\n        } = {\n          capturedWhite: [],\n          capturedBlack: [],\n        };\n\n        // Met à jour les données de capture selon la couleur du pion capturé\n        if (capturedPawn.color === PieceColor.WHITE) {\n          captureData.capturedWhite.push(capturedPawn.type);\n        } else {\n          captureData.capturedBlack.push(capturedPawn.type);\n        }\n\n        // Appelle updateCapturedPieces pour mettre à jour l'interface\n        updateCapturedPieces(capturedPawn.type, capturedPawn.color);\n\n        return captureData;\n      }\n    }\n    return null;\n  }\n\n  public isEnPassantMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    if (!this.enPassantTarget) return false;\n\n    // Vérifie que le mouvement cible la bonne case pour la prise en passant\n    const piece = this.getPiece(fromX, fromY);\n    return (\n      piece?.type === PieceType.PAWN &&\n      toX === this.enPassantTarget.x &&\n      toY === this.enPassantTarget.y &&\n      Math.abs(fromX - toX) === 1 &&\n      Math.abs(fromY - toY) === 1\n    );\n  }\n\n  public async promotePawn(\n    x: number,\n    y: number,\n    pieceType: string,\n  ): Promise<void> {\n    const color = this.getPiece(x, y)?.color;\n\n    if (!color) return;\n\n    switch (pieceType) {\n      case 'queen':\n        this.grid[y][x] = await createPiece(PieceType.QUEEN, color);\n        break;\n      case 'rook':\n        this.grid[y][x] = await createPiece(PieceType.ROOK, color);\n        break;\n      case 'bishop':\n        this.grid[y][x] = await createPiece(PieceType.BISHOP, color);\n        break;\n      case 'knight':\n        this.grid[y][x] = await createPiece(PieceType.KNIGHT, color);\n        break;\n    }\n  }\n\n  public isKingInCheck(color: PieceColor): boolean {\n    const kingPosition = this.findKing(color);\n    if (!kingPosition) {\n      return false;\n    }\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color !== color) {\n          if (piece.isValidMove(x, y, kingPosition.x, kingPosition.y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public isCheckmate(color: PieceColor): boolean {\n    // Vérifie si le roi de la couleur donnée est en échec\n    const kingInCheck = this.isKingInCheck(color);\n\n    // Si le roi n'est pas en échec, ce n'est pas un échec et mat\n    if (!kingInCheck) {\n      return false;\n    }\n\n    // Parcourt chaque pièce de la couleur donnée pour trouver un mouvement légal\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          const moves = this.getValidMoves(x, y);\n\n          for (const move of moves) {\n            // Simule le mouvement\n            const originalPiece = this.getPiece(move.x, move.y);\n            this.grid[move.y][move.x] = piece;\n            this.grid[y][x] = null;\n\n            const kingSafe = !this.isKingInCheck(color);\n\n            // Annule le mouvement simulé\n            this.grid[y][x] = piece;\n            this.grid[move.y][move.x] = originalPiece;\n\n            if (kingSafe) {\n              return false; // Un mouvement légal existe pour sortir de l'échec\n            }\n          }\n        }\n      }\n    }\n\n    return true; // Aucun mouvement possible, échec et mat\n  }\n\n  public isStalemate(color: PieceColor): boolean {\n    // Pat uniquement si le roi n'est pas en échec et qu'il n'y a aucun coup légal disponible\n    if (this.isKingInCheck(color)) return false;\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece.color === color) {\n          for (let toY = 0; toY < 8; toY++) {\n            for (let toX = 0; toX < 8; toX++) {\n              if (piece.isValidMove(x, y, toX, toY, this)) {\n                // Simuler le mouvement pour vérifier l'échec potentiel\n                const originalPiece = this.getPiece(toX, toY);\n                this.grid[toY][toX] = piece;\n                this.grid[y][x] = null;\n\n                const isKingSafe = !this.isKingInCheck(color);\n\n                // Annuler le mouvement simulé\n                this.grid[y][x] = piece;\n                this.grid[toY][toX] = originalPiece;\n\n                if (isKingSafe) return false; // Mouvement valide trouvé, pas de pat\n              }\n            }\n          }\n        }\n      }\n    }\n    return true; // Aucun coup légal trouvé, pat détecté\n  }\n\n  findKing(color: PieceColor): { x: number; y: number } | null {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece && piece?.type === PieceType.KING && piece.color === color) {\n          return { x, y };\n        }\n      }\n    }\n    return null;\n  }\n\n  public isKing(x: number, y: number): boolean {\n    const piece = this.getPiece(x, y);\n    return piece?.type === PieceType.KING;\n  }\n\n  public isSquareUnderAttack(x: number, y: number, color: PieceColor): boolean {\n    for (let fromY = 0; fromY < 8; fromY++) {\n      for (let fromX = 0; fromX < 8; fromX++) {\n        const piece = this.getPiece(fromX, fromY);\n        if (piece && piece.color !== color) {\n          // Utilise `isThreatenedMove` pour éviter la récursion infinie\n          if (piece.type === PieceType.KING) {\n            if (piece.isThreatenedMove(fromX, fromY, x, y)) {\n              return true;\n            }\n          } else if (piece.isValidMove(fromX, fromY, x, y, this)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Vérifie le matériel insuffisant pour un échec et mat\n  public isInsufficientMaterial(): boolean {\n    const pieces = this.grid.flat().filter((piece) => piece !== null);\n\n    // Cas les plus courants de matériel insuffisant\n    if (pieces.length <= 2) return true; // Seulement les rois sur le plateau\n    return (\n      pieces.length === 3 &&\n      pieces.some(\n        (piece) =>\n          piece?.type === PieceType.BISHOP || piece?.type === PieceType.KNIGHT,\n      )\n    );\n  }\n\n  // Vérifie si la règle des 50 coups est remplie\n  public isFiftyMoveRule(): boolean {\n    return this.halfMoveCount >= 50;\n  }\n\n  public setPiece(x: number, y: number, piece: Piece | null): void {\n    this.grid[y][x] = piece;\n  }\n\n  // Vérifie si un mouvement est valide\n  public isMoveValid(\n    fromRow: number,\n    fromCol: number,\n    toRow: number,\n    toCol: number,\n  ): boolean {\n    const piece = this.getPiece(fromRow, fromCol);\n\n    // Si aucune pièce n'est présente à l'emplacement source, le mouvement est invalide\n    if (!piece) {\n      return false;\n    }\n\n    // Si la destination est en dehors de l'échiquier, mouvement invalide\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) {\n      return false;\n    }\n\n    // Vérifie si la pièce peut se déplacer à cette destination en utilisant la logique de mouvement de la pièce\n    if (!piece.isValidMove(fromRow, fromCol, toRow, toCol, this)) {\n      return false;\n    }\n\n    // Vérifie s'il y a une pièce à la destination et si elle est de la même couleur\n    const destinationPiece = this.getPiece(toRow, toCol);\n    return !(destinationPiece && destinationPiece.color === piece.color);\n  }\n\n  public isCapture(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n  ): boolean {\n    const piece = this.isWithinBounds(fromX, fromY)\n      ? this.getPiece(fromX, fromY)\n      : null;\n    const targetPiece = this.isWithinBounds(toX, toY)\n      ? this.getPiece(toX, toY)\n      : null;\n\n    // Vérifie qu'il y a une pièce à la position cible et qu'elle est d'une couleur opposée\n    return (\n      piece !== null &&\n      targetPiece !== null &&\n      piece.color !== targetPiece.color\n    );\n  }\n\n  public static async fromData(data: any): Promise<Board> {\n    const board = new Board();\n    await board.init();\n    board.grid = await Promise.all(\n      data.grid.map(async (row: any[]) =>\n        Promise.all(\n          row.map(async (pieceData) =>\n            pieceData ? await Piece.fromData(pieceData) : null,\n          ),\n        ),\n      ),\n    );\n    return board;\n  }\n\n  public toData(): any {\n    return {\n      grid: this.grid.map((row) =>\n        row.map((piece) => (piece ? piece.toData() : null)),\n      ),\n    };\n  }\n\n  public isAdjacentToAnotherKing(\n    x: number,\n    y: number,\n    color: PieceColor,\n  ): boolean {\n    const kingPositions = [\n      { dx: -1, dy: -1 },\n      { dx: -1, dy: 0 },\n      { dx: -1, dy: 1 },\n      { dx: 0, dy: -1 },\n      { dx: 0, dy: 1 },\n      { dx: 1, dy: -1 },\n      { dx: 1, dy: 0 },\n      { dx: 1, dy: 1 },\n    ];\n\n    for (const { dx, dy } of kingPositions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      const piece = this.isWithinBounds(nx, ny) ? this.getPiece(nx, ny) : null;\n      if (piece?.type === PieceType.KING && piece.color !== color) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public getPieceCount(): number {\n    return this.grid.flat().filter((piece) => piece !== null).length;\n  }\n\n  public setPlayerColor(color: PieceColor): void {\n    this.currentPlayer = color;\n  }\n\n  public getPlayerColor(): PieceColor {\n    return this.currentPlayer;\n  }\n\n  public getCurrentMovesHash(): string {\n    let hash = '';\n\n    for (let y = 0; y < 8; y++) {\n      let emptyCount = 0;\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece) {\n          // If there were empty squares, add their count to the hash\n          if (emptyCount > 0) {\n            hash += emptyCount.toString();\n            emptyCount = 0;\n          }\n          // Use standard FEN notation for pieces\n          const pieceChar = this.getPieceSymbol(piece);\n          hash += pieceChar;\n        } else {\n          // Count empty squares\n          emptyCount++;\n        }\n      }\n      // Add any remaining empty squares in the row\n      if (emptyCount > 0) hash += emptyCount.toString();\n      // Add row separator, except for the last row\n      if (y < 7) hash += '/';\n    }\n\n    // Append the current player's turn\n    hash += ` ${this.currentPlayer === PieceColor.WHITE ? 'w' : 'b'}`;\n\n    return hash;\n  }\n\n  private getPieceSymbol(piece: Piece): string {\n    const symbolMap: { [key in PieceType]: string } = {\n      [PieceType.PAWN]: 'p',\n      [PieceType.ROOK]: 'r',\n      [PieceType.KNIGHT]: 'n', // Use 'n' for knight to avoid confusion with king\n      [PieceType.BISHOP]: 'b',\n      [PieceType.QUEEN]: 'q',\n      [PieceType.KING]: 'k',\n    };\n    // Return the symbol in uppercase for White, lowercase for Black\n    return piece.color === PieceColor.WHITE\n      ? symbolMap[piece.type].toUpperCase()\n      : symbolMap[piece.type];\n  }\n\n  // Méthode toString pour représenter le plateau et état de jeu actuel\n  public toString(): string {\n    let boardString = '';\n\n    // Inclure chaque pièce et sa position sur le plateau\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = this.getPiece(x, y);\n        if (piece) {\n          boardString += `${piece.color[0]}${piece.type[0]}`;\n        } else {\n          boardString += '__'; // Place vide pour chaque case\n        }\n      }\n    }\n\n    // Ajouter l'état d'en passant, demi-coups, et joueur actuel\n    boardString += this.enPassantTarget\n      ? `e${this.enPassantTarget.x}${this.enPassantTarget.y}`\n      : 'e--';\n    boardString += `h${this.halfMoveCount}`;\n    boardString += `p${this.currentPlayer[0]}`;\n\n    return boardString;\n  }\n}\n","// src/evaluator.ts\nimport { Board } from '../board';\nimport { PieceColor, PieceType } from '../piece';\n\n// Valeurs des pièces (évaluation de base)\nexport const pieceValues: Record<PieceType, number> = {\n  [PieceType.PAWN]: 1,\n  [PieceType.KNIGHT]: 3,\n  [PieceType.BISHOP]: 3.25,\n  [PieceType.ROOK]: 5,\n  [PieceType.QUEEN]: 9,\n  [PieceType.KING]: 0,\n};\n\n// Tables de positions pour améliorer l'évaluation\nconst pieceSquareTables: { [key in PieceType]: number[][] } = {\n  [PieceType.PAWN]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1],\n    [0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05],\n    [0, 0, 0, 0.2, 0.2, 0, 0, 0],\n    [0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05],\n    [0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  [PieceType.KNIGHT]: [\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n    [-0.4, -0.2, 0, 0, 0, 0, -0.2, -0.4],\n    [-0.3, 0, 0.1, 0.15, 0.15, 0.1, 0, -0.3],\n    [-0.3, 0.05, 0.15, 0.2, 0.2, 0.15, 0.05, -0.3],\n    [-0.3, 0, 0.15, 0.2, 0.2, 0.15, 0, -0.3],\n    [-0.3, 0.05, 0.1, 0.15, 0.15, 0.1, 0.05, -0.3],\n    [-0.4, -0.2, 0, 0.05, 0.05, 0, -0.2, -0.4],\n    [-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5],\n  ],\n  [PieceType.BISHOP]: [\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, -0.1],\n    [-0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, -0.1],\n    [-0.1, 0, 0.1, 0.1, 0.1, 0.1, 0, -0.1],\n    [-0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -0.1],\n    [-0.1, 0.05, 0, 0, 0, 0, 0.05, -0.1],\n    [-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.ROOK]: [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [-0.05, 0, 0, 0, 0, 0, 0, -0.05],\n    [0, 0, 0, 0.05, 0.05, 0, 0, 0],\n  ],\n  [PieceType.QUEEN]: [\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n    [-0.1, 0, 0, 0, 0, 0, 0, -0.1],\n    [-0.1, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.05, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [0, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05],\n    [-0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0, -0.1],\n    [-0.1, 0, 0.05, 0, 0, 0, 0, -0.1],\n    [-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2],\n  ],\n  [PieceType.KING]: [\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3],\n    [-0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2],\n    [-0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1],\n    [0.2, 0.2, 0, 0, 0, 0, 0.2, 0.2],\n    [0.2, 0.3, 0, 0, 0, 0, 0.3, 0.2],\n  ],\n};\n\n// Bonus pour le contrôle du centre du plateau (cases centrales plus précieuses)\nexport const centerControlBonus: { [key: string]: number } = {\n  '3,3': 0.5,\n  '3,4': 0.5,\n  '4,3': 0.5,\n  '4,4': 0.5, // Cases centrales\n  '2,3': 0.25,\n  '2,4': 0.25,\n  '3,2': 0.25,\n  '4,2': 0.25,\n  '4,5': 0.25,\n  '3,5': 0.25,\n  '5,3': 0.25,\n  '5,4': 0.25, // Cases autour\n};\n\nexport function evaluateKingSafety(board: Board, color: PieceColor): number {\n  const kingPosition = board.findKing(color);\n  return kingPosition &&\n    board.isSquareUnderAttack(kingPosition.x, kingPosition.y, color)\n    ? -0.5\n    : 0;\n}\n\nfunction getPieceSquareValue(\n  type: PieceType,\n  x: number,\n  y: number,\n  flipBoard: boolean,\n  board: Board,\n  color: PieceColor,\n): number {\n  const table = pieceSquareTables[type];\n  if (!table) return 0;\n\n  // Empêcher les pions isolés de recevoir un bonus de position\n  if (type === PieceType.PAWN) {\n    const isIsolated = checkIsolatedPawns(board, x, y, color) > 0;\n    return isIsolated ? 0 : flipBoard ? table[7 - y][7 - x] : table[y][x];\n  }\n\n  // Retourne la valeur de position pour les autres pièces\n  return flipBoard ? table[7 - y][7 - x] : table[y][x];\n}\n\n// Fonction d'évaluation principale\nexport function evaluateBoard(\n  board: Board,\n  color: PieceColor,\n  flipBoard = false,\n): number {\n  let score = 0;\n\n  for (let y = 0; y < 8; y++) {\n    for (let x = 0; x < 8; x++) {\n      const piece = board.getPiece(x, y);\n      if (!piece) continue;\n\n      let pieceScore = pieceValues[piece.type];\n      pieceScore += getPieceSquareValue(\n        piece.type,\n        x,\n        y,\n        flipBoard,\n        board,\n        piece.color,\n      );\n\n      if (piece.type === PieceType.PAWN) {\n        pieceScore += evaluatePawnStructure(board, x, y, piece.color);\n        pieceScore += evaluatePawnChains(board, x, y, piece.color);\n        pieceScore += evaluateAdvancedPawnStructure(board, x, y, piece.color);\n\n        const centerBonus = centerControlBonus[`${x},${y}`];\n        if (centerBonus && checkIsolatedPawns(board, x, y, piece.color) === 0) {\n          pieceScore += centerBonus;\n        }\n      }\n\n      pieceScore += evaluateKeySquareControl(board, x, y, piece.color);\n\n      if (piece.type === PieceType.KING) {\n        pieceScore += evaluateKingSafetyAdvanced(board, x, y, piece.color);\n      }\n\n      score += piece.color === color ? pieceScore : -pieceScore;\n    }\n  }\n\n  return parseFloat(score.toFixed(2));\n}\n\nfunction evaluateKeySquareControl(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const opponentKing = board.findKing(\n    color === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE,\n  );\n  if (!opponentKing) return 0;\n\n  const dx = Math.abs(opponentKing.x - x);\n  const dy = Math.abs(opponentKing.y - y);\n\n  let score = (dx <= 1 && dy <= 1) || (dx === 0 && dy <= 2) ? 0.5 : 0;\n\n  const piece = board.getPiece(x, y);\n  if (\n    piece &&\n    pieceValues[piece.type] > 3 &&\n    (x === 3 || x === 4 || y === 3 || y === 4)\n  ) {\n    score += 0.25;\n  }\n\n  return score;\n}\n\nfunction evaluateKingSafetyAdvanced(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const directions = [\n    [-1, 0],\n    [1, 0],\n    [0, -1],\n    [0, 1],\n    [-1, -1],\n    [1, 1],\n    [-1, 1],\n    [1, -1],\n  ];\n\n  let score = 0;\n\n  for (const [dx, dy] of directions) {\n    const nx = x + dx,\n      ny = y + dy;\n    if (!board.isWithinBounds(nx, ny)) continue;\n\n    const adjPiece = board.getPiece(nx, ny);\n    if (\n      adjPiece &&\n      adjPiece.color !== color &&\n      (adjPiece.type === PieceType.ROOK || adjPiece.type === PieceType.QUEEN)\n    ) {\n      const dist = Math.abs(nx - x) + Math.abs(ny - y);\n      score -= 0.5 / dist;\n    }\n  }\n\n  return score;\n}\n\nfunction evaluateAdvancedPawnStructure(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const leftPawn = x > 0 && board.getPiece(x - 1, y);\n  const rightPawn = x < 7 && board.getPiece(x + 1, y);\n\n  return (leftPawn &&\n    leftPawn.color === color &&\n    leftPawn.type === PieceType.PAWN) ||\n    (rightPawn &&\n      rightPawn.color === color &&\n      rightPawn.type === PieceType.PAWN)\n    ? 0.3\n    : 0;\n}\n\n// Fonction pour évaluer les chaînes de pions\nfunction evaluatePawnChains(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const direction = color === PieceColor.WHITE ? -1 : 1;\n\n  let hasChain = false;\n\n  const leftX = x - 1;\n  const rightX = x + 1;\n  const forwardY = y + direction;\n\n  if (board.isWithinBounds(leftX, forwardY)) {\n    const leftDiag = board.getPiece(leftX, forwardY);\n    if (\n      leftDiag &&\n      leftDiag.color === color &&\n      leftDiag.type === PieceType.PAWN\n    ) {\n      hasChain = true;\n    }\n  }\n\n  if (board.isWithinBounds(rightX, forwardY)) {\n    const rightDiag = board.getPiece(rightX, forwardY);\n    if (\n      rightDiag &&\n      rightDiag.color === color &&\n      rightDiag.type === PieceType.PAWN\n    ) {\n      hasChain = true;\n    }\n  }\n\n  return hasChain ? 0.5 : 0;\n}\n\nfunction evaluatePawnStructure(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const passed = isPassedPawn(board, x, y, color) ? 4.5 : 0;\n  const doubled = checkDoubledPawns(board, x, y, color) * 0.25;\n  const isolated = checkIsolatedPawns(board, x, y, color) * 4;\n\n  return passed - doubled - isolated;\n}\n\nfunction checkDoubledPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  for (let i = 0; i < 8; i++) {\n    if (\n      i !== y &&\n      board.getPiece(x, i)?.type === PieceType.PAWN &&\n      board.getPiece(x, i)?.color === color\n    ) {\n      return 0.5;\n    }\n  }\n  return 0;\n}\n\nfunction checkIsolatedPawns(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): number {\n  const leftColumn = x - 1 >= 0 ? board.getPiece(x - 1, y) : null;\n  const rightColumn = x + 1 < 8 ? board.getPiece(x + 1, y) : null;\n\n  const hasAdjacentSameColorPawns =\n    (leftColumn &&\n      leftColumn.type === PieceType.PAWN &&\n      leftColumn.color === color) ||\n    (rightColumn &&\n      rightColumn.type === PieceType.PAWN &&\n      rightColumn.color === color);\n\n  return hasAdjacentSameColorPawns ? 0 : 1.5; // Retourne une pénalité si le pion est isolé\n}\n\nfunction isPassedPawn(\n  board: Board,\n  x: number,\n  y: number,\n  color: PieceColor,\n): boolean {\n  const direction = color === PieceColor.WHITE ? 1 : -1;\n\n  // Vérifie s'il y a des pions adverses devant le pion sur la même colonne\n  for (let i = y + direction; i >= 0 && i < 8; i += direction) {\n    const pieceInFront = board.getPiece(x, i);\n    if (\n      pieceInFront &&\n      pieceInFront.type === PieceType.PAWN &&\n      pieceInFront.color !== color\n    ) {\n      return false;\n    }\n  }\n\n  // Vérifie les colonnes adjacentes pour s'assurer qu'il n'y a pas de pions adverses bloquant\n  const adjacentColumns = [x - 1, x + 1];\n  for (const col of adjacentColumns) {\n    if (col >= 0 && col < 8) {\n      for (let i = y + direction; i >= 0 && i < 8; i += direction) {\n        const adjacentPiece = board.getPiece(col, i);\n        if (\n          adjacentPiece &&\n          adjacentPiece.type === PieceType.PAWN &&\n          adjacentPiece.color !== color\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { Move } from './openingBook';\n\ninterface Endgame {\n  moves: Move[];\n}\n\nexport class EndgameTablebase {\n  private static endgames: Record<string, Endgame> = {\n    kqkEndgame: {\n      moves: [\n        { fromX: 7, fromY: 1, toX: 6, toY: 1 },\n        { fromX: 6, fromY: 1, toX: 5, toY: 1 },\n        // Ajoute une séquence complète optimale ici\n      ],\n    },\n    krkEndgame: {\n      moves: [\n        { fromX: 7, fromY: 0, toX: 5, toY: 0 },\n        { fromX: 5, fromY: 0, toX: 4, toY: 0 },\n        // Séquence optimale\n      ],\n    },\n    kpEndgame: {\n      moves: [{ fromX: 6, fromY: 5, toX: 6, toY: 6 }],\n    },\n    krkpEndgame: {\n      moves: [{ fromX: 6, fromY: 0, toX: 6, toY: 1 }],\n    },\n    kqkrEndgame: {\n      moves: [{ fromX: 7, fromY: 2, toX: 6, toY: 2 }],\n    },\n    kbkpEndgame: {\n      moves: [{ fromX: 3, fromY: 3, toX: 4, toY: 2 }],\n    },\n    krrkEndgame: {\n      moves: [{ fromX: 7, fromY: 4, toX: 5, toY: 4 }],\n    },\n    kbbkEndgame: {\n      moves: [{ fromX: 5, fromY: 3, toX: 3, toY: 1 }],\n    },\n  };\n\n  static getEndgameMoves(positionKey: string): Move[] | null {\n    return this.endgames[positionKey]?.moves || null;\n  }\n\n  static isEndgame(positionKey: string): boolean {\n    return !!this.endgames[positionKey];\n  }\n\n  static suggestNextMove(positionKey: string, moveIndex = 0): Move | null {\n    const moves = this.getEndgameMoves(positionKey);\n    return moves && moveIndex < moves.length ? moves[moveIndex] : null;\n  }\n\n  static validateEndgame(\n    positionKey: string,\n    piecesOnBoard: string[],\n  ): boolean {\n    switch (positionKey) {\n      case 'kqkEndgame':\n        return piecesOnBoard.sort().join('') === 'KkQ';\n      case 'krkEndgame':\n        return piecesOnBoard.sort().join('') === 'KkR';\n      // Ajoute d'autres validations spécifiques si nécessaire\n      default:\n        return false;\n    }\n  }\n}\n","export interface Move {\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n  weight?: number;\n}\n\nexport class OpeningBook {\n  private static openings: Record<string, Move[]> = {\n    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w': [\n      { fromX: 1, fromY: 7, toX: 3, toY: 7, weight: 0.6 }, // King's pawn (e4)\n      { fromX: 6, fromY: 7, toX: 5, toY: 5, weight: 0.4 }, // Queen's pawn (d4)\n    ],\n    'rnbqkbnr/pppppppp/8/8/8/8/PPP1PPPP/RNBQKBNR w': [\n      { fromX: 2, fromY: 7, toX: 4, toY: 7, weight: 0.5 }, // English (c4)\n      { fromX: 4, fromY: 6, toX: 4, toY: 4, weight: 0.5 }, // Queen's gambit\n    ],\n    'rnbqkbnr/pppppp1p/8/8/8/8/PPPP1PPP/RNBQKBNR w': [\n      { fromX: 4, fromY: 7, toX: 4, toY: 5, weight: 1 }, // Sicilian defense\n    ],\n    'rnbqkbnr/pppppppp/8/8/8/8/PP1PPPPP/RNBQKBNR w': [\n      { fromX: 4, fromY: 7, toX: 4, toY: 5 }, // e4\n    ],\n  };\n\n  static getOpeningMove(positionKey: string): Move | null {\n    const moves = this.openings[positionKey];\n    if (moves && moves.length > 0) {\n      const totalWeight = moves.reduce(\n        (acc, move) => acc + (move.weight ?? 1),\n        0,\n      );\n      let randomValue = Math.random() * totalWeight;\n      for (const move of moves) {\n        randomValue -= move.weight ?? 1;\n        if (randomValue <= 0) {\n          return move;\n        }\n      }\n    }\n    return null;\n  }\n\n  static addOpeningMove(positionKey: string, move: Move): void {\n    if (!this.openings[positionKey]) {\n      this.openings[positionKey] = [];\n    }\n    this.openings[positionKey].push(move);\n  }\n}\n","export class GamesAnalyzer {\n  private gamePatterns: Map<\n    string,\n    { move: string; successRate: number; games: number }[]\n  > = new Map();\n\n  async loadGamesData() {\n    const response = await fetch('/chess-game/games.json');\n    const gamesData: { Moves: string[]; Result: string }[] =\n      await response.json();\n    this.loadGames(gamesData);\n  }\n\n  private loadGames(gamesData: { Moves: string[]; Result: string }[]) {\n    gamesData.forEach((game) => {\n      const moves = game.Moves;\n      const result = game.Result;\n\n      let currentPosition = ''; // Initial key for board state\n      moves.forEach((move) => {\n        if (!this.gamePatterns.has(currentPosition)) {\n          this.gamePatterns.set(currentPosition, []);\n        }\n\n        const moveData = this.gamePatterns.get(currentPosition);\n        const success = result === '1-0' ? 1 : result === '0-1' ? 0 : 0.5;\n        const existingMove = moveData!.find((data) => data.move === move);\n\n        if (existingMove) {\n          existingMove.successRate =\n            (existingMove.successRate * existingMove.games + success) /\n            (existingMove.games + 1);\n          existingMove.games += 1;\n        } else {\n          moveData!.push({ move, successRate: success, games: 1 });\n        }\n\n        // Update current position by appending the move\n        currentPosition += move + ' ';\n      });\n    });\n  }\n\n  getBestMove(position: string): string | null {\n    const movesData = this.gamePatterns.get(position);\n    if (!movesData || movesData.length === 0) return null;\n\n    movesData.sort((a, b) => b.successRate - a.successRate);\n    return movesData[0].move;\n  }\n}\n","import { Move } from './openingBook';\n\nexport class ContextualMoveDatabase {\n  private moveData = new Map<\n    string,\n    { move: Move; count: number; lastUsed: number }[]\n  >();\n  private maxMovesStored = 1000;\n\n  recordMove(positionKey: string, move: Move): void {\n    const key = this.normalizeKey(positionKey);\n    const moves = this.moveData.get(key) || [];\n    const existingMove = moves.find(\n      (m) =>\n        m.move.fromX === move.fromX &&\n        m.move.fromY === move.fromY &&\n        m.move.toX === move.toX &&\n        m.move.toY === move.toY,\n    );\n\n    if (existingMove) {\n      existingMove.count++;\n      existingMove.lastUsed = Date.now();\n    } else {\n      moves.push({ move, count: 1, lastUsed: Date.now() });\n    }\n\n    moves.sort((a, b) => b.count - a.count);\n    if (moves.length > this.maxMovesStored) {\n      moves.pop(); // enlève le coup le moins fréquent/récent\n    }\n    this.moveData.set(key, moves);\n  }\n\n  getMovesByFrequency(positionKey: string): { move: Move; count: number }[] {\n    return this.moveData.get(this.normalizeKey(positionKey)) || [];\n  }\n\n  private normalizeKey(key: string): string {\n    return key.replace(/\\s+/g, '');\n  }\n\n  pruneOldMoves(expirationTimeMs: number): void {\n    const now = Date.now();\n    for (const [key, moves] of this.moveData.entries()) {\n      const prunedMoves = moves.filter(\n        (m) => now - m.lastUsed < expirationTimeMs,\n      );\n      if (prunedMoves.length > 0) {\n        this.moveData.set(key, prunedMoves);\n      } else {\n        this.moveData.delete(key);\n      }\n    }\n  }\n}\n","// src/ai.ts\nimport { Board } from './board';\nimport { PieceColor } from './piece';\nimport { evaluateBoard, evaluateKingSafety } from './ai/evaluator';\nimport { EndgameTablebase } from './ai/endgameTablebase';\nimport { OpeningBook } from './ai/openingBook';\nimport { GamesAnalyzer } from './ai/gamesAnalyzer';\nimport { ContextualMoveDatabase } from './ai/contextualMoveDatabase';\n\ninterface Move {\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n}\n\nexport class AI {\n  private killerMoves = new Map<number, Move[]>();\n  private moveHistory: Move[] = [];\n  private gamesAnalyzer = new GamesAnalyzer();\n  private contextualDatabase = new ContextualMoveDatabase();\n  private gamesLoaded = false;\n  private startTime: number = 0;\n  private invalidMoves = new Set<string>();\n\n  constructor(\n    private color: PieceColor,\n    private maxTime = 30000,\n  ) {}\n\n  async loadGamesData() {\n    await this.gamesAnalyzer.loadGamesData();\n    this.gamesLoaded = true;\n  }\n\n  makeMove(board: Board): Move | null {\n    if (!this.gamesLoaded) throw new Error('Games data not loaded.');\n\n    this.startTime = Date.now();\n\n    const openingMove = OpeningBook.getOpeningMove(board.getCurrentMovesHash());\n    if (openingMove) return this.finalizeMove(openingMove, board);\n\n    const endgameMove = this.getEndgameMove(board);\n    if (endgameMove) return this.finalizeMove(endgameMove, board);\n\n    const analyzedMove = this.getAnalyzedMove(board);\n    if (analyzedMove) return this.finalizeMove(analyzedMove, board);\n\n    const bestMove = this.iterativeDeepening(board);\n\n    if (!bestMove) {\n      return null;\n    }\n\n    // 🛡️ Dernier filet de sécurité : vérifie si ce move est bien encore légal\n    const legalMoves = this.getAllValidMoves(board);\n    const isStillLegal = legalMoves.some(\n      (m) =>\n        m.fromX === bestMove.fromX &&\n        m.fromY === bestMove.fromY &&\n        m.toX === bestMove.toX &&\n        m.toY === bestMove.toY\n    );\n\n    if (!isStillLegal) {\n      console.warn('⚠️ Coup illégal détecté juste avant exécution.');\n      return null;\n    }\n\n    return this.finalizeMove(bestMove, board);\n  }\n\n  private finalizeMove(move: Move, board: Board): Move {\n    this.moveHistory.push(move);\n    this.contextualDatabase.recordMove(board.getCurrentMovesHash(), move);\n    return move;\n  }\n\n  private getEndgameMove(board: Board): Move | null {\n    if (board.getPieceCount() <= 5) {\n      const moves = EndgameTablebase.getEndgameMoves(\n        board.getCurrentMovesHash(),\n      );\n      return moves ? moves[0] : null;\n    }\n    return null;\n  }\n\n  private getAnalyzedMove(board: Board): Move | null {\n    const bestMove = this.gamesAnalyzer.getBestMove(\n      board.getCurrentMovesHash(),\n    );\n    return bestMove ? this.convertMove(bestMove) : null;\n  }\n\n  private convertMove(moveStr: string): Move {\n    const [fromX, fromY, toX, toY] = moveStr.match(/\\d+/g)!.map(Number);\n    return { fromX, fromY, toX, toY };\n  }\n\n  public addInvalidMove(move: { fromX: number; fromY: number; toX: number; toY: number }): void {\n    this.invalidMoves.add(`${move.fromX}${move.fromY}${move.toX}${move.toY}`);\n  }\n\n  public isMoveInvalid(move: { fromX: number; fromY: number; toX: number; toY: number }): boolean {\n    return this.invalidMoves.has(`${move.fromX}${move.fromY}${move.toX}${move.toY}`);\n  }\n\n  private iterativeDeepening(board: Board): Move | null {\n    let bestMove: Move | null = null;\n    let bestValue = -Infinity;\n\n    const deadline = this.startTime + this.maxTime;\n\n    let moves = this.getAllValidMoves(board);\n    if (moves.length === 0) return null;\n\n    // Prioriser les coups sortant l'IA de l'échec\n    const movesOutOfCheck = moves.filter(move => {\n    const originalPiece = board.getPiece(move.toX, move.toY);\n    const movingPiece = board.getPiece(move.fromX, move.fromY)!;\n\n    board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n      const kingSafe = !board.isKingInCheck(this.color);\n      board.setPiece(move.fromX, move.fromY, movingPiece);\n      board.setPiece(move.toX, move.toY, originalPiece);\n\n      return kingSafe;\n    });\n\n    if (movesOutOfCheck.length > 0) {\n      moves = movesOutOfCheck;\n    }\n\n    // Profondeur dynamique : moins il y a de coups, plus on peut aller profond\n    const depthLimit = moves.length > 25 ? 2 : 4;\n\n    // Tri des coups selon évaluation rapide\n    moves = moves\n      .map(move => {\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        const movingPiece = board.getPiece(move.fromX, move.fromY)!;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const score = evaluateBoard(board, this.color);\n        board.setPiece(move.fromX, move.fromY, movingPiece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        return { ...move, weight: score };\n      })\n      .sort((a, b) => (b.weight ?? 0) - (a.weight ?? 0));\n\n    for (let depth = 1; depth <= depthLimit; depth++) {\n      if (Date.now() > deadline) break;\n\n      for (const move of moves) {\n        if (Date.now() > deadline) return bestMove;\n\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        const movingPiece = board.getPiece(move.fromX, move.fromY)!;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const value = -this.minimax(\n          board,\n          depth - 1,\n          -Infinity,\n          Infinity,\n          false,\n        );\n        board.setPiece(move.fromX, move.fromY, movingPiece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        if (value > bestValue) {\n          bestValue = value;\n          bestMove = move;\n        }\n\n        if (bestValue >= 10000) return bestMove; // arrêt anticipé\n      }\n    }\n\n    return bestMove;\n  }\n\n  private minimax(\n    board: Board,\n    depth: number,\n    alpha: number,\n    beta: number,\n    maximizing: boolean,\n  ): number {\n    const now = Date.now();\n    if (depth === 0 || now - this.startTime >= this.maxTime) {\n      return (\n        evaluateBoard(board, this.color) +\n        evaluateKingSafety(board, this.color)\n      );\n    }\n\n    const moves = this.getAllValidMoves(board);\n    if (moves.length === 0) return -9999; // aucun coup possible\n\n    let value: number;\n\n    if (maximizing) {\n      value = -Infinity;\n\n      for (const move of moves) {\n        if (Date.now() - this.startTime >= this.maxTime) break;\n\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        const movingPiece = board.getPiece(move.fromX, move.fromY)!;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evalScore = -this.minimax(board, depth - 1, -beta, -alpha, false);\n        board.setPiece(move.fromX, move.fromY, movingPiece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        value = Math.max(value, evalScore);\n        alpha = Math.max(alpha, value);\n\n        if (alpha >= beta) {\n          this.killerMoves.set(\n            depth,\n            (this.killerMoves.get(depth) || []).slice(0, 1).concat(move),\n          );\n          break;\n        }\n      }\n\n    } else {\n      value = Infinity;\n\n      for (const move of moves) {\n        if (Date.now() - this.startTime >= this.maxTime) break;\n\n        const originalPiece = board.getPiece(move.toX, move.toY);\n        const movingPiece = board.getPiece(move.fromX, move.fromY)!;\n\n        board.movePiece(move.fromX, move.fromY, move.toX, move.toY);\n        const evalScore = -this.minimax(board, depth - 1, -beta, -alpha, true);\n        board.setPiece(move.fromX, move.fromY, movingPiece);\n        board.setPiece(move.toX, move.toY, originalPiece);\n\n        value = Math.min(value, evalScore);\n        beta = Math.min(beta, value);\n\n        if (alpha >= beta) {\n          this.killerMoves.set(\n            depth,\n            (this.killerMoves.get(depth) || []).slice(0, 1).concat(move),\n          );\n          break;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  private getAllValidMoves(board: Board): Move[] {\n    const moves: Move[] = [];\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const piece = board.getPiece(x, y);\n        if (piece && piece.color === this.color) {\n          const validMoves = board.getValidMoves(x, y);\n\n          const wasInCheck = board.isKingInCheck(this.color);\n\n          for (const move of validMoves) {\n            const { x: toX, y: toY } = move;\n\n            const originalPiece = board.getPiece(toX, toY);\n            const movingPiece = board.getPiece(x, y)!;\n\n            board.movePiece(x, y, toX, toY);\n\n            let kingX = -1, kingY = -1;\n            if (movingPiece.type === 'king') {\n              kingX = toX;\n              kingY = toY;\n            } else {\n              const king = board.findKing(this.color);\n              if (!king) {\n                board.setPiece(x, y, movingPiece);\n                board.setPiece(toX, toY, originalPiece);\n                continue;\n              }\n              kingX = king.x;\n              kingY = king.y;\n            }\n\n            const stillSafe =\n              board.isWithinBounds(kingX, kingY) &&\n              !board.isSquareUnderAttack(kingX, kingY, this.color);\n\n            board.setPiece(x, y, movingPiece);\n            board.setPiece(toX, toY, originalPiece);\n\n            if ((!wasInCheck && stillSafe) || (wasInCheck && stillSafe)) {\n              moves.push({ fromX: x, fromY: y, toX, toY });\n            }\n          }\n        }\n      }\n    }\n\n    return moves;\n  }\n}\n","// src/pieces/pawn.ts\nimport { BoardInterface, Piece, PieceColor, PieceType } from '../piece';\n\nexport class Pawn extends Piece {\n  public hasMoved: boolean = false;\n  private _toX: number | null = null;\n  private _toY: number | null = null;\n  private _board: BoardInterface | null = null;\n\n  constructor(color: PieceColor) {\n    super(color, PieceType.PAWN);\n  }\n\n  isValidMove(\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    board: BoardInterface,\n  ): boolean {\n    if (toX < 0 || toX >= 8 || toY < 0 || toY >= 8) {\n      return false;\n    }\n\n    const direction = this.color === PieceColor.WHITE ? -1 : 1;\n    const startRow = this.color === PieceColor.WHITE ? 6 : 1;\n    const distanceY = (toY - fromY) * direction;\n    const distanceX = Math.abs(toX - fromX);\n    const promotionRow = this.color === PieceColor.WHITE ? 0 : 7;\n\n    if (distanceX === 0 && distanceY === 1 && !board.getPiece(toX, toY)) {\n      // Vérifie la rangée de promotion et déclenche la promotion uniquement à cette rangée\n      if (toY === promotionRow) {\n        return this.handlePromotion(toX, toY, board);\n      }\n\n      return true;\n    }\n\n    if (distanceX === 1 && distanceY === 1) {\n      if (board.getPiece(toX, toY) && this.canCapture(toX, toY, board)) {\n        if (toY === promotionRow) {\n          return this.handlePromotion(toX, toY, board);\n        }\n        return true;\n      }\n\n      // Capture en passant\n      if (board.isEnPassantMove(fromX, fromY, toX, toY)) {\n        board.captureEnPassantIfValid(fromX, fromY, toX, toY);\n        return true;\n      }\n    }\n\n    if (\n      distanceX === 0 &&\n      distanceY === 2 &&\n      fromY === startRow &&\n      !board.getPiece(toX, toY) &&\n      !board.getPiece(fromX, fromY + direction)\n    ) {\n      board.updateEnPassantTarget(fromX, fromY, toX, toY, this);\n      this.hasMoved = true; // Marque que le pion a bougé\n      return true;\n    }\n\n    return false;\n  }\n\n  handlePromotion(toX: number, toY: number, board: BoardInterface): boolean {\n    this._toX = toX;\n    this._toY = toY;\n    this._board = board;\n    return true;\n  }\n}\n","// ai.worker.ts\nimport { Board } from './board';\nimport { AI } from './ai';\nimport { PieceColor, PieceType } from './piece';\nimport { Pawn } from './pieces/pawn';\n\nlet ai: AI;\nlet currentBoard: Board;\n\nself.onmessage = async (event) => {\n  const { boardData, aiColor, invalidMove } = event.data;\n\n  if (boardData && aiColor) {\n    ai = new AI(aiColor);\n    await ai.loadGamesData();\n    currentBoard = await Board.fromData(boardData);\n  }\n\n  if (invalidMove) {\n    ai.addInvalidMove(invalidMove);\n  }\n\n  let bestMove = ai.makeMove(currentBoard);\n  let attempts = 0;\n\n  while (ai.isMoveInvalid(bestMove) && attempts < 50) {\n    bestMove = ai.makeMove(currentBoard);\n    attempts++;\n  }\n\n  let captureData: { capturedWhite: PieceType[]; capturedBlack: PieceType[] } | null = null;\n  let promotionRequired = false;\n\n  if (bestMove) {\n    if (currentBoard.isCapture(bestMove.fromX, bestMove.fromY, bestMove.toX, bestMove.toY)) {\n      const targetPiece = currentBoard.getPiece(bestMove.toX, bestMove.toY);\n      if (targetPiece) {\n        captureData = {\n          capturedWhite: [],\n          capturedBlack: [],\n        };\n        if (targetPiece.color === PieceColor.WHITE) {\n          captureData.capturedWhite.push(targetPiece.type);\n        } else {\n          captureData.capturedBlack.push(targetPiece.type);\n        }\n      }\n    }\n\n    const piece = currentBoard.getPiece(bestMove.fromX, bestMove.fromY);\n    if (piece instanceof Pawn) {\n      const promotionRow = aiColor === PieceColor.WHITE ? 7 : 0;\n      if (bestMove.toY === promotionRow) {\n        promotionRequired = piece.handlePromotion(\n          bestMove.toX,\n          bestMove.toY,\n          currentBoard,\n        );\n      }\n    }\n  }\n\n  self.postMessage({ bestMove, captureData, promotionRequired });\n};\n"],"names":["createPiece","type","color","PieceType","Pawn","pawn","Rook","Knight","Bishop","Queen","King","PieceColor","Piece","fromX","fromY","toX","toY","board","dx","dy","x","y","piece","targetPiece","data","capturedWhite","capturedBlack","getPieceSymbol","updateCapturedPieces","pieceSymbol","updateCapturedPiecesDOM","capturedWhiteElement","capturedBlackElement","Board","flip","validMoves","movingPawn","capturedPawnY","isSimulation","opponentColor","king","direction","rookX","rook","kingX","kingY","capturedPawn","captureData","pieceType","kingPosition","moves","move","originalPiece","kingSafe","isKingSafe","pieces","fromRow","fromCol","toRow","toCol","destinationPiece","row","pieceData","kingPositions","nx","ny","hash","emptyCount","pieceChar","symbolMap","boardString","pieceValues","pieceSquareTables","centerControlBonus","evaluateKingSafety","getPieceSquareValue","flipBoard","table","checkIsolatedPawns","evaluateBoard","score","pieceScore","evaluatePawnStructure","evaluatePawnChains","evaluateAdvancedPawnStructure","centerBonus","evaluateKeySquareControl","evaluateKingSafetyAdvanced","opponentKing","directions","adjPiece","dist","leftPawn","rightPawn","hasChain","leftX","rightX","forwardY","leftDiag","rightDiag","passed","isPassedPawn","doubled","checkDoubledPawns","isolated","leftColumn","rightColumn","i","pieceInFront","adjacentColumns","col","adjacentPiece","EndgameTablebase","positionKey","moveIndex","piecesOnBoard","OpeningBook","totalWeight","acc","randomValue","GamesAnalyzer","gamesData","game","result","currentPosition","moveData","success","existingMove","position","movesData","a","b","ContextualMoveDatabase","key","m","expirationTimeMs","now","prunedMoves","AI","maxTime","openingMove","endgameMove","analyzedMove","bestMove","moveStr","bestValue","deadline","movesOutOfCheck","movingPiece","depthLimit","depth","value","alpha","beta","maximizing","evalScore","wasInCheck","stillSafe","startRow","distanceY","distanceX","promotionRow","ai","currentBoard","event","boardData","aiColor","invalidMove","attempts","promotionRequired"],"mappings":"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"}